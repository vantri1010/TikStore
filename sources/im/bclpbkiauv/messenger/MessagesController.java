package im.bclpbkiauv.messenger;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.LongSparseArray;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import androidx.recyclerview.widget.ItemTouchHelper;
import com.baidu.location.BDLocation;
import com.baidu.mapapi.UIMsg;
import com.bjz.comm.net.utils.AppPreferenceUtil;
import com.google.android.exoplayer2.DefaultRenderersFactory;
import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
import com.king.zxing.util.CodeUtils;
import com.king.zxing.util.LogUtils;
import im.bclpbkiauv.javaBean.fc.FollowedFcListBean;
import im.bclpbkiauv.javaBean.fc.HomeFcListBean;
import im.bclpbkiauv.javaBean.fc.RecommendFcListBean;
import im.bclpbkiauv.messenger.MessagesStorage;
import im.bclpbkiauv.messenger.NotificationCenter;
import im.bclpbkiauv.messenger.support.SparseLongArray;
import im.bclpbkiauv.sqlite.SQLiteCursor;
import im.bclpbkiauv.tgnet.ConnectionsManager;
import im.bclpbkiauv.tgnet.NativeByteBuffer;
import im.bclpbkiauv.tgnet.RequestDelegate;
import im.bclpbkiauv.tgnet.TLObject;
import im.bclpbkiauv.tgnet.TLRPC;
import im.bclpbkiauv.tgnet.TLRPCChats;
import im.bclpbkiauv.tgnet.TLRPCContacts;
import im.bclpbkiauv.ui.ChatActivity;
import im.bclpbkiauv.ui.DialogsActivity;
import im.bclpbkiauv.ui.ProfileActivity;
import im.bclpbkiauv.ui.actionbar.AlertDialog;
import im.bclpbkiauv.ui.actionbar.BaseFragment;
import im.bclpbkiauv.ui.actionbar.Theme;
import im.bclpbkiauv.ui.components.AlertsCreator;
import im.bclpbkiauv.ui.components.toast.ToastUtils;
import im.bclpbkiauv.ui.hui.chats.NewProfileActivity;
import im.bclpbkiauv.ui.hui.contacts.AddContactsInfoActivity;
import im.bclpbkiauv.ui.hui.friendscircle_v1.helper.FcDBHelper;
import im.bclpbkiauv.ui.hviews.helper.MryDeviceHelper;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CountDownLatch;

public class MessagesController extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    private static volatile MessagesController[] Instance = new MessagesController[3];
    public static final int UPDATE_MASK_ALL = 1535;
    public static final int UPDATE_MASK_AVATAR = 2;
    public static final int UPDATE_MASK_CHAT = 8192;
    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
    public static final int UPDATE_MASK_CHAT_NAME = 16;
    public static final int UPDATE_MASK_CHECK = 65536;
    public static final int UPDATE_MASK_MESSAGE_TEXT = 32768;
    public static final int UPDATE_MASK_NAME = 1;
    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
    public static final int UPDATE_MASK_PHONE = 1024;
    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
    public static final int UPDATE_MASK_REORDER = 131072;
    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
    public static final int UPDATE_MASK_SEND_STATE = 4096;
    public static final int UPDATE_MASK_STATUS = 4;
    public static final int UPDATE_MASK_USER_PHONE = 128;
    public static final int UPDATE_MASK_USER_PRINT = 64;
    private static volatile long lastPasswordCheckTime;
    private static volatile long lastThemeCheckTime;
    private int DIALOGS_LOAD_TYPE_CACHE = 1;
    private int DIALOGS_LOAD_TYPE_CHANNEL = 2;
    private int DIALOGS_LOAD_TYPE_UNKNOWN = 3;
    protected ArrayList<TLRPC.Dialog> allDialogs = new ArrayList<>();
    public float animatedEmojisZoom;
    public int availableMapProviders;
    public boolean blockedCountry;
    public boolean blockedEndReached;
    public SparseIntArray blockedUsers = new SparseIntArray();
    public int callConnectTimeout;
    public int callPacketTimeout;
    public int callReceiveTimeout;
    public int callRingTimeout;
    public boolean canRevokePmInbox;
    private SparseArray<SparseArray<String>> channelAdmins = new SparseArray<>();
    private SparseArray<ArrayList<Integer>> channelViewsToSend = new SparseArray<>();
    private SparseIntArray channelsPts = new SparseIntArray();
    private ConcurrentHashMap<Integer, TLRPC.Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
    private SparseBooleanArray checkingLastMessagesDialogs = new SparseBooleanArray();
    private boolean checkingProxyInfo;
    private int checkingProxyInfoRequestId;
    private boolean checkingTosUpdate;
    private LongSparseArray<TLRPC.Dialog> clearingHistoryDialogs = new LongSparseArray<>();
    private boolean contactsGetDiff = false;
    private ArrayList<Long> createdDialogIds = new ArrayList<>();
    private ArrayList<Long> createdDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> createdScheduledDialogIds = new ArrayList<>();
    private Runnable currentDeleteTaskRunnable;
    private int currentDeletingTaskChannelId;
    private ArrayList<Integer> currentDeletingTaskMids;
    private int currentDeletingTaskTime;
    public String dcDomainName;
    public boolean defaultP2pContacts;
    public LongSparseArray<Integer> deletedHistory = new LongSparseArray<>();
    private LongSparseArray<TLRPC.Dialog> deletingDialogs = new LongSparseArray<>();
    private final Comparator<TLRPC.Dialog> dialogComparator = new Comparator() {
        public final int compare(Object obj, Object obj2) {
            return MessagesController.this.lambda$new$1$MessagesController((TLRPC.Dialog) obj, (TLRPC.Dialog) obj2);
        }
    };
    public LongSparseArray<MessageObject> dialogMessage = new LongSparseArray<>();
    public SparseArray<MessageObject> dialogMessagesByIds = new SparseArray<>();
    public LongSparseArray<MessageObject> dialogMessagesByRandomIds = new LongSparseArray<>();
    private SparseArray<ArrayList<TLRPC.Dialog>> dialogsByFolder = new SparseArray<>();
    public ArrayList<TLRPC.Dialog> dialogsCanAddUsers = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsChannelsOnly = new ArrayList<>();
    private SparseBooleanArray dialogsEndReached = new SparseBooleanArray();
    public ArrayList<TLRPC.Dialog> dialogsForward = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsGroupsOnly = new ArrayList<>();
    private boolean dialogsInTransaction;
    public boolean dialogsLoaded;
    public ArrayList<TLRPC.Dialog> dialogsServerOnly = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsUnreadOnly = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsUsersOnly = new ArrayList<>();
    public LongSparseArray<TLRPC.Dialog> dialogs_dict = new LongSparseArray<>();
    public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public ConcurrentHashMap<Long, Integer> dialogs_read_outbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    private SharedPreferences emojiPreferences;
    public boolean enableDigitCoin;
    public boolean enableHub;
    public boolean enableJoined;
    public boolean enableWallet;
    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
    private SparseArray<TLRPC.ExportedChatInvite> exportedChats = new SparseArray<>();
    public boolean firstGettingTask;
    private SparseArray<TLRPC.ChatFull> fullChats = new SparseArray<>();
    private SparseArray<TLRPC.UserFull> fullUsers = new SparseArray<>();
    private boolean getDifferenceFirstSync = true;
    public boolean gettingDifference;
    private SparseBooleanArray gettingDifferenceChannels = new SparseBooleanArray();
    private boolean gettingNewDeleteTask;
    private SparseBooleanArray gettingUnknownChannels = new SparseBooleanArray();
    private LongSparseArray<Boolean> gettingUnknownDialogs = new LongSparseArray<>();
    public String gifSearchBot;
    public ArrayList<TLRPC.RecentMeUrl> hintDialogs = new ArrayList<>();
    public String imageSearchBot;
    private String installReferer;
    private boolean isLeftProxyChannel;
    private ArrayList<Integer> joiningToChannels = new ArrayList<>();
    private int lastCheckProxyId;
    private int lastPrintingStringCount;
    private long lastPushRegisterSendTime;
    private LongSparseArray<Long> lastScheduledServerQueryTime = new LongSparseArray<>();
    private long lastStatusUpdateTime;
    private long lastViewsCheckTime;
    public String linkPrefix;
    private ArrayList<Integer> loadedFullChats = new ArrayList<>();
    private ArrayList<Integer> loadedFullParticipants = new ArrayList<>();
    private ArrayList<Integer> loadedFullUsers = new ArrayList<>();
    private boolean loadingAppConfig;
    public boolean loadingBlockedUsers = false;
    private SparseIntArray loadingChannelAdmins = new SparseIntArray();
    private SparseBooleanArray loadingDialogs = new SparseBooleanArray();
    private ArrayList<Integer> loadingFullChats = new ArrayList<>();
    private ArrayList<Integer> loadingFullParticipants = new ArrayList<>();
    private ArrayList<Integer> loadingFullUsers = new ArrayList<>();
    private int loadingNotificationSettings;
    private boolean loadingNotificationSignUpSettings;
    private LongSparseArray<Boolean> loadingPeerSettings = new LongSparseArray<>();
    private SparseIntArray loadingPinnedDialogs = new SparseIntArray();
    private boolean loadingUnreadDialogs;
    private SharedPreferences mainPreferences;
    public String mapKey;
    public int mapProvider;
    public int maxBroadcastCount = 100;
    public int maxCaptionLength;
    public int maxEditTime;
    public int maxFaveStickersCount;
    public int maxFolderPinnedDialogsCount;
    public int maxGroupCount;
    public int maxMegagroupCount;
    public int maxMessageLength;
    public int maxPinnedDialogsCount;
    public int maxRecentGifsCount;
    public int maxRecentStickersCount;
    private SparseIntArray migratedChats = new SparseIntArray();
    private boolean migratingDialogs;
    public int minGroupConvertSize = ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION;
    private SparseIntArray needShortPollChannels = new SparseIntArray();
    private SparseIntArray needShortPollOnlines = new SparseIntArray();
    private SparseIntArray nextDialogsCacheOffset = new SparseIntArray();
    private int nextProxyInfoCheckTime;
    private int nextTosCheckTime;
    private SharedPreferences notificationsPreferences;
    private ConcurrentHashMap<String, TLObject> objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
    private boolean offlineSent;
    public ConcurrentHashMap<Integer, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
    private Runnable passwordCheckRunnable = new Runnable() {
        public final void run() {
            MessagesController.this.lambda$new$0$MessagesController();
        }
    };
    private LongSparseArray<SparseArray<MessageObject>> pollsToCheck = new LongSparseArray<>();
    private int pollsToCheckSize;
    public boolean preloadFeaturedStickers;
    public LongSparseArray<CharSequence> printingStrings = new LongSparseArray<>();
    public LongSparseArray<Integer> printingStringsTypes = new LongSparseArray<>();
    public ConcurrentHashMap<Long, ArrayList<PrintingUser>> printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
    private TLRPC.Dialog proxyDialog;
    private String proxyDialogAddress;
    private long proxyDialogId;
    public int ratingDecay;
    private ArrayList<ReadTask> readTasks = new ArrayList<>();
    private LongSparseArray<ReadTask> readTasksMap = new LongSparseArray<>();
    public boolean registeringForPush;
    private LongSparseArray<ArrayList<Integer>> reloadingMessages = new LongSparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> reloadingScheduledWebpages = new HashMap<>();
    private LongSparseArray<ArrayList<MessageObject>> reloadingScheduledWebpagesPending = new LongSparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> reloadingWebpages = new HashMap<>();
    private LongSparseArray<ArrayList<MessageObject>> reloadingWebpagesPending = new LongSparseArray<>();
    private TLRPC.messages_Dialogs resetDialogsAll;
    private TLRPC.TL_messages_peerDialogs resetDialogsPinned;
    private boolean resetingDialogs;
    public int revokeTimeLimit;
    public int revokeTimePmLimit;
    public int secretWebpagePreview;
    public SparseArray<LongSparseArray<Boolean>> sendingTypings = new SparseArray<>();
    private SparseBooleanArray serverDialogsEndReached = new SparseBooleanArray();
    public String sharePrefix;
    private SparseIntArray shortPollChannels = new SparseIntArray();
    private SparseIntArray shortPollOnlines = new SparseIntArray();
    private int statusRequest;
    private int statusSettingState;
    public boolean suggestContacts = true;
    public String suggestedLangCode;
    private Runnable themeCheckRunnable = $$Lambda$QPCgezYtmVyr79RuqogqmuK_a6Q.INSTANCE;
    public int totalBlockedCount = -1;
    public int unreadUnmutedDialogs;
    private final Comparator<TLRPC.Update> updatesComparator = new Comparator() {
        public final int compare(Object obj, Object obj2) {
            return MessagesController.this.lambda$new$2$MessagesController((TLRPC.Update) obj, (TLRPC.Update) obj2);
        }
    };
    private SparseArray<ArrayList<TLRPC.Updates>> updatesQueueChannels = new SparseArray<>();
    private ArrayList<TLRPC.Updates> updatesQueuePts = new ArrayList<>();
    private ArrayList<TLRPC.Updates> updatesQueueQts = new ArrayList<>();
    private ArrayList<TLRPC.Updates> updatesQueueSeq = new ArrayList<>();
    private SparseLongArray updatesStartWaitTimeChannels = new SparseLongArray();
    private long updatesStartWaitTimePts;
    private long updatesStartWaitTimeQts;
    private long updatesStartWaitTimeSeq;
    public boolean updatingState;
    private String uploadingAvatar;
    private HashMap<String, Theme.ThemeInfo> uploadingThemes = new HashMap<>();
    private String uploadingWallpaper;
    private boolean uploadingWallpaperBlurred;
    private boolean uploadingWallpaperMotion;
    private ConcurrentHashMap<Integer, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
    public String venueSearchBot;
    private ArrayList<Long> visibleDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> visibleScheduledDialogMainThreadIds = new ArrayList<>();
    public int webFileDatacenterId;

    public static class PrintingUser {
        public TLRPC.SendMessageAction action;
        public long lastTime;
        public int userId;
    }

    public /* synthetic */ void lambda$new$0$MessagesController() {
        getUserConfig().checkSavedPassword();
    }

    private static class UserActionUpdatesSeq extends TLRPC.Updates {
        private UserActionUpdatesSeq() {
        }
    }

    private static class UserActionUpdatesPts extends TLRPC.Updates {
        private UserActionUpdatesPts() {
        }
    }

    private class ReadTask {
        public long dialogId;
        public int maxDate;
        public int maxId;
        public long sendRequestTime;

        private ReadTask() {
        }
    }

    public /* synthetic */ int lambda$new$1$MessagesController(TLRPC.Dialog dialog1, TLRPC.Dialog dialog2) {
        if ((dialog1 instanceof TLRPC.TL_dialogFolder) && !(dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return -1;
        }
        if (!(dialog1 instanceof TLRPC.TL_dialogFolder) && (dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return 1;
        }
        if (!dialog1.pinned && dialog2.pinned) {
            return 1;
        }
        if (dialog1.pinned && !dialog2.pinned) {
            return -1;
        }
        if (!dialog1.pinned || !dialog2.pinned) {
            TLRPC.DraftMessage draftMessage = getMediaDataController().getDraft(dialog1.id);
            int date1 = (draftMessage == null || draftMessage.date < dialog1.last_message_date) ? dialog1.last_message_date : draftMessage.date;
            TLRPC.DraftMessage draftMessage2 = getMediaDataController().getDraft(dialog2.id);
            int date2 = (draftMessage2 == null || draftMessage2.date < dialog2.last_message_date) ? dialog2.last_message_date : draftMessage2.date;
            if (date1 < date2) {
                return 1;
            }
            if (date1 > date2) {
                return -1;
            }
            return 0;
        } else if (dialog1.pinnedNum < dialog2.pinnedNum) {
            return 1;
        } else {
            if (dialog1.pinnedNum > dialog2.pinnedNum) {
                return -1;
            }
            return 0;
        }
    }

    public /* synthetic */ int lambda$new$2$MessagesController(TLRPC.Update lhs, TLRPC.Update rhs) {
        int ltype = getUpdateType(lhs);
        int rtype = getUpdateType(rhs);
        if (ltype != rtype) {
            return AndroidUtilities.compare(ltype, rtype);
        }
        if (ltype == 0) {
            return AndroidUtilities.compare(getUpdatePts(lhs), getUpdatePts(rhs));
        }
        if (ltype == 1) {
            return AndroidUtilities.compare(getUpdateQts(lhs), getUpdateQts(rhs));
        }
        if (ltype != 2) {
            return 0;
        }
        int lChannel = getUpdateChannelId(lhs);
        int rChannel = getUpdateChannelId(rhs);
        if (lChannel == rChannel) {
            return AndroidUtilities.compare(getUpdatePts(lhs), getUpdatePts(rhs));
        }
        return AndroidUtilities.compare(lChannel, rChannel);
    }

    public static MessagesController getInstance(int num) {
        MessagesController localInstance = Instance[num];
        if (localInstance == null) {
            synchronized (MessagesController.class) {
                localInstance = Instance[num];
                if (localInstance == null) {
                    MessagesController[] messagesControllerArr = Instance;
                    MessagesController messagesController = new MessagesController(num);
                    localInstance = messagesController;
                    messagesControllerArr[num] = messagesController;
                }
            }
        }
        return localInstance;
    }

    public static SharedPreferences getNotificationsSettings(int account) {
        return getInstance(account).notificationsPreferences;
    }

    public static SharedPreferences getGlobalNotificationsSettings() {
        return getInstance(0).notificationsPreferences;
    }

    public static SharedPreferences getMainSettings(int account) {
        return getInstance(account).mainPreferences;
    }

    public static SharedPreferences getGlobalMainSettings() {
        return getInstance(0).mainPreferences;
    }

    public static SharedPreferences getEmojiSettings(int account) {
        return getInstance(account).emojiPreferences;
    }

    public static SharedPreferences getGlobalEmojiSettings() {
        return getInstance(0).emojiPreferences;
    }

    public MessagesController(int num) {
        super(num);
        int i = 2;
        this.currentAccount = num;
        ImageLoader.getInstance();
        getMessagesStorage();
        getLocationController();
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$new$3$MessagesController();
            }
        });
        addSupportUser();
        if (this.currentAccount == 0) {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
            this.emojiPreferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0);
        } else {
            Context context = ApplicationLoader.applicationContext;
            this.notificationsPreferences = context.getSharedPreferences("Notifications" + this.currentAccount, 0);
            Context context2 = ApplicationLoader.applicationContext;
            this.mainPreferences = context2.getSharedPreferences("mainconfig" + this.currentAccount, 0);
            Context context3 = ApplicationLoader.applicationContext;
            this.emojiPreferences = context3.getSharedPreferences("emoji" + this.currentAccount, 0);
        }
        this.enableJoined = this.notificationsPreferences.getBoolean("EnableContactJoined", true);
        this.secretWebpagePreview = this.mainPreferences.getInt("secretWebpage2", 2);
        this.maxGroupCount = this.mainPreferences.getInt("maxGroupCount", ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION);
        this.maxMegagroupCount = this.mainPreferences.getInt("maxMegagroupCount", 10000);
        this.maxRecentGifsCount = this.mainPreferences.getInt("maxRecentGifsCount", ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION);
        this.maxRecentStickersCount = this.mainPreferences.getInt("maxRecentStickersCount", 30);
        this.maxFaveStickersCount = this.mainPreferences.getInt("maxFaveStickersCount", 5);
        this.maxEditTime = this.mainPreferences.getInt("maxEditTime", 3600);
        this.ratingDecay = this.mainPreferences.getInt("ratingDecay", 2419200);
        this.linkPrefix = "m12345.cc";
        this.sharePrefix = this.mainPreferences.getString("sharePrefix", BuildVars.RELEASE_VERSION ? "https://m12345.cc/install.html?appkey=aa717156fa6e34325d3d4a7004a6647a" : "http://www.shareinstall.com.cn/js-test.html?appkey=aa717156fa6e34325d3d4a7004a6647a");
        this.callReceiveTimeout = this.mainPreferences.getInt("callReceiveTimeout", 20000);
        this.callRingTimeout = this.mainPreferences.getInt("callRingTimeout", 90000);
        this.callConnectTimeout = this.mainPreferences.getInt("callConnectTimeout", UIMsg.m_AppUI.MSG_RADAR_SEARCH_RETURN_RESULT);
        this.callPacketTimeout = this.mainPreferences.getInt("callPacketTimeout", 10000);
        this.maxPinnedDialogsCount = this.mainPreferences.getInt("maxPinnedDialogsCount", 5);
        this.maxFolderPinnedDialogsCount = this.mainPreferences.getInt("maxFolderPinnedDialogsCount", 100);
        this.maxMessageLength = this.mainPreferences.getInt("maxMessageLength", 4096);
        this.maxCaptionLength = this.mainPreferences.getInt("maxCaptionLength", 1024);
        this.mapProvider = this.mainPreferences.getInt("mapProvider", 0);
        this.availableMapProviders = this.mainPreferences.getInt("availableMapProviders", 3);
        this.mapKey = this.mainPreferences.getString("pk", (String) null);
        this.installReferer = this.mainPreferences.getString("installReferer", (String) null);
        this.defaultP2pContacts = this.mainPreferences.getBoolean("defaultP2pContacts", false);
        this.revokeTimeLimit = this.mainPreferences.getInt("revokeTimeLimit", this.revokeTimeLimit);
        this.revokeTimePmLimit = this.mainPreferences.getInt("revokeTimePmLimit", this.revokeTimePmLimit);
        this.canRevokePmInbox = this.mainPreferences.getBoolean("canRevokePmInbox", this.canRevokePmInbox);
        this.preloadFeaturedStickers = this.mainPreferences.getBoolean("preloadFeaturedStickers", false);
        this.proxyDialogId = this.mainPreferences.getLong("proxy_dialog", 0);
        this.proxyDialogAddress = this.mainPreferences.getString("proxyDialogAddress", (String) null);
        this.nextTosCheckTime = this.notificationsPreferences.getInt("nextTosCheckTime", 0);
        this.venueSearchBot = this.mainPreferences.getString("venueSearchBot", "foursquare");
        this.gifSearchBot = this.mainPreferences.getString("gifSearchBot", "gif");
        this.imageSearchBot = this.mainPreferences.getString("imageSearchBot", "pic");
        this.blockedCountry = this.mainPreferences.getBoolean("blockedCountry", false);
        this.dcDomainName = this.mainPreferences.getString("dcDomainName2", ConnectionsManager.native_isTestBackend(this.currentAccount) != 0 ? "tapv3.stel.com" : "apv3.stel.com");
        this.webFileDatacenterId = this.mainPreferences.getInt("webFileDatacenterId", ConnectionsManager.native_isTestBackend(this.currentAccount) == 0 ? 4 : i);
        this.suggestedLangCode = this.mainPreferences.getString("suggestedLangCode", "en");
        this.animatedEmojisZoom = this.mainPreferences.getFloat("animatedEmojisZoom", 0.625f);
        this.enableHub = this.mainPreferences.getBoolean("enable_hub", false);
        this.enableWallet = this.mainPreferences.getBoolean("enable_wallet", false);
        this.enableDigitCoin = this.mainPreferences.getBoolean("enable_digit_coin", false);
    }

    public /* synthetic */ void lambda$new$3$MessagesController() {
        MessagesController messagesController = getMessagesController();
        getNotificationCenter().addObserver(messagesController, NotificationCenter.FileDidUpload);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.FileDidFailUpload);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileDidLoad);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileDidFailToLoad);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.updateMessageMedia);
    }

    private void loadAppConfig() {
        if (!this.loadingAppConfig) {
            this.loadingAppConfig = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_help_getAppConfig(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadAppConfig$5$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadAppConfig$5$MessagesController(TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(response) {
            private final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$4$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$4$MessagesController(TLObject response) {
        if (response instanceof TLRPC.TL_jsonObject) {
            SharedPreferences.Editor editor = this.mainPreferences.edit();
            boolean changed = false;
            TLRPC.TL_jsonObject object = (TLRPC.TL_jsonObject) response;
            int N = object.value.size();
            for (int a = 0; a < N; a++) {
                TLRPC.TL_jsonObjectValue value = object.value.get(a);
                if ("emojies_animated_zoom".equals(value.key) && (value.value instanceof TLRPC.TL_jsonNumber)) {
                    TLRPC.TL_jsonNumber number = (TLRPC.TL_jsonNumber) value.value;
                    if (((double) this.animatedEmojisZoom) != number.value) {
                        float f = (float) number.value;
                        this.animatedEmojisZoom = f;
                        editor.putFloat("animatedEmojisZoom", f);
                        changed = true;
                    }
                }
            }
            if (changed) {
                editor.commit();
            }
        }
        this.loadingAppConfig = false;
    }

    public void updateConfig(TLRPC.TL_config config) {
        AndroidUtilities.runOnUIThread(new Runnable(config) {
            private final /* synthetic */ TLRPC.TL_config f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$updateConfig$6$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$updateConfig$6$MessagesController(TLRPC.TL_config config) {
        String str;
        getDownloadController().loadAutoDownloadConfig(false);
        loadAppConfig();
        this.maxMegagroupCount = config.megagroup_size_max;
        this.maxGroupCount = config.chat_size_max;
        this.maxEditTime = config.edit_time_limit;
        this.ratingDecay = config.rating_e_decay;
        this.maxRecentGifsCount = config.saved_gifs_limit;
        this.maxRecentStickersCount = config.stickers_recent_limit;
        this.maxFaveStickersCount = config.stickers_faved_limit;
        this.revokeTimeLimit = config.revoke_time_limit;
        this.revokeTimePmLimit = config.revoke_pm_time_limit;
        this.canRevokePmInbox = config.revoke_pm_inbox;
        this.linkPrefix = "m12345.cc";
        if ("m12345.cc".endsWith("/")) {
            String str2 = this.linkPrefix;
            this.linkPrefix = str2.substring(0, str2.length() - 1);
        }
        if (this.linkPrefix.startsWith("https://")) {
            this.linkPrefix = this.linkPrefix.substring(8);
        } else if (this.linkPrefix.startsWith("http://")) {
            this.linkPrefix = this.linkPrefix.substring(7);
        }
        this.linkPrefix = "m12345.cc";
        this.sharePrefix = config.me_url_prefix;
        this.callReceiveTimeout = config.call_receive_timeout_ms;
        this.callRingTimeout = config.call_ring_timeout_ms;
        this.callConnectTimeout = config.call_connect_timeout_ms;
        this.callPacketTimeout = config.call_packet_timeout_ms;
        this.maxPinnedDialogsCount = config.pinned_dialogs_count_max;
        this.maxFolderPinnedDialogsCount = config.pinned_infolder_count_max;
        this.maxMessageLength = config.message_length_max;
        this.maxCaptionLength = config.caption_length_max;
        this.defaultP2pContacts = config.default_p2p_contacts;
        this.preloadFeaturedStickers = config.preload_featured_stickers;
        this.enableHub = ((config.flags >> 19) & 1) != 0;
        this.enableWallet = ((config.flags >> 20) & 1) != 0;
        this.enableDigitCoin = ((config.flags >> 21) & 1) != 0;
        if (config.venue_search_username != null) {
            this.venueSearchBot = config.venue_search_username;
        }
        if (config.gif_search_username != null) {
            this.gifSearchBot = config.gif_search_username;
        }
        if (this.imageSearchBot != null) {
            this.imageSearchBot = config.img_search_username;
        }
        this.blockedCountry = config.blocked_mode;
        this.dcDomainName = config.dc_txt_domain_name;
        this.webFileDatacenterId = config.webfile_dc_id;
        if (config.suggested_lang_code != null && ((str = this.suggestedLangCode) == null || !str.equals(config.suggested_lang_code))) {
            this.suggestedLangCode = config.suggested_lang_code;
            LocaleController.getInstance().loadRemoteLanguages(this.currentAccount);
        }
        Theme.loadRemoteThemes(this.currentAccount, false);
        Theme.checkCurrentRemoteTheme(false);
        if (config.static_maps_provider == null) {
            config.static_maps_provider = "google";
        }
        this.mapKey = null;
        this.mapProvider = 2;
        this.availableMapProviders = 0;
        String[] providers = config.static_maps_provider.split(",");
        for (int a = 0; a < providers.length; a++) {
            String[] mapArgs = providers[a].split("\\+");
            if (mapArgs.length > 0) {
                String[] typeAndKey = mapArgs[0].split(LogUtils.COLON);
                if (typeAndKey.length > 0) {
                    if ("yandex".equals(typeAndKey[0])) {
                        if (a == 0) {
                            if (mapArgs.length > 1) {
                                this.mapProvider = 3;
                            } else {
                                this.mapProvider = 1;
                            }
                        }
                        this.availableMapProviders |= 4;
                    } else if ("google".equals(typeAndKey[0])) {
                        if (a == 0 && mapArgs.length > 1) {
                            this.mapProvider = 4;
                        }
                        this.availableMapProviders |= 1;
                    } else if ("hchat".equals(typeAndKey[0])) {
                        if (a == 0) {
                            this.mapProvider = 2;
                        }
                        this.availableMapProviders |= 2;
                    }
                    if (typeAndKey.length > 1) {
                        this.mapKey = typeAndKey[1];
                    }
                }
            }
        }
        SharedPreferences.Editor editor = this.mainPreferences.edit();
        editor.putInt("maxGroupCount", this.maxGroupCount);
        editor.putInt("maxMegagroupCount", this.maxMegagroupCount);
        editor.putInt("maxEditTime", this.maxEditTime);
        editor.putInt("ratingDecay", this.ratingDecay);
        editor.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
        editor.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
        editor.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
        editor.putInt("callReceiveTimeout", this.callReceiveTimeout);
        editor.putInt("callRingTimeout", this.callRingTimeout);
        editor.putInt("callConnectTimeout", this.callConnectTimeout);
        editor.putInt("callPacketTimeout", this.callPacketTimeout);
        editor.putString("linkPrefix", this.linkPrefix);
        editor.putString("sharePrefix", this.sharePrefix);
        editor.putInt("maxPinnedDialogsCount", this.maxPinnedDialogsCount);
        editor.putInt("maxFolderPinnedDialogsCount", this.maxFolderPinnedDialogsCount);
        editor.putInt("maxMessageLength", this.maxMessageLength);
        editor.putInt("maxCaptionLength", this.maxCaptionLength);
        editor.putBoolean("defaultP2pContacts", this.defaultP2pContacts);
        editor.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
        editor.putInt("revokeTimeLimit", this.revokeTimeLimit);
        editor.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
        editor.putInt("mapProvider", this.mapProvider);
        String str3 = this.mapKey;
        if (str3 != null) {
            editor.putString("pk", str3);
        } else {
            editor.remove("pk");
        }
        editor.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
        editor.putBoolean("blockedCountry", this.blockedCountry);
        editor.putString("venueSearchBot", this.venueSearchBot);
        editor.putString("gifSearchBot", this.gifSearchBot);
        editor.putString("imageSearchBot", this.imageSearchBot);
        editor.putString("dcDomainName2", this.dcDomainName);
        editor.putInt("webFileDatacenterId", this.webFileDatacenterId);
        editor.putString("suggestedLangCode", this.suggestedLangCode);
        editor.putBoolean("enable_hub", this.enableHub);
        editor.putBoolean("enable_wallet", this.enableWallet);
        editor.putBoolean("enable_digit_coin", this.enableDigitCoin);
        editor.commit();
        LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, config.lang_pack_version, config.base_lang_pack_version);
        getNotificationCenter().postNotificationName(NotificationCenter.configLoaded, new Object[0]);
    }

    public void addSupportUser() {
        TLRPC.TL_userForeign_old2 user = new TLRPC.TL_userForeign_old2();
        user.phone = "333";
        user.id = 333000;
        user.first_name = "Yixin";
        user.last_name = "";
        user.status = null;
        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
        putUser(user, true);
        TLRPC.TL_userForeign_old2 user2 = new TLRPC.TL_userForeign_old2();
        user2.phone = "42777";
        user2.id = 777000;
        user2.verified = true;
        user2.first_name = "Yixin";
        user2.last_name = "Notifications";
        user2.status = null;
        user2.photo = new TLRPC.TL_userProfilePhotoEmpty();
        putUser(user2, true);
    }

    public TLRPC.InputUser getInputUser(TLRPC.User user) {
        if (user == null) {
            return new TLRPC.TL_inputUserEmpty();
        }
        if (user.id == getUserConfig().getClientUserId()) {
            return new TLRPC.TL_inputUserSelf();
        }
        TLRPC.InputUser inputUser = new TLRPC.TL_inputUser();
        inputUser.user_id = user.id;
        inputUser.access_hash = user.access_hash;
        return inputUser;
    }

    public TLRPC.InputUser getInputUser(int user_id) {
        return getInputUser(getInstance(UserConfig.selectedAccount).getUser(Integer.valueOf(user_id)));
    }

    public static TLRPC.InputChannel getInputChannel(TLRPC.Chat chat) {
        if (!(chat instanceof TLRPC.TL_channel) && !(chat instanceof TLRPC.TL_channelForbidden)) {
            return new TLRPC.TL_inputChannelEmpty();
        }
        TLRPC.InputChannel inputChat = new TLRPC.TL_inputChannel();
        inputChat.channel_id = chat.id;
        inputChat.access_hash = chat.access_hash;
        return inputChat;
    }

    public TLRPC.InputChannel getInputChannel(int chatId) {
        return getInputChannel(getChat(Integer.valueOf(chatId)));
    }

    public TLRPC.InputPeer getInputPeer(int id) {
        if (id < 0) {
            TLRPC.Chat chat = getChat(Integer.valueOf(-id));
            if (ChatObject.isChannel(chat)) {
                TLRPC.InputPeer inputPeer = new TLRPC.TL_inputPeerChannel();
                inputPeer.channel_id = -id;
                inputPeer.access_hash = chat.access_hash;
                return inputPeer;
            }
            TLRPC.InputPeer inputPeer2 = new TLRPC.TL_inputPeerChat();
            inputPeer2.chat_id = -id;
            return inputPeer2;
        }
        TLRPC.User user = getUser(Integer.valueOf(id));
        TLRPC.InputPeer inputPeer3 = new TLRPC.TL_inputPeerUser();
        inputPeer3.user_id = id;
        if (user == null) {
            return inputPeer3;
        }
        inputPeer3.access_hash = user.access_hash;
        return inputPeer3;
    }

    public TLRPC.Peer getPeer(int id) {
        if (id < 0) {
            TLRPC.Chat chat = getChat(Integer.valueOf(-id));
            if ((chat instanceof TLRPC.TL_channel) || (chat instanceof TLRPC.TL_channelForbidden)) {
                TLRPC.Peer inputPeer = new TLRPC.TL_peerChannel();
                inputPeer.channel_id = -id;
                return inputPeer;
            }
            TLRPC.Peer inputPeer2 = new TLRPC.TL_peerChat();
            inputPeer2.chat_id = -id;
            return inputPeer2;
        }
        TLRPC.User user = getUser(Integer.valueOf(id));
        TLRPC.Peer inputPeer3 = new TLRPC.TL_peerUser();
        inputPeer3.user_id = id;
        return inputPeer3;
    }

    public void didReceivedNotification(int id, int account, Object... args) {
        if (id == NotificationCenter.FileDidUpload) {
            String location = args[0];
            TLRPC.InputFile file = args[1];
            String str = this.uploadingAvatar;
            if (str == null || !str.equals(location)) {
                String str2 = this.uploadingWallpaper;
                if (str2 == null || !str2.equals(location)) {
                    Theme.ThemeInfo themeInfo = this.uploadingThemes.get(location);
                    if (themeInfo != null) {
                        if (location.equals(themeInfo.uploadingThumb)) {
                            themeInfo.uploadedThumb = file;
                            themeInfo.uploadingThumb = null;
                        } else if (location.equals(themeInfo.uploadingFile)) {
                            themeInfo.uploadedFile = file;
                            themeInfo.uploadingFile = null;
                        }
                        if (!(themeInfo.uploadedFile == null || themeInfo.uploadedThumb == null)) {
                            new File(location);
                            TLRPC.TL_account_uploadTheme req = new TLRPC.TL_account_uploadTheme();
                            req.mime_type = "application/x-tgtheme-android";
                            req.file_name = "theme.attheme";
                            req.file = themeInfo.uploadedFile;
                            req.file.name = "theme.attheme";
                            req.thumb = themeInfo.uploadedThumb;
                            req.thumb.name = "theme-preview.jpg";
                            req.flags = 1 | req.flags;
                            themeInfo.uploadedFile = null;
                            themeInfo.uploadedThumb = null;
                            getConnectionsManager().sendRequest(req, new RequestDelegate(themeInfo) {
                                private final /* synthetic */ Theme.ThemeInfo f$1;

                                {
                                    this.f$1 = r2;
                                }

                                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                    MessagesController.this.lambda$didReceivedNotification$16$MessagesController(this.f$1, tLObject, tL_error);
                                }
                            });
                        }
                        this.uploadingThemes.remove(location);
                        return;
                    }
                    return;
                }
                TLRPC.TL_account_uploadWallPaper req2 = new TLRPC.TL_account_uploadWallPaper();
                req2.file = file;
                req2.mime_type = "image/jpeg";
                TLRPC.TL_wallPaperSettings settings = new TLRPC.TL_wallPaperSettings();
                settings.blur = this.uploadingWallpaperBlurred;
                settings.motion = this.uploadingWallpaperMotion;
                req2.settings = settings;
                getConnectionsManager().sendRequest(req2, new RequestDelegate(settings) {
                    private final /* synthetic */ TLRPC.TL_wallPaperSettings f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$didReceivedNotification$10$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
                return;
            }
            TLRPC.TL_photos_uploadProfilePhoto req3 = new TLRPC.TL_photos_uploadProfilePhoto();
            req3.file = file;
            getConnectionsManager().sendRequest(req3, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$didReceivedNotification$8$MessagesController(tLObject, tL_error);
                }
            });
        } else if (id == NotificationCenter.FileDidFailUpload) {
            String location2 = args[0];
            String str3 = this.uploadingAvatar;
            if (str3 == null || !str3.equals(location2)) {
                String str4 = this.uploadingWallpaper;
                if (str4 == null || !str4.equals(location2)) {
                    Theme.ThemeInfo themeInfo2 = this.uploadingThemes.remove(location2);
                    if (themeInfo2 != null) {
                        themeInfo2.uploadedFile = null;
                        themeInfo2.uploadedThumb = null;
                        return;
                    }
                    return;
                }
                this.uploadingWallpaper = null;
                return;
            }
            this.uploadingAvatar = null;
        } else if (id == NotificationCenter.messageReceivedByServer) {
            if (!args[6].booleanValue()) {
                Integer msgId = args[0];
                Integer newMsgId = args[1];
                Long did = args[3];
                MessageObject obj = this.dialogMessage.get(did.longValue());
                if (obj != null && (obj.getId() == msgId.intValue() || obj.messageOwner.local_id == msgId.intValue())) {
                    obj.messageOwner.id = newMsgId.intValue();
                    obj.messageOwner.send_state = 0;
                }
                TLRPC.Dialog dialog = this.dialogs_dict.get(did.longValue());
                if (dialog != null && dialog.top_message == msgId.intValue()) {
                    dialog.top_message = newMsgId.intValue();
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                MessageObject obj2 = this.dialogMessagesByIds.get(msgId.intValue());
                this.dialogMessagesByIds.remove(msgId.intValue());
                if (obj2 != null) {
                    this.dialogMessagesByIds.put(newMsgId.intValue(), obj2);
                }
                int lowerId = (int) did.longValue();
                if (lowerId < 0) {
                    TLRPC.ChatFull chatFull = this.fullChats.get(-lowerId);
                    TLRPC.Chat chat = getChat(Integer.valueOf(-lowerId));
                    if (chat != null && !ChatObject.hasAdminRights(chat) && chatFull != null && chatFull.slowmode_seconds != 0) {
                        chatFull.slowmode_next_send_date = ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() + chatFull.slowmode_seconds;
                        chatFull.flags |= 262144;
                        getMessagesStorage().updateChatInfo(chatFull, false);
                    }
                }
            }
        } else if (id == NotificationCenter.updateMessageMedia) {
            TLRPC.Message message = args[0];
            MessageObject existMessageObject = this.dialogMessagesByIds.get(message.id);
            if (existMessageObject != null) {
                existMessageObject.messageOwner.media = message.media;
                if (message.media.ttl_seconds == 0) {
                    return;
                }
                if ((message.media.photo instanceof TLRPC.TL_photoEmpty) || (message.media.document instanceof TLRPC.TL_documentEmpty)) {
                    existMessageObject.setType();
                    getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
                }
            }
        }
    }

    public /* synthetic */ void lambda$didReceivedNotification$8$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.User user = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, true);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user != null) {
                TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo) response;
                ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
                TLRPC.PhotoSize smallSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 100);
                TLRPC.PhotoSize bigSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 1000);
                user.photo = new TLRPC.TL_userProfilePhoto();
                user.photo.photo_id = photo.photo.id;
                if (smallSize != null) {
                    user.photo.photo_small = smallSize.location;
                }
                if (bigSize != null) {
                    user.photo.photo_big = bigSize.location;
                } else if (smallSize != null) {
                    user.photo.photo_small = smallSize.location;
                }
                getMessagesStorage().clearUserPhotos(user.id);
                ArrayList<TLRPC.User> users2 = new ArrayList<>();
                users2.add(user);
                getMessagesStorage().putUsersAndChats(users2, (ArrayList<TLRPC.Chat>) null, false, true);
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$7$MessagesController();
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$null$7$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 2);
        getUserConfig().saveConfig(true);
    }

    public /* synthetic */ void lambda$didReceivedNotification$10$MessagesController(TLRPC.TL_wallPaperSettings settings, TLObject response, TLRPC.TL_error error) {
        TLRPC.TL_wallPaper wallPaper = (TLRPC.TL_wallPaper) response;
        File path = new File(ApplicationLoader.getFilesDirFixed(), this.uploadingWallpaperBlurred ? "wallpaper_original.jpg" : "wallpaper.jpg");
        if (wallPaper != null) {
            try {
                AndroidUtilities.copyFile(path, FileLoader.getPathToAttach(wallPaper.document, true));
            } catch (Exception e) {
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable(wallPaper, settings, path) {
            private final /* synthetic */ TLRPC.TL_wallPaper f$1;
            private final /* synthetic */ TLRPC.TL_wallPaperSettings f$2;
            private final /* synthetic */ File f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$9$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$9$MessagesController(TLRPC.TL_wallPaper wallPaper, TLRPC.TL_wallPaperSettings settings, File path) {
        if (this.uploadingWallpaper != null && wallPaper != null) {
            wallPaper.settings = settings;
            wallPaper.flags |= 4;
            SharedPreferences.Editor editor = getGlobalMainSettings().edit();
            editor.putLong("selectedBackground2", wallPaper.id);
            editor.putString("selectedBackgroundSlug", wallPaper.slug);
            editor.commit();
            ArrayList<TLRPC.WallPaper> wallpapers = new ArrayList<>();
            wallpapers.add(wallPaper);
            getMessagesStorage().putWallpapers(wallpapers, 2);
            TLRPC.PhotoSize image = FileLoader.getClosestPhotoSizeWithSize(wallPaper.document.thumbs, 320);
            if (image != null) {
                ImageLoader.getInstance().replaceImageInCache(Utilities.MD5(path.getAbsolutePath()) + "@100_100", image.location.volume_id + "_" + image.location.local_id + "@100_100", ImageLocation.getForDocument(image, wallPaper.document), false);
            }
            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersNeedReload, Long.valueOf(wallPaper.id));
        }
    }

    public /* synthetic */ void lambda$didReceivedNotification$16$MessagesController(Theme.ThemeInfo themeInfo, TLObject response, TLRPC.TL_error error) {
        int index = themeInfo.name.lastIndexOf(".attheme");
        String n = themeInfo.name;
        if (index > 0) {
            n = n.substring(0, index);
        }
        if (response != null) {
            TLRPC.Document document = (TLRPC.Document) response;
            TLRPC.TL_inputDocument inputDocument = new TLRPC.TL_inputDocument();
            inputDocument.access_hash = document.access_hash;
            inputDocument.id = document.id;
            inputDocument.file_reference = document.file_reference;
            if (themeInfo.info == null || !themeInfo.info.creator) {
                TLRPC.TL_account_createTheme req2 = new TLRPC.TL_account_createTheme();
                req2.document = inputDocument;
                req2.slug = (themeInfo.info == null || TextUtils.isEmpty(themeInfo.info.slug)) ? "" : themeInfo.info.slug;
                req2.title = n;
                getConnectionsManager().sendRequest(req2, new RequestDelegate(themeInfo) {
                    private final /* synthetic */ Theme.ThemeInfo f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$null$12$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
                return;
            }
            TLRPC.TL_account_updateTheme req22 = new TLRPC.TL_account_updateTheme();
            TLRPC.TL_inputTheme inputTheme = new TLRPC.TL_inputTheme();
            inputTheme.id = themeInfo.info.id;
            inputTheme.access_hash = themeInfo.info.access_hash;
            req22.theme = inputTheme;
            req22.slug = themeInfo.info.slug;
            req22.flags |= 1;
            req22.title = n;
            req22.flags |= 2;
            req22.document = inputDocument;
            req22.flags |= 4;
            req22.format = "android";
            getConnectionsManager().sendRequest(req22, new RequestDelegate(themeInfo) {
                private final /* synthetic */ Theme.ThemeInfo f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$null$14$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(themeInfo) {
            private final /* synthetic */ Theme.ThemeInfo f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$15$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$12$MessagesController(Theme.ThemeInfo themeInfo, TLObject response1, TLRPC.TL_error error1) {
        AndroidUtilities.runOnUIThread(new Runnable(response1, themeInfo) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ Theme.ThemeInfo f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$11$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$11$MessagesController(TLObject response1, Theme.ThemeInfo themeInfo) {
        if (response1 instanceof TLRPC.TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, (TLRPC.TL_theme) response1, false);
            installTheme(themeInfo, themeInfo == Theme.getCurrentNightTheme());
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo);
    }

    public /* synthetic */ void lambda$null$14$MessagesController(Theme.ThemeInfo themeInfo, TLObject response1, TLRPC.TL_error error1) {
        AndroidUtilities.runOnUIThread(new Runnable(response1, themeInfo) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ Theme.ThemeInfo f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$13$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$13$MessagesController(TLObject response1, Theme.ThemeInfo themeInfo) {
        if (response1 instanceof TLRPC.TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, (TLRPC.TL_theme) response1, false);
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo);
    }

    public /* synthetic */ void lambda$null$15$MessagesController(Theme.ThemeInfo themeInfo) {
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo);
    }

    public void cleanup() {
        getContactsController().cleanup();
        MediaController.getInstance().cleanup();
        getNotificationsController().cleanup();
        getSendMessagesHelper().cleanup();
        getSecretChatHelper().cleanup();
        getLocationController().cleanup();
        getMediaDataController().cleanup();
        DialogsActivity.dialogsLoaded[this.currentAccount] = false;
        this.notificationsPreferences.edit().clear().commit();
        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0).putLong("lastStickersLoadTime", 0).putLong("lastStickersLoadTimeMask", 0).putLong("lastStickersLoadTimeFavs", 0).commit();
        this.mainPreferences.edit().remove("archivehint").remove("archivehint_l").remove("gifhint").remove("soundHint").remove("dcDomainName2").remove("webFileDatacenterId").remove("last_contacts_get_diff").remove("contacts_apply_id").remove("contacts_apply_hash").remove("contacts_apply_count").commit();
        this.lastScheduledServerQueryTime.clear();
        this.reloadingWebpages.clear();
        this.reloadingWebpagesPending.clear();
        this.reloadingScheduledWebpages.clear();
        this.reloadingScheduledWebpagesPending.clear();
        this.dialogs_dict.clear();
        this.dialogs_read_inbox_max.clear();
        this.loadingPinnedDialogs.clear();
        this.dialogs_read_outbox_max.clear();
        this.exportedChats.clear();
        this.fullUsers.clear();
        this.fullChats.clear();
        this.dialogsByFolder.clear();
        this.unreadUnmutedDialogs = 0;
        this.joiningToChannels.clear();
        this.migratedChats.clear();
        this.channelViewsToSend.clear();
        this.pollsToCheck.clear();
        this.pollsToCheckSize = 0;
        this.dialogsServerOnly.clear();
        this.dialogsForward.clear();
        this.allDialogs.clear();
        this.dialogsCanAddUsers.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUnreadOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogMessagesByIds.clear();
        this.dialogMessagesByRandomIds.clear();
        this.channelAdmins.clear();
        this.loadingChannelAdmins.clear();
        this.users.clear();
        this.objectsByUsernames.clear();
        this.chats.clear();
        this.dialogMessage.clear();
        this.deletedHistory.clear();
        this.printingUsers.clear();
        this.printingStrings.clear();
        this.printingStringsTypes.clear();
        this.onlinePrivacy.clear();
        this.loadingPeerSettings.clear();
        this.deletingDialogs.clear();
        this.clearingHistoryDialogs.clear();
        this.lastPrintingStringCount = 0;
        Utilities.stageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$cleanup$17$MessagesController();
            }
        });
        this.createdDialogMainThreadIds.clear();
        this.visibleDialogMainThreadIds.clear();
        this.visibleScheduledDialogMainThreadIds.clear();
        this.blockedUsers.clear();
        this.sendingTypings.clear();
        this.loadingFullUsers.clear();
        this.loadedFullUsers.clear();
        this.reloadingMessages.clear();
        this.loadingFullChats.clear();
        this.loadingFullParticipants.clear();
        this.loadedFullParticipants.clear();
        this.loadedFullChats.clear();
        this.dialogsLoaded = false;
        this.nextDialogsCacheOffset.clear();
        this.loadingDialogs.clear();
        this.dialogsEndReached.clear();
        this.serverDialogsEndReached.clear();
        this.loadingAppConfig = false;
        this.checkingTosUpdate = false;
        this.nextTosCheckTime = 0;
        this.nextProxyInfoCheckTime = 0;
        this.checkingProxyInfo = false;
        this.loadingUnreadDialogs = false;
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskChannelId = 0;
        this.gettingNewDeleteTask = false;
        this.loadingBlockedUsers = false;
        this.totalBlockedCount = -1;
        this.blockedEndReached = false;
        this.firstGettingTask = false;
        this.updatingState = false;
        this.resetingDialogs = false;
        this.lastStatusUpdateTime = 0;
        this.offlineSent = false;
        this.registeringForPush = false;
        this.getDifferenceFirstSync = true;
        this.uploadingAvatar = null;
        this.uploadingWallpaper = null;
        this.uploadingThemes.clear();
        this.statusRequest = 0;
        this.statusSettingState = 0;
        Utilities.stageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$cleanup$18$MessagesController();
            }
        });
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        addSupportUser();
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        AppPreferenceUtil.putString("PublishFcBean", "");
        FcDBHelper.getInstance().deleteAll(HomeFcListBean.class);
        FcDBHelper.getInstance().deleteAll(RecommendFcListBean.class);
        FcDBHelper.getInstance().deleteAll(FollowedFcListBean.class);
    }

    public /* synthetic */ void lambda$cleanup$17$MessagesController() {
        this.readTasks.clear();
        this.readTasksMap.clear();
        this.updatesQueueSeq.clear();
        this.updatesQueuePts.clear();
        this.updatesQueueQts.clear();
        this.gettingUnknownChannels.clear();
        this.gettingUnknownDialogs.clear();
        this.updatesStartWaitTimeSeq = 0;
        this.updatesStartWaitTimePts = 0;
        this.updatesStartWaitTimeQts = 0;
        this.createdDialogIds.clear();
        this.createdScheduledDialogIds.clear();
        this.gettingDifference = false;
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    public /* synthetic */ void lambda$cleanup$18$MessagesController() {
        getConnectionsManager().setIsUpdating(false);
        this.updatesQueueChannels.clear();
        this.updatesStartWaitTimeChannels.clear();
        this.gettingDifferenceChannels.clear();
        this.channelsPts.clear();
        this.shortPollChannels.clear();
        this.needShortPollChannels.clear();
        this.shortPollOnlines.clear();
        this.needShortPollOnlines.clear();
    }

    public TLRPC.User getUser(Integer id) {
        return this.users.get(id);
    }

    public TLObject getUserOrChat(String username) {
        if (username == null || username.length() == 0) {
            return null;
        }
        return this.objectsByUsernames.get(username.toLowerCase());
    }

    public ConcurrentHashMap<Integer, TLRPC.User> getUsers() {
        return this.users;
    }

    public ConcurrentHashMap<Integer, TLRPC.Chat> getChats() {
        return this.chats;
    }

    public TLRPC.Chat getChat(Integer id) {
        return this.chats.get(id);
    }

    public TLRPC.EncryptedChat getEncryptedChat(Integer id) {
        return this.encryptedChats.get(id);
    }

    public TLRPC.EncryptedChat getEncryptedChatDB(int chat_id, boolean created) {
        TLRPC.EncryptedChat chat = this.encryptedChats.get(Integer.valueOf(chat_id));
        if (chat != null) {
            if (!created) {
                return chat;
            }
            if (!(chat instanceof TLRPC.TL_encryptedChatWaiting) && !(chat instanceof TLRPC.TL_encryptedChatRequested)) {
                return chat;
            }
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ArrayList<TLObject> result = new ArrayList<>();
        getMessagesStorage().getEncryptedChat(chat_id, countDownLatch, result);
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (result.size() != 2) {
            return chat;
        }
        TLRPC.EncryptedChat chat2 = (TLRPC.EncryptedChat) result.get(0);
        putEncryptedChat(chat2, false);
        putUser((TLRPC.User) result.get(1), true);
        return chat2;
    }

    public boolean isDialogVisible(long dialog_id, boolean scheduled) {
        return (scheduled ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds).contains(Long.valueOf(dialog_id));
    }

    public void setLastVisibleDialogId(long dialog_id, boolean scheduled, boolean set) {
        ArrayList<Long> arrayList = scheduled ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds;
        if (!set) {
            arrayList.remove(Long.valueOf(dialog_id));
        } else if (!arrayList.contains(Long.valueOf(dialog_id))) {
            arrayList.add(Long.valueOf(dialog_id));
        }
    }

    public void setLastCreatedDialogId(long dialogId, boolean scheduled, boolean set) {
        if (!scheduled) {
            ArrayList<Long> arrayList = this.createdDialogMainThreadIds;
            if (!set) {
                arrayList.remove(Long.valueOf(dialogId));
                SparseArray<MessageObject> array = this.pollsToCheck.get(dialogId);
                if (array != null) {
                    int N = array.size();
                    for (int a = 0; a < N; a++) {
                        array.valueAt(a).pollVisibleOnScreen = false;
                    }
                }
            } else if (!arrayList.contains(Long.valueOf(dialogId))) {
                arrayList.add(Long.valueOf(dialogId));
            } else {
                return;
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable(scheduled, set, dialogId) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ boolean f$2;
            private final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$setLastCreatedDialogId$19$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$setLastCreatedDialogId$19$MessagesController(boolean scheduled, boolean set, long dialogId) {
        ArrayList<Long> arrayList2 = scheduled ? this.createdScheduledDialogIds : this.createdDialogIds;
        if (!set) {
            arrayList2.remove(Long.valueOf(dialogId));
        } else if (!arrayList2.contains(Long.valueOf(dialogId))) {
            arrayList2.add(Long.valueOf(dialogId));
        }
    }

    public TLRPC.ExportedChatInvite getExportedInvite(int chat_id) {
        return this.exportedChats.get(chat_id);
    }

    public boolean putUser(TLRPC.User user, boolean fromCache) {
        if (user == null) {
            return false;
        }
        boolean fromCache2 = (!fromCache || user.id / 1000 == 333 || user.id == 777000) ? false : true;
        TLRPC.User oldUser = this.users.get(Integer.valueOf(user.id));
        if (oldUser == user) {
            return false;
        }
        if (oldUser != null && !TextUtils.isEmpty(oldUser.username)) {
            this.objectsByUsernames.remove(oldUser.username.toLowerCase());
        }
        if (!TextUtils.isEmpty(user.username)) {
            this.objectsByUsernames.put(user.username.toLowerCase(), user);
        }
        if (user.min) {
            if (oldUser == null) {
                this.users.put(Integer.valueOf(user.id), user);
            } else if (!fromCache2) {
                if (user.bot) {
                    if (user.username != null) {
                        oldUser.username = user.username;
                        oldUser.flags |= 8;
                    } else {
                        oldUser.flags &= -9;
                        oldUser.username = null;
                    }
                }
                if (user.photo != null) {
                    oldUser.photo = user.photo;
                    oldUser.flags |= 32;
                } else {
                    oldUser.flags &= -33;
                    oldUser.photo = null;
                }
            }
        } else if (!fromCache2) {
            this.users.put(Integer.valueOf(user.id), user);
            if (user.id == getUserConfig().getClientUserId()) {
                getUserConfig().setCurrentUser(user);
                getUserConfig().saveConfig(true);
            }
            if (oldUser == null || user.status == null || oldUser.status == null || user.status.expires == oldUser.status.expires) {
                return false;
            }
            return true;
        } else if (oldUser == null) {
            this.users.put(Integer.valueOf(user.id), user);
        } else if (oldUser.min) {
            user.min = false;
            if (oldUser.bot) {
                if (oldUser.username != null) {
                    user.username = oldUser.username;
                    user.flags |= 8;
                } else {
                    user.flags &= -9;
                    user.username = null;
                }
            }
            if (oldUser.photo != null) {
                user.photo = oldUser.photo;
                user.flags |= 32;
            } else {
                user.flags &= -33;
                user.photo = null;
            }
            this.users.put(Integer.valueOf(user.id), user);
        }
        return false;
    }

    public void putUsers(ArrayList<TLRPC.User> users2, boolean fromCache) {
        if (users2 != null && !users2.isEmpty()) {
            boolean updateStatus = false;
            int count = users2.size();
            for (int a = 0; a < count; a++) {
                if (putUser(users2.get(a), fromCache)) {
                    updateStatus = true;
                }
            }
            if (updateStatus) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$putUsers$20$MessagesController();
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$putUsers$20$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    public void putChat(TLRPC.Chat chat, boolean fromCache) {
        TLRPC.Chat oldChat;
        if (chat != null && (oldChat = this.chats.get(Integer.valueOf(chat.id))) != chat) {
            if (oldChat != null && !TextUtils.isEmpty(oldChat.username)) {
                this.objectsByUsernames.remove(oldChat.username.toLowerCase());
            }
            if (!TextUtils.isEmpty(chat.username)) {
                this.objectsByUsernames.put(chat.username.toLowerCase(), chat);
            }
            if (!chat.min) {
                int newFlags2 = 0;
                if (!fromCache) {
                    if (oldChat != null) {
                        if (chat.version != oldChat.version) {
                            this.loadedFullChats.remove(Integer.valueOf(chat.id));
                        }
                        if (oldChat.participants_count != 0 && chat.participants_count == 0) {
                            chat.participants_count = oldChat.participants_count;
                            chat.flags = 131072 | chat.flags;
                        }
                        int oldFlags = oldChat.banned_rights != null ? oldChat.banned_rights.flags : 0;
                        int newFlags = chat.banned_rights != null ? chat.banned_rights.flags : 0;
                        int oldFlags2 = oldChat.default_banned_rights != null ? oldChat.default_banned_rights.flags : 0;
                        if (chat.default_banned_rights != null) {
                            newFlags2 = chat.default_banned_rights.flags;
                        }
                        oldChat.default_banned_rights = chat.default_banned_rights;
                        if (oldChat.default_banned_rights == null) {
                            oldChat.flags &= -262145;
                        } else {
                            oldChat.flags = 262144 | oldChat.flags;
                        }
                        oldChat.banned_rights = chat.banned_rights;
                        if (oldChat.banned_rights == null) {
                            oldChat.flags &= -32769;
                        } else {
                            oldChat.flags = 32768 | oldChat.flags;
                        }
                        oldChat.admin_rights = chat.admin_rights;
                        if (oldChat.admin_rights == null) {
                            oldChat.flags &= -16385;
                        } else {
                            oldChat.flags |= 16384;
                        }
                        if (!(oldFlags == newFlags && oldFlags2 == newFlags2)) {
                            AndroidUtilities.runOnUIThread(new Runnable(chat) {
                                private final /* synthetic */ TLRPC.Chat f$1;

                                {
                                    this.f$1 = r2;
                                }

                                public final void run() {
                                    MessagesController.this.lambda$putChat$21$MessagesController(this.f$1);
                                }
                            });
                        }
                    }
                    this.chats.put(Integer.valueOf(chat.id), chat);
                } else if (oldChat == null) {
                    this.chats.put(Integer.valueOf(chat.id), chat);
                } else if (oldChat.min) {
                    chat.min = false;
                    chat.title = oldChat.title;
                    chat.photo = oldChat.photo;
                    chat.broadcast = oldChat.broadcast;
                    chat.verified = oldChat.verified;
                    chat.megagroup = oldChat.megagroup;
                    if (oldChat.default_banned_rights != null) {
                        chat.default_banned_rights = oldChat.default_banned_rights;
                        chat.flags = 262144 | chat.flags;
                    }
                    if (oldChat.admin_rights != null) {
                        chat.admin_rights = oldChat.admin_rights;
                        chat.flags |= 16384;
                    }
                    if (oldChat.banned_rights != null) {
                        chat.banned_rights = oldChat.banned_rights;
                        chat.flags = 32768 | chat.flags;
                    }
                    if (oldChat.username != null) {
                        chat.username = oldChat.username;
                        chat.flags |= 64;
                    } else {
                        chat.flags &= -65;
                        chat.username = null;
                    }
                    if (oldChat.participants_count != 0 && chat.participants_count == 0) {
                        chat.participants_count = oldChat.participants_count;
                        chat.flags = 131072 | chat.flags;
                    }
                    this.chats.put(Integer.valueOf(chat.id), chat);
                }
            } else if (oldChat == null) {
                this.chats.put(Integer.valueOf(chat.id), chat);
            } else if (!fromCache) {
                oldChat.title = chat.title;
                oldChat.photo = chat.photo;
                oldChat.broadcast = chat.broadcast;
                oldChat.verified = chat.verified;
                oldChat.megagroup = chat.megagroup;
                if (chat.default_banned_rights != null) {
                    oldChat.default_banned_rights = chat.default_banned_rights;
                    oldChat.flags |= 262144;
                }
                if (chat.admin_rights != null) {
                    oldChat.admin_rights = chat.admin_rights;
                    oldChat.flags |= 16384;
                }
                if (chat.banned_rights != null) {
                    oldChat.banned_rights = chat.banned_rights;
                    oldChat.flags |= 32768;
                }
                if (chat.username != null) {
                    oldChat.username = chat.username;
                    oldChat.flags |= 64;
                } else {
                    oldChat.flags &= -65;
                    oldChat.username = null;
                }
                if (chat.participants_count != 0) {
                    oldChat.participants_count = chat.participants_count;
                }
            }
        }
    }

    public /* synthetic */ void lambda$putChat$21$MessagesController(TLRPC.Chat chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, chat);
    }

    public void putChats(ArrayList<TLRPC.Chat> chats2, boolean fromCache) {
        if (chats2 != null && !chats2.isEmpty()) {
            int count = chats2.size();
            for (int a = 0; a < count; a++) {
                putChat(chats2.get(a), fromCache);
            }
        }
    }

    public void setReferer(String referer) {
        if (referer != null) {
            this.installReferer = referer;
            this.mainPreferences.edit().putString("installReferer", referer).commit();
        }
    }

    public void putEncryptedChat(TLRPC.EncryptedChat encryptedChat, boolean fromCache) {
        if (encryptedChat != null) {
            if (fromCache) {
                this.encryptedChats.putIfAbsent(Integer.valueOf(encryptedChat.id), encryptedChat);
            } else {
                this.encryptedChats.put(Integer.valueOf(encryptedChat.id), encryptedChat);
            }
        }
    }

    public void putEncryptedChats(ArrayList<TLRPC.EncryptedChat> encryptedChats2, boolean fromCache) {
        if (encryptedChats2 != null && !encryptedChats2.isEmpty()) {
            int count = encryptedChats2.size();
            for (int a = 0; a < count; a++) {
                putEncryptedChat(encryptedChats2.get(a), fromCache);
            }
        }
    }

    public TLRPC.UserFull getUserFull(int uid) {
        return this.fullUsers.get(uid);
    }

    public TLRPC.ChatFull getChatFull(int chatId) {
        return this.fullChats.get(chatId);
    }

    public void cancelLoadFullUser(int uid) {
        this.loadingFullUsers.remove(Integer.valueOf(uid));
    }

    public void cancelLoadFullChat(int cid) {
        this.loadingFullChats.remove(Integer.valueOf(cid));
    }

    /* access modifiers changed from: protected */
    public void clearFullUsers() {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
    }

    private void reloadDialogsReadValue(ArrayList<TLRPC.Dialog> dialogs, long did) {
        if (did != 0 || (dialogs != null && !dialogs.isEmpty())) {
            TLRPC.TL_messages_getPeerDialogs req = new TLRPC.TL_messages_getPeerDialogs();
            if (dialogs != null) {
                for (int a = 0; a < dialogs.size(); a++) {
                    TLRPC.InputPeer inputPeer = getInputPeer((int) dialogs.get(a).id);
                    if (!(inputPeer instanceof TLRPC.TL_inputPeerChannel) || inputPeer.access_hash != 0) {
                        TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                        inputDialogPeer.peer = inputPeer;
                        req.peers.add(inputDialogPeer);
                    }
                }
            } else {
                TLRPC.InputPeer inputPeer2 = getInputPeer((int) did);
                if (!(inputPeer2 instanceof TLRPC.TL_inputPeerChannel) || inputPeer2.access_hash != 0) {
                    TLRPC.TL_inputDialogPeer inputDialogPeer2 = new TLRPC.TL_inputDialogPeer();
                    inputDialogPeer2.peer = inputPeer2;
                    req.peers.add(inputDialogPeer2);
                } else {
                    return;
                }
            }
            if (!req.peers.isEmpty()) {
                getConnectionsManager().sendRequest(req, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$reloadDialogsReadValue$22$MessagesController(tLObject, tL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$reloadDialogsReadValue$22$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            ArrayList<TLRPC.Update> arrayList = new ArrayList<>();
            for (int a = 0; a < res.dialogs.size(); a++) {
                TLRPC.Dialog dialog = res.dialogs.get(a);
                if (dialog.read_inbox_max_id == 0) {
                    dialog.read_inbox_max_id = 1;
                }
                if (dialog.read_outbox_max_id == 0) {
                    dialog.read_outbox_max_id = 1;
                }
                DialogObject.initDialog(dialog);
                Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                if (value == null) {
                    value = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(dialog.read_inbox_max_id, value.intValue())));
                if (value.intValue() == 0) {
                    if (dialog.peer.channel_id != 0) {
                        TLRPC.TL_updateReadChannelInbox update = new TLRPC.TL_updateReadChannelInbox();
                        update.channel_id = dialog.peer.channel_id;
                        update.max_id = dialog.read_inbox_max_id;
                        arrayList.add(update);
                    } else {
                        TLRPC.TL_updateReadHistoryInbox update2 = new TLRPC.TL_updateReadHistoryInbox();
                        update2.peer = dialog.peer;
                        update2.max_id = dialog.read_inbox_max_id;
                        arrayList.add(update2);
                    }
                }
                Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                if (value2 == null) {
                    value2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(dialog.read_outbox_max_id, value2.intValue())));
                if (value2.intValue() == 0) {
                    if (dialog.peer.channel_id != 0) {
                        TLRPC.TL_updateReadChannelOutbox update3 = new TLRPC.TL_updateReadChannelOutbox();
                        update3.channel_id = dialog.peer.channel_id;
                        update3.max_id = dialog.read_outbox_max_id;
                        arrayList.add(update3);
                    } else {
                        TLRPC.TL_updateReadHistoryOutbox update4 = new TLRPC.TL_updateReadHistoryOutbox();
                        update4.peer = dialog.peer;
                        update4.max_id = dialog.read_outbox_max_id;
                        arrayList.add(update4);
                    }
                }
            }
            if (arrayList.isEmpty() == 0) {
                processUpdateArray(arrayList, (ArrayList<TLRPC.User>) null, (ArrayList<TLRPC.Chat>) null, false, 0);
            }
        }
    }

    public String getAdminRank(int chatId, int uid) {
        SparseArray<String> array = this.channelAdmins.get(chatId);
        if (array == null) {
            return null;
        }
        return array.get(uid);
    }

    public boolean isChannelAdminsLoaded(int chatId) {
        return this.channelAdmins.get(chatId) != null;
    }

    public void loadChannelAdmins(int chatId, boolean cache) {
        if (SystemClock.uptimeMillis() - ((long) this.loadingChannelAdmins.get(chatId)) >= 60) {
            this.loadingChannelAdmins.put(chatId, (int) (SystemClock.uptimeMillis() / 1000));
            if (cache) {
                getMessagesStorage().loadChannelAdmins(chatId);
                return;
            }
            TLRPC.TL_channels_getParticipants req = new TLRPC.TL_channels_getParticipants();
            req.channel = getInputChannel(chatId);
            req.limit = 100;
            req.filter = new TLRPC.TL_channelParticipantsAdmins();
            getConnectionsManager().sendRequest(req, new RequestDelegate(chatId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadChannelAdmins$23$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadChannelAdmins$23$MessagesController(int chatId, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_channels_channelParticipants) {
            processLoadedAdminsResponse(chatId, (TLRPC.TL_channels_channelParticipants) response);
        }
    }

    public void processLoadedAdminsResponse(int chatId, TLRPC.TL_channels_channelParticipants participants) {
        SparseArray<String> array1 = new SparseArray<>(participants.participants.size());
        for (int a = 0; a < participants.participants.size(); a++) {
            TLRPC.ChannelParticipant participant = (TLRPC.ChannelParticipant) participants.participants.get(a);
            array1.put(participant.user_id, participant.rank != null ? participant.rank : "");
        }
        processLoadedChannelAdmins(array1, chatId, false);
    }

    public void processLoadedChannelAdmins(SparseArray<String> array, int chatId, boolean cache) {
        if (!cache) {
            getMessagesStorage().putChannelAdmins(chatId, array);
        }
        AndroidUtilities.runOnUIThread(new Runnable(chatId, array, cache) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ SparseArray f$2;
            private final /* synthetic */ boolean f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedChannelAdmins$24$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedChannelAdmins$24$MessagesController(int chatId, SparseArray array, boolean cache) {
        this.channelAdmins.put(chatId, array);
        if (cache) {
            this.loadingChannelAdmins.delete(chatId);
            loadChannelAdmins(chatId, false);
        }
    }

    public void loadUsers(int[] userIds, long[] accessHashs, int classGuid) {
        if (userIds != null && accessHashs != null && userIds.length == accessHashs.length) {
            ArrayList<Integer> emptyResult = new ArrayList<>();
            if (this.users != null) {
                for (int userId : userIds) {
                    TLRPC.User user = this.users.get(Integer.valueOf(userId));
                    if (user != null) {
                        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Integer.valueOf(user.id), user);
                    } else {
                        emptyResult.add(Integer.valueOf(userId));
                    }
                }
                if (emptyResult.size() > 0) {
                    loadUsers(emptyResult, accessHashs, classGuid);
                }
            }
        }
    }

    public void loadUsers(ArrayList<Integer> idList, long[] accessHashs, int classGuid) {
        if (idList != null && accessHashs != null && idList.size() == accessHashs.length) {
            ArrayList<TLRPC.InputUser> list = new ArrayList<>();
            for (int i = 0; i < idList.size(); i++) {
                TLRPC.InputUser user = new TLRPC.TL_inputUser();
                user.user_id = idList.get(i).intValue();
                user.access_hash = accessHashs[i];
                list.add(user);
            }
            loadUsers(list, classGuid);
        }
    }

    public void loadUsers(ArrayList<TLRPC.InputUser> users2, int classGuid) {
        if (users2 != null) {
            TLRPC.TL_users_getUsers req = new TLRPC.TL_users_getUsers();
            req.id.addAll(users2);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(req, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadUsers$26$MessagesController(tLObject, tL_error);
                }
            }), classGuid);
        }
    }

    public /* synthetic */ void lambda$loadUsers$26$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.Vector) {
            TLRPC.Vector vector = (TLRPC.Vector) response;
            if (!vector.objects.isEmpty()) {
                for (int i = 0; i < vector.objects.size(); i++) {
                    ArrayList<TLRPC.User> arrayList1 = new ArrayList<>();
                    TLRPC.User user = (TLRPC.User) vector.objects.get(i);
                    arrayList1.add(user);
                    getMessagesStorage().putUsersAndChats(arrayList1, (ArrayList<TLRPC.Chat>) null, false, true);
                    AndroidUtilities.runOnUIThread(new Runnable(user) {
                        private final /* synthetic */ TLRPC.User f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$25$MessagesController(this.f$1);
                        }
                    });
                }
            }
        }
    }

    public /* synthetic */ void lambda$null$25$MessagesController(TLRPC.User user) {
        putUser(user, false);
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Integer.valueOf(user.id), user);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v10, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_getFullChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v7, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void loadFullChat(int r17, int r18, boolean r19) {
        /*
            r16 = this;
            r7 = r16
            r8 = r17
            r9 = r18
            java.util.ArrayList<java.lang.Integer> r0 = r7.loadedFullChats
            java.lang.Integer r1 = java.lang.Integer.valueOf(r17)
            boolean r10 = r0.contains(r1)
            java.util.ArrayList<java.lang.Integer> r0 = r7.loadingFullChats
            java.lang.Integer r1 = java.lang.Integer.valueOf(r17)
            boolean r0 = r0.contains(r1)
            if (r0 != 0) goto L_0x0098
            if (r19 != 0) goto L_0x0022
            if (r10 == 0) goto L_0x0022
            goto L_0x0098
        L_0x0022:
            java.util.ArrayList<java.lang.Integer> r0 = r7.loadingFullChats
            java.lang.Integer r1 = java.lang.Integer.valueOf(r17)
            r0.add(r1)
            int r0 = -r8
            long r11 = (long) r0
            java.lang.Integer r0 = java.lang.Integer.valueOf(r17)
            im.bclpbkiauv.tgnet.TLRPC$Chat r13 = r7.getChat(r0)
            boolean r0 = im.bclpbkiauv.messenger.ChatObject.isChannel(r13)
            if (r0 == 0) goto L_0x0052
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_getFullChannel r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_getFullChannel
            r0.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r1 = getInputChannel((im.bclpbkiauv.tgnet.TLRPC.Chat) r13)
            r0.channel = r1
            r1 = r0
            boolean r2 = r13.megagroup
            if (r2 == 0) goto L_0x0050
            r2 = r10 ^ 1
            r7.loadChannelAdmins(r8, r2)
        L_0x0050:
            r14 = r1
            goto L_0x0077
        L_0x0052:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_getFullChat r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_getFullChat
            r0.<init>()
            r0.chat_id = r8
            r1 = r0
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r7.dialogs_read_inbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r11)
            java.lang.Object r2 = r2.get(r3)
            if (r2 == 0) goto L_0x0072
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r7.dialogs_read_outbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r11)
            java.lang.Object r2 = r2.get(r3)
            if (r2 != 0) goto L_0x0076
        L_0x0072:
            r2 = 0
            r7.reloadDialogsReadValue(r2, r11)
        L_0x0076:
            r14 = r1
        L_0x0077:
            im.bclpbkiauv.tgnet.ConnectionsManager r15 = r16.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$iWrXeJpYd3qRx4hxB73eM4Fk_zE r6 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$iWrXeJpYd3qRx4hxB73eM4Fk_zE
            r0 = r6
            r1 = r16
            r2 = r13
            r3 = r11
            r5 = r17
            r7 = r6
            r6 = r18
            r0.<init>(r2, r3, r5, r6)
            int r0 = r15.sendRequest(r14, r7)
            if (r9 == 0) goto L_0x0097
            im.bclpbkiauv.tgnet.ConnectionsManager r1 = r16.getConnectionsManager()
            r1.bindRequestToGuid(r0, r9)
        L_0x0097:
            return
        L_0x0098:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.loadFullChat(int, int, boolean):void");
    }

    public /* synthetic */ void lambda$loadFullChat$29$MessagesController(TLRPC.Chat chat, long dialog_id, int chat_id, int classGuid, TLObject response, TLRPC.TL_error error) {
        Integer value;
        Integer value2;
        long j = dialog_id;
        int i = chat_id;
        TLRPC.TL_error tL_error = error;
        if (tL_error == null) {
            TLRPC.TL_messages_chatFull res = (TLRPC.TL_messages_chatFull) response;
            getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
            getMessagesStorage().updateChatInfo(res.full_chat, false);
            if (ChatObject.isChannel(chat)) {
                Integer value3 = this.dialogs_read_inbox_max.get(Long.valueOf(dialog_id));
                if (value3 == null) {
                    value = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                } else {
                    value = value3;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(dialog_id), Integer.valueOf(Math.max(res.full_chat.read_inbox_max_id, value.intValue())));
                if (value.intValue() == 0) {
                    ArrayList arrayList = new ArrayList();
                    TLRPC.TL_updateReadChannelInbox update = new TLRPC.TL_updateReadChannelInbox();
                    update.channel_id = i;
                    update.max_id = res.full_chat.read_inbox_max_id;
                    arrayList.add(update);
                    processUpdateArray(arrayList, (ArrayList<TLRPC.User>) null, (ArrayList<TLRPC.Chat>) null, false, 0);
                }
                Integer value4 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog_id));
                if (value4 == null) {
                    value2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                } else {
                    value2 = value4;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(dialog_id), Integer.valueOf(Math.max(res.full_chat.read_outbox_max_id, value2.intValue())));
                if (value2.intValue() == 0) {
                    ArrayList arrayList2 = new ArrayList();
                    TLRPC.TL_updateReadChannelOutbox update2 = new TLRPC.TL_updateReadChannelOutbox();
                    update2.channel_id = i;
                    update2.max_id = res.full_chat.read_outbox_max_id;
                    arrayList2.add(update2);
                    processUpdateArray(arrayList2, (ArrayList<TLRPC.User>) null, (ArrayList<TLRPC.Chat>) null, false, 0);
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable(i, res, classGuid) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ TLRPC.TL_messages_chatFull f$2;
                private final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$27$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        int i2 = classGuid;
        AndroidUtilities.runOnUIThread(new Runnable(tL_error, i) {
            private final /* synthetic */ TLRPC.TL_error f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$28$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$27$MessagesController(int chat_id, TLRPC.TL_messages_chatFull res, int classGuid) {
        this.fullChats.put(chat_id, res.full_chat);
        applyDialogNotificationsSettings((long) (-chat_id), res.full_chat.notify_settings);
        for (int a = 0; a < res.full_chat.bot_info.size(); a++) {
            getMediaDataController().putBotInfo(res.full_chat.bot_info.get(a));
        }
        this.exportedChats.put(chat_id, res.full_chat.exported_invite);
        this.loadingFullChats.remove(Integer.valueOf(chat_id));
        this.loadedFullChats.add(Integer.valueOf(chat_id));
        putUsers(res.users, false);
        putChats(res.chats, false);
        if (res.full_chat.stickerset != null) {
            getMediaDataController().getGroupStickerSetById(res.full_chat.stickerset);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, res.full_chat, Integer.valueOf(classGuid), false, null);
    }

    public /* synthetic */ void lambda$null$28$MessagesController(TLRPC.TL_error error, int chat_id) {
        checkChannelError(error.text, chat_id);
        this.loadingFullChats.remove(Integer.valueOf(chat_id));
    }

    public void loadFullUser(TLRPC.User user, int classGuid, boolean force) {
        loadFullUser(user, 0, classGuid, force);
    }

    public void loadFullUser(int userId, int classGuid, boolean force) {
        loadFullUser((TLRPC.User) null, userId, classGuid, force);
    }

    public void loadFullUser(TLRPC.User user, int userId, int classGuid, boolean force) {
        if (user == null || this.loadingFullUsers.contains(Integer.valueOf(user.id)) || (!force && this.loadedFullUsers.contains(Integer.valueOf(user.id)))) {
            if (userId != 0 && !this.loadingFullUsers.contains(Integer.valueOf(userId))) {
                if (!force && this.loadedFullUsers.contains(Integer.valueOf(userId))) {
                    return;
                }
            } else {
                return;
            }
        }
        int searchId = user != null ? user.id : userId;
        this.loadingFullUsers.add(Integer.valueOf(searchId));
        TLRPCContacts.CL_user_getFulluser req = new TLRPCContacts.CL_user_getFulluser();
        req.inputUser = user != null ? getInputUser(user) : getInputUser(userId);
        long dialog_id = (long) searchId;
        if (this.dialogs_read_inbox_max.get(Long.valueOf(dialog_id)) == null || this.dialogs_read_outbox_max.get(Long.valueOf(dialog_id)) == null) {
            reloadDialogsReadValue((ArrayList<TLRPC.Dialog>) null, dialog_id);
        }
        getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(req, new RequestDelegate(searchId, user, classGuid) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ TLRPC.User f$2;
            private final /* synthetic */ int f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$loadFullUser$32$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tL_error);
            }
        }), classGuid);
    }

    public /* synthetic */ void lambda$loadFullUser$32$MessagesController(int searchId, TLRPC.User user, int classGuid, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.UserFull userFull = (TLRPC.UserFull) response;
            getMessagesStorage().updateUserInfo(userFull, false);
            AndroidUtilities.runOnUIThread(new Runnable(userFull, searchId, user, classGuid) {
                private final /* synthetic */ TLRPC.UserFull f$1;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ TLRPC.User f$3;
                private final /* synthetic */ int f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$30$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(searchId) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$31$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$30$MessagesController(TLRPC.UserFull userFull, int searchId, TLRPC.User user, int classGuid) {
        String names;
        savePeerSettings((long) userFull.user.id, userFull.settings, false);
        applyDialogNotificationsSettings((long) searchId, userFull.notify_settings);
        if (userFull.bot_info instanceof TLRPC.TL_botInfo) {
            getMediaDataController().putBotInfo(userFull.bot_info);
        }
        int index = this.blockedUsers.indexOfKey(searchId);
        if (userFull.blocked) {
            if (index < 0) {
                this.blockedUsers.put(searchId, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (index >= 0) {
            this.blockedUsers.removeAt(index);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.fullUsers.put(searchId, userFull);
        this.loadingFullUsers.remove(Integer.valueOf(searchId));
        this.loadedFullUsers.add(Integer.valueOf(searchId));
        if (user != null) {
            names = user.first_name + user.last_name + user.username;
        } else {
            names = null;
        }
        ArrayList<TLRPC.User> users2 = new ArrayList<>();
        users2.add(userFull.user);
        putUsers(users2, false);
        getMessagesStorage().putUsersAndChats(users2, (ArrayList<TLRPC.Chat>) null, false, true);
        if (names != null) {
            if (!names.equals(userFull.user.first_name + userFull.user.last_name + userFull.user.username)) {
                getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 1);
            }
        }
        if (userFull.bot_info instanceof TLRPC.TL_botInfo) {
            getNotificationCenter().postNotificationName(NotificationCenter.botInfoDidLoad, userFull.bot_info, Integer.valueOf(classGuid));
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userFullInfoDidLoad, Integer.valueOf(searchId), userFull, null);
    }

    public /* synthetic */ void lambda$null$31$MessagesController(int searchId) {
        this.loadingFullUsers.remove(Integer.valueOf(searchId));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v0, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v1, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v10, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v2, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void reloadMessages(java.util.ArrayList<java.lang.Integer> r17, long r18, boolean r20) {
        /*
            r16 = this;
            r7 = r16
            r8 = r18
            boolean r0 = r17.isEmpty()
            if (r0 == 0) goto L_0x000b
            return
        L_0x000b:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r10 = r0
            int r0 = r7.currentAccount
            im.bclpbkiauv.tgnet.TLRPC$Chat r11 = im.bclpbkiauv.messenger.ChatObject.getChatByDialog(r8, r0)
            boolean r0 = im.bclpbkiauv.messenger.ChatObject.isChannel(r11)
            if (r0 == 0) goto L_0x002d
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages
            r0.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r1 = getInputChannel((im.bclpbkiauv.tgnet.TLRPC.Chat) r11)
            r0.channel = r1
            r0.id = r10
            r12 = r0
            goto L_0x0036
        L_0x002d:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages
            r0.<init>()
            r0.id = r10
            r1 = r0
            r12 = r1
        L_0x0036:
            android.util.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r0 = r7.reloadingMessages
            java.lang.Object r0 = r0.get(r8)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            r1 = 0
        L_0x003f:
            int r2 = r17.size()
            if (r1 >= r2) goto L_0x005c
            r13 = r17
            java.lang.Object r2 = r13.get(r1)
            java.lang.Integer r2 = (java.lang.Integer) r2
            if (r0 == 0) goto L_0x0056
            boolean r3 = r0.contains(r2)
            if (r3 == 0) goto L_0x0056
            goto L_0x0059
        L_0x0056:
            r10.add(r2)
        L_0x0059:
            int r1 = r1 + 1
            goto L_0x003f
        L_0x005c:
            r13 = r17
            boolean r1 = r10.isEmpty()
            if (r1 == 0) goto L_0x0065
            return
        L_0x0065:
            if (r0 != 0) goto L_0x0074
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r0 = r1
            android.util.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r1 = r7.reloadingMessages
            r1.put(r8, r0)
            r14 = r0
            goto L_0x0075
        L_0x0074:
            r14 = r0
        L_0x0075:
            r14.addAll(r10)
            im.bclpbkiauv.tgnet.ConnectionsManager r15 = r16.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$JFiNcQAs1nk6M3HHT5szn6ajHNY r6 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$JFiNcQAs1nk6M3HHT5szn6ajHNY
            r0 = r6
            r1 = r16
            r2 = r18
            r4 = r11
            r5 = r20
            r7 = r6
            r6 = r10
            r0.<init>(r2, r4, r5, r6)
            r15.sendRequest(r12, r7)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.reloadMessages(java.util.ArrayList, long, boolean):void");
    }

    public /* synthetic */ void lambda$reloadMessages$34$MessagesController(long dialog_id, TLRPC.Chat chat, boolean scheduled, ArrayList result, TLObject response, TLRPC.TL_error error) {
        Integer inboxValue;
        Integer outboxValue;
        long j = dialog_id;
        TLRPC.Chat chat2 = chat;
        if (error == null) {
            TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
            SparseArray<TLRPC.User> usersLocal = new SparseArray<>();
            for (int a = 0; a < messagesRes.users.size(); a++) {
                TLRPC.User u = messagesRes.users.get(a);
                usersLocal.put(u.id, u);
            }
            SparseArray<TLRPC.Chat> chatsLocal = new SparseArray<>();
            for (int a2 = 0; a2 < messagesRes.chats.size(); a2++) {
                TLRPC.Chat c = messagesRes.chats.get(a2);
                chatsLocal.put(c.id, c);
            }
            Integer inboxValue2 = this.dialogs_read_inbox_max.get(Long.valueOf(dialog_id));
            if (inboxValue2 == null) {
                Integer inboxValue3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                this.dialogs_read_inbox_max.put(Long.valueOf(dialog_id), inboxValue3);
                inboxValue = inboxValue3;
            } else {
                inboxValue = inboxValue2;
            }
            Integer outboxValue2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog_id));
            if (outboxValue2 == null) {
                Integer outboxValue3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                this.dialogs_read_outbox_max.put(Long.valueOf(dialog_id), outboxValue3);
                outboxValue = outboxValue3;
            } else {
                outboxValue = outboxValue2;
            }
            ArrayList<MessageObject> objects = new ArrayList<>();
            int a3 = 0;
            while (a3 < messagesRes.messages.size()) {
                TLRPC.Message message = messagesRes.messages.get(a3);
                if (chat2 != null && chat2.megagroup) {
                    message.flags |= Integer.MIN_VALUE;
                }
                message.dialog_id = j;
                if (!scheduled) {
                    message.unread = (message.out ? outboxValue : inboxValue).intValue() < message.id;
                }
                MessageObject messageObject = r7;
                TLRPC.Message message2 = message;
                MessageObject messageObject2 = new MessageObject(this.currentAccount, message, usersLocal, chatsLocal, true);
                objects.add(messageObject);
                a3++;
            }
            int i = a3;
            ImageLoader.saveMessagesThumbs(messagesRes.messages);
            getMessagesStorage().putMessages(messagesRes, dialog_id, -1, 0, false, scheduled);
            SparseArray<TLRPC.Chat> sparseArray = chatsLocal;
            TLRPC.messages_Messages messages_messages = messagesRes;
            SparseArray<TLRPC.User> sparseArray2 = usersLocal;
            AndroidUtilities.runOnUIThread(new Runnable(dialog_id, result, objects) {
                private final /* synthetic */ long f$1;
                private final /* synthetic */ ArrayList f$2;
                private final /* synthetic */ ArrayList f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r4;
                    this.f$3 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$33$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$33$MessagesController(long dialog_id, ArrayList result, ArrayList objects) {
        ArrayList<Integer> arrayList1 = this.reloadingMessages.get(dialog_id);
        if (arrayList1 != null) {
            arrayList1.removeAll(result);
            if (arrayList1.isEmpty()) {
                this.reloadingMessages.remove(dialog_id);
            }
        }
        MessageObject dialogObj = this.dialogMessage.get(dialog_id);
        if (dialogObj != null) {
            int a = 0;
            while (true) {
                if (a >= objects.size()) {
                    break;
                }
                MessageObject obj = (MessageObject) objects.get(a);
                if (dialogObj == null || dialogObj.getId() != obj.getId()) {
                    a++;
                } else {
                    this.dialogMessage.put(dialog_id, obj);
                    if (obj.messageOwner.to_id.channel_id == 0) {
                        MessageObject obj2 = this.dialogMessagesByIds.get(obj.getId());
                        this.dialogMessagesByIds.remove(obj.getId());
                        if (obj2 != null) {
                            this.dialogMessagesByIds.put(obj2.getId(), obj2);
                        }
                    }
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(dialog_id), objects);
    }

    public void hidePeerSettingsBar(long dialogId, TLRPC.User currentUser, TLRPC.Chat currentChat) {
        if (currentUser != null || currentChat != null) {
            SharedPreferences.Editor editor = this.notificationsPreferences.edit();
            editor.putInt("dialog_bar_vis3" + dialogId, 3);
            editor.commit();
            if (((int) dialogId) != 0) {
                TLRPC.TL_messages_hidePeerSettingsBar req = new TLRPC.TL_messages_hidePeerSettingsBar();
                if (currentUser != null) {
                    req.peer = getInputPeer(currentUser.id);
                } else if (currentChat != null) {
                    req.peer = getInputPeer(-currentChat.id);
                }
                getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$zsZOE4ZV8XWHnb8nrFDqM3zRIDs.INSTANCE);
            }
        }
    }

    static /* synthetic */ void lambda$hidePeerSettingsBar$35(TLObject response, TLRPC.TL_error error) {
    }

    public void reportSpam(long dialogId, TLRPC.User currentUser, TLRPC.Chat currentChat, TLRPC.EncryptedChat currentEncryptedChat, boolean geo) {
        if (currentUser != null || currentChat != null || currentEncryptedChat != null) {
            SharedPreferences.Editor editor = this.notificationsPreferences.edit();
            editor.putInt("dialog_bar_vis3" + dialogId, 3);
            editor.commit();
            if (((int) dialogId) != 0) {
                TLRPC.TL_account_reportPeer req = new TLRPC.TL_account_reportPeer();
                if (currentChat != null) {
                    req.peer = getInputPeer(-currentChat.id);
                } else if (currentUser != null) {
                    req.peer = getInputPeer(currentUser.id);
                }
                if (geo) {
                    req.reason = new TLRPC.TL_inputReportReasonGeoIrrelevant();
                } else {
                    req.reason = new TLRPC.TL_inputReportReasonSpam();
                }
                getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$yliSz8XJ3R3zejgEmMaES1n_OeA.INSTANCE, 2);
            } else if (currentEncryptedChat != null && currentEncryptedChat.access_hash != 0) {
                TLRPC.TL_messages_reportEncryptedSpam req2 = new TLRPC.TL_messages_reportEncryptedSpam();
                req2.peer = new TLRPC.TL_inputEncryptedChat();
                req2.peer.chat_id = currentEncryptedChat.id;
                req2.peer.access_hash = currentEncryptedChat.access_hash;
                getConnectionsManager().sendRequest(req2, $$Lambda$MessagesController$HzqsfJXiHrZ6QukJMb7cBEDF5YQ.INSTANCE, 2);
            }
        }
    }

    static /* synthetic */ void lambda$reportSpam$36(TLObject response, TLRPC.TL_error error) {
    }

    static /* synthetic */ void lambda$reportSpam$37(TLObject response, TLRPC.TL_error error) {
    }

    private void savePeerSettings(long dialogId, TLRPC.TL_peerSettings settings, boolean update) {
        if (settings != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            if (sharedPreferences.getInt("dialog_bar_vis3" + dialogId, 0) != 3) {
                SharedPreferences.Editor editor = this.notificationsPreferences.edit();
                boolean bar_hidden = !settings.report_spam && !settings.add_contact && !settings.block_contact && !settings.share_contact && !settings.report_geo;
                editor.putInt("dialog_bar_vis3" + dialogId, bar_hidden ? 1 : 2);
                editor.putBoolean("dialog_bar_share" + dialogId, settings.share_contact);
                editor.putBoolean("dialog_bar_report" + dialogId, settings.report_spam);
                editor.putBoolean("dialog_bar_add" + dialogId, settings.add_contact);
                editor.putBoolean("dialog_bar_block" + dialogId, settings.block_contact);
                editor.putBoolean("dialog_bar_exception" + dialogId, settings.need_contacts_exception);
                editor.putBoolean("dialog_bar_location" + dialogId, settings.report_geo);
                editor.commit();
                getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, Long.valueOf(dialogId));
            }
        }
    }

    public void loadPeerSettings(TLRPC.User currentUser, TLRPC.Chat currentChat) {
        long dialogId;
        if (currentUser != null || currentChat != null) {
            if (currentUser != null) {
                dialogId = (long) currentUser.id;
            } else {
                dialogId = (long) (-currentChat.id);
            }
            if (this.loadingPeerSettings.indexOfKey(dialogId) < 0) {
                this.loadingPeerSettings.put(dialogId, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("request spam button for " + dialogId);
                }
                SharedPreferences sharedPreferences = this.notificationsPreferences;
                int vis = sharedPreferences.getInt("dialog_bar_vis3" + dialogId, 0);
                if (vis != 1 && vis != 3) {
                    TLRPC.TL_messages_getPeerSettings req = new TLRPC.TL_messages_getPeerSettings();
                    if (currentUser != null) {
                        req.peer = getInputPeer(currentUser.id);
                    } else if (currentChat != null) {
                        req.peer = getInputPeer(-currentChat.id);
                    }
                    getConnectionsManager().sendRequest(req, new RequestDelegate(dialogId) {
                        private final /* synthetic */ long f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$loadPeerSettings$39$MessagesController(this.f$1, tLObject, tL_error);
                        }
                    });
                } else if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("dialog bar already hidden for " + dialogId);
                }
            }
        }
    }

    public /* synthetic */ void lambda$loadPeerSettings$39$MessagesController(long dialogId, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(dialogId, response) {
            private final /* synthetic */ long f$1;
            private final /* synthetic */ TLObject f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$38$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$38$MessagesController(long dialogId, TLObject response) {
        this.loadingPeerSettings.remove(dialogId);
        if (response != null) {
            savePeerSettings(dialogId, (TLRPC.TL_peerSettings) response, false);
        }
    }

    /* access modifiers changed from: protected */
    public void processNewChannelDifferenceParams(int pts, int pts_count, int channelId) {
        int channelPts = this.channelsPts.get(channelId);
        if (channelPts == 0) {
            channelPts = getMessagesStorage().getChannelPtsSync(channelId);
            if (channelPts == 0) {
                channelPts = 1;
            }
            this.channelsPts.put(channelId, channelPts);
        }
        if (channelPts + pts_count == pts) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY CHANNEL PTS");
            }
            this.channelsPts.put(channelId, pts);
            getMessagesStorage().saveChannelPts(channelId, pts);
        } else if (channelPts != pts) {
            long updatesStartWaitTime = this.updatesStartWaitTimeChannels.get(channelId);
            if (this.gettingDifferenceChannels.get(channelId) || updatesStartWaitTime == 0 || Math.abs(System.currentTimeMillis() - updatesStartWaitTime) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD CHANNEL UPDATE TO QUEUE pts = " + pts + " pts_count = " + pts_count);
                }
                if (updatesStartWaitTime == 0) {
                    this.updatesStartWaitTimeChannels.put(channelId, System.currentTimeMillis());
                }
                UserActionUpdatesPts updates = new UserActionUpdatesPts();
                updates.pts = pts;
                updates.pts_count = pts_count;
                updates.chat_id = channelId;
                ArrayList<TLRPC.Updates> arrayList = this.updatesQueueChannels.get(channelId);
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    this.updatesQueueChannels.put(channelId, arrayList);
                }
                arrayList.add(updates);
                return;
            }
            getChannelDifference(channelId);
        }
    }

    /* access modifiers changed from: protected */
    public void processNewDifferenceParams(int seq, int pts, int date, int pts_count) {
        if (pts != -1) {
            if (getMessagesStorage().getLastPtsValue() + pts_count == pts) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY PTS");
                }
                getMessagesStorage().setLastPtsValue(pts);
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastPtsValue() != pts) {
                if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE pts = " + pts + " pts_count = " + pts_count);
                    }
                    if (this.updatesStartWaitTimePts == 0) {
                        this.updatesStartWaitTimePts = System.currentTimeMillis();
                    }
                    UserActionUpdatesPts updates = new UserActionUpdatesPts();
                    updates.pts = pts;
                    updates.pts_count = pts_count;
                    this.updatesQueuePts.add(updates);
                } else {
                    getDifference();
                }
            }
        }
        if (seq == -1) {
            return;
        }
        if (getMessagesStorage().getLastSeqValue() + 1 == seq) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY SEQ");
            }
            getMessagesStorage().setLastSeqValue(seq);
            if (date != -1) {
                getMessagesStorage().setLastDateValue(date);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (getMessagesStorage().getLastSeqValue() == seq) {
        } else {
            if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD UPDATE TO QUEUE seq = " + seq);
                }
                if (this.updatesStartWaitTimeSeq == 0) {
                    this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                }
                UserActionUpdatesSeq updates2 = new UserActionUpdatesSeq();
                updates2.seq = seq;
                this.updatesQueueSeq.add(updates2);
                return;
            }
            getDifference();
        }
    }

    public void didAddedNewTask(int minDate, SparseArray<ArrayList<Long>> mids) {
        Utilities.stageQueue.postRunnable(new Runnable(minDate) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$40$MessagesController(this.f$1);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable(mids) {
            private final /* synthetic */ SparseArray f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$41$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$didAddedNewTask$40$MessagesController(int minDate) {
        int i;
        if ((this.currentDeletingTaskMids == null && !this.gettingNewDeleteTask) || ((i = this.currentDeletingTaskTime) != 0 && minDate < i)) {
            getNewDeleteTask((ArrayList<Integer>) null, 0);
        }
    }

    public /* synthetic */ void lambda$didAddedNewTask$41$MessagesController(SparseArray mids) {
        getNotificationCenter().postNotificationName(NotificationCenter.didCreatedNewDeleteTask, mids);
    }

    public void getNewDeleteTask(ArrayList<Integer> oldTask, int channelId) {
        Utilities.stageQueue.postRunnable(new Runnable(oldTask, channelId) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$getNewDeleteTask$42$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$getNewDeleteTask$42$MessagesController(ArrayList oldTask, int channelId) {
        this.gettingNewDeleteTask = true;
        getMessagesStorage().getNewTask(oldTask, channelId);
    }

    private boolean checkDeletingTask(boolean runnable) {
        int i;
        int currentServerTime = getConnectionsManager().getCurrentTime();
        if (this.currentDeletingTaskMids == null || (!runnable && ((i = this.currentDeletingTaskTime) == 0 || i > currentServerTime))) {
            return false;
        }
        this.currentDeletingTaskTime = 0;
        if (this.currentDeleteTaskRunnable != null && !runnable) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
        }
        this.currentDeleteTaskRunnable = null;
        AndroidUtilities.runOnUIThread(new Runnable(new ArrayList<>(this.currentDeletingTaskMids)) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$checkDeletingTask$44$MessagesController(this.f$1);
            }
        });
        return true;
    }

    public /* synthetic */ void lambda$checkDeletingTask$44$MessagesController(ArrayList mids) {
        if (mids.isEmpty() || ((Integer) mids.get(0)).intValue() <= 0) {
            deleteMessages(mids, (ArrayList<Long>) null, (TLRPC.EncryptedChat) null, 0, 0, false, false);
        } else {
            getMessagesStorage().emptyMessagesMedia(mids);
        }
        Utilities.stageQueue.postRunnable(new Runnable(mids) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$43$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$43$MessagesController(ArrayList mids) {
        getNewDeleteTask(mids, this.currentDeletingTaskChannelId);
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
    }

    public void processLoadedDeleteTask(int taskTime, ArrayList<Integer> messages, int channelId) {
        Utilities.stageQueue.postRunnable(new Runnable(messages, taskTime) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedDeleteTask$46$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedDeleteTask$46$MessagesController(ArrayList messages, int taskTime) {
        this.gettingNewDeleteTask = false;
        if (messages != null) {
            this.currentDeletingTaskTime = taskTime;
            this.currentDeletingTaskMids = messages;
            if (this.currentDeleteTaskRunnable != null) {
                Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
                this.currentDeleteTaskRunnable = null;
            }
            if (!checkDeletingTask(false)) {
                this.currentDeleteTaskRunnable = new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$45$MessagesController();
                    }
                };
                Utilities.stageQueue.postRunnable(this.currentDeleteTaskRunnable, ((long) Math.abs(getConnectionsManager().getCurrentTime() - this.currentDeletingTaskTime)) * 1000);
                return;
            }
            return;
        }
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
    }

    public /* synthetic */ void lambda$null$45$MessagesController() {
        checkDeletingTask(true);
    }

    public void loadDialogPhotos(int did, int count, long max_id, boolean fromCache, int classGuid) {
        int i = count;
        long j = max_id;
        int i2 = classGuid;
        if (fromCache) {
            getMessagesStorage().getDialogPhotos(did, count, max_id, classGuid);
        } else if (did > 0) {
            TLRPC.User user = getUser(Integer.valueOf(did));
            if (user != null) {
                TLRPC.TL_photos_getUserPhotos req = new TLRPC.TL_photos_getUserPhotos();
                req.limit = i;
                req.offset = 0;
                req.max_id = (long) ((int) j);
                req.user_id = getInputUser(user);
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(req, new RequestDelegate(did, count, max_id, classGuid) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ long f$3;
                    private final /* synthetic */ int f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r6;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadDialogPhotos$47$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                    }
                }), i2);
            }
        } else if (did < 0) {
            TLRPC.TL_messages_search req2 = new TLRPC.TL_messages_search();
            req2.filter = new TLRPC.TL_inputMessagesFilterChatPhotos();
            req2.limit = i;
            req2.offset_id = (int) j;
            req2.q = "";
            req2.peer = getInputPeer(did);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(req2, new RequestDelegate(did, count, max_id, classGuid) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ long f$3;
                private final /* synthetic */ int f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r6;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadDialogPhotos$48$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                }
            }), i2);
        }
    }

    public /* synthetic */ void lambda$loadDialogPhotos$47$MessagesController(int did, int count, long max_id, int classGuid, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processLoadedUserPhotos((TLRPC.photos_Photos) response, did, count, max_id, false, classGuid);
        }
    }

    public /* synthetic */ void lambda$loadDialogPhotos$48$MessagesController(int did, int count, long max_id, int classGuid, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.messages_Messages messages = (TLRPC.messages_Messages) response;
            TLRPC.TL_photos_photos res = new TLRPC.TL_photos_photos();
            res.count = messages.count;
            res.users.addAll(messages.users);
            for (int a = 0; a < messages.messages.size(); a++) {
                TLRPC.Message message = messages.messages.get(a);
                if (!(message.action == null || message.action.photo == null)) {
                    res.photos.add(message.action.photo);
                }
            }
            processLoadedUserPhotos(res, did, count, max_id, false, classGuid);
        }
    }

    public void blockUser(int user_id) {
        TLRPC.User user = getUser(Integer.valueOf(user_id));
        if (user != null && this.blockedUsers.indexOfKey(user_id) < 0) {
            this.blockedUsers.put(user_id, 1);
            if (user.bot) {
                getMediaDataController().removeInline(user_id);
            } else {
                getMediaDataController().removePeer(user_id);
            }
            int i = this.totalBlockedCount;
            if (i >= 0) {
                this.totalBlockedCount = i + 1;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            TLRPC.TL_contacts_block req = new TLRPC.TL_contacts_block();
            req.id = getInputUser(user);
            getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$5NmVBHOLvBHrXAVrxImAUwgzA9s.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$blockUser$49(TLObject response, TLRPC.TL_error error) {
    }

    public void setUserBannedRole(int chatId, TLRPC.User user, TLRPC.TL_chatBannedRights rights, boolean isChannel, BaseFragment parentFragment) {
        if (user != null && rights != null) {
            TLRPC.TL_channels_editBanned req = new TLRPC.TL_channels_editBanned();
            req.channel = getInputChannel(chatId);
            req.user_id = getInputUser(user);
            req.banned_rights = rights;
            getConnectionsManager().sendRequest(req, new RequestDelegate(chatId, parentFragment, req, isChannel) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC.TL_channels_editBanned f$3;
                private final /* synthetic */ boolean f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$setUserBannedRole$52$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$setUserBannedRole$52$MessagesController(int chatId, BaseFragment parentFragment, TLRPC.TL_channels_editBanned req, boolean isChannel, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new Runnable(chatId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$50$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(error, parentFragment, req, isChannel) {
            private final /* synthetic */ TLRPC.TL_error f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC.TL_channels_editBanned f$3;
            private final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$51$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$50$MessagesController(int chatId) {
        loadFullChat(chatId, 0, true);
    }

    public /* synthetic */ void lambda$null$51$MessagesController(TLRPC.TL_error error, BaseFragment parentFragment, TLRPC.TL_channels_editBanned req, boolean isChannel) {
        AlertsCreator.processError(this.currentAccount, error, parentFragment, req, Boolean.valueOf(isChannel));
    }

    public void setChannelSlowMode(int chatId, int seconds) {
        TLRPC.TL_channels_toggleSlowMode req = new TLRPC.TL_channels_toggleSlowMode();
        req.seconds = seconds;
        req.channel = getInputChannel(chatId);
        getConnectionsManager().sendRequest(req, new RequestDelegate(chatId) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$setChannelSlowMode$54$MessagesController(this.f$1, tLObject, tL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setChannelSlowMode$54$MessagesController(int chatId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            getMessagesController().processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new Runnable(chatId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$53$MessagesController(this.f$1);
                }
            }, 1000);
        }
    }

    public /* synthetic */ void lambda$null$53$MessagesController(int chatId) {
        loadFullChat(chatId, 0, true);
    }

    public void setDefaultBannedRole(int chatId, TLRPC.TL_chatBannedRights rights, boolean isChannel, BaseFragment parentFragment) {
        if (rights != null) {
            TLRPC.TL_messages_editChatDefaultBannedRights req = new TLRPC.TL_messages_editChatDefaultBannedRights();
            req.peer = getInputPeer(-chatId);
            req.banned_rights = rights;
            getConnectionsManager().sendRequest(req, new RequestDelegate(chatId, parentFragment, req, isChannel) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC.TL_messages_editChatDefaultBannedRights f$3;
                private final /* synthetic */ boolean f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$setDefaultBannedRole$57$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$setDefaultBannedRole$57$MessagesController(int chatId, BaseFragment parentFragment, TLRPC.TL_messages_editChatDefaultBannedRights req, boolean isChannel, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new Runnable(chatId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$55$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(error, parentFragment, req, isChannel) {
            private final /* synthetic */ TLRPC.TL_error f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC.TL_messages_editChatDefaultBannedRights f$3;
            private final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$56$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$55$MessagesController(int chatId) {
        loadFullChat(chatId, 0, true);
    }

    public /* synthetic */ void lambda$null$56$MessagesController(TLRPC.TL_error error, BaseFragment parentFragment, TLRPC.TL_messages_editChatDefaultBannedRights req, boolean isChannel) {
        AlertsCreator.processError(this.currentAccount, error, parentFragment, req, Boolean.valueOf(isChannel));
    }

    public void setUserAdminRole(int chatId, TLRPC.User user, TLRPC.TL_chatAdminRights rights, String rank, boolean isChannel, BaseFragment parentFragment, boolean addingNew) {
        int i = chatId;
        TLRPC.User user2 = user;
        TLRPC.TL_chatAdminRights tL_chatAdminRights = rights;
        if (user2 == null) {
            String str = rank;
        } else if (tL_chatAdminRights == null) {
            String str2 = rank;
        } else {
            TLRPC.Chat chat = getChat(Integer.valueOf(chatId));
            if (ChatObject.isChannel(chat)) {
                TLRPC.TL_channels_editAdmin req = new TLRPC.TL_channels_editAdmin();
                req.channel = getInputChannel(chat);
                req.user_id = getInputUser(user2);
                req.admin_rights = tL_chatAdminRights;
                req.rank = rank;
                getConnectionsManager().sendRequest(req, new RequestDelegate(chatId, parentFragment, req, isChannel) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ BaseFragment f$2;
                    private final /* synthetic */ TLRPC.TL_channels_editAdmin f$3;
                    private final /* synthetic */ boolean f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$setUserAdminRole$60$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                    }
                });
                return;
            }
            String str3 = rank;
            TLRPC.TL_messages_editChatAdmin req2 = new TLRPC.TL_messages_editChatAdmin();
            req2.chat_id = i;
            req2.user_id = getInputUser(user2);
            req2.is_admin = tL_chatAdminRights.change_info || tL_chatAdminRights.delete_messages || tL_chatAdminRights.ban_users || tL_chatAdminRights.invite_users || tL_chatAdminRights.pin_messages || tL_chatAdminRights.add_admins;
            RequestDelegate requestDelegate = new RequestDelegate(i, parentFragment, req2) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC.TL_messages_editChatAdmin f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$setUserAdminRole$63$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tL_error);
                }
            };
            if (!req2.is_admin || !addingNew) {
                getConnectionsManager().sendRequest(req2, requestDelegate);
            } else {
                addUserToChat(chatId, user, (TLRPC.ChatFull) null, 0, (String) null, parentFragment, new Runnable(req2, requestDelegate) {
                    private final /* synthetic */ TLRPC.TL_messages_editChatAdmin f$1;
                    private final /* synthetic */ RequestDelegate f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesController.this.lambda$setUserAdminRole$64$MessagesController(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$60$MessagesController(int chatId, BaseFragment parentFragment, TLRPC.TL_channels_editAdmin req, boolean isChannel, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new Runnable(chatId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$58$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(error, parentFragment, req, isChannel) {
            private final /* synthetic */ TLRPC.TL_error f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC.TL_channels_editAdmin f$3;
            private final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$59$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$58$MessagesController(int chatId) {
        loadFullChat(chatId, 0, true);
    }

    public /* synthetic */ void lambda$null$59$MessagesController(TLRPC.TL_error error, BaseFragment parentFragment, TLRPC.TL_channels_editAdmin req, boolean isChannel) {
        AlertsCreator.processError(this.currentAccount, error, parentFragment, req, Boolean.valueOf(isChannel));
    }

    public /* synthetic */ void lambda$setUserAdminRole$63$MessagesController(int chatId, BaseFragment parentFragment, TLRPC.TL_messages_editChatAdmin req, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            AndroidUtilities.runOnUIThread(new Runnable(chatId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$61$MessagesController(this.f$1);
                }
            }, 1000);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable(error, parentFragment, req) {
                private final /* synthetic */ TLRPC.TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC.TL_messages_editChatAdmin f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$62$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$61$MessagesController(int chatId) {
        loadFullChat(chatId, 0, true);
    }

    public /* synthetic */ void lambda$null$62$MessagesController(TLRPC.TL_error error, BaseFragment parentFragment, TLRPC.TL_messages_editChatAdmin req) {
        AlertsCreator.processError(this.currentAccount, error, parentFragment, req, false);
    }

    public /* synthetic */ void lambda$setUserAdminRole$64$MessagesController(TLRPC.TL_messages_editChatAdmin req, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(req, requestDelegate);
    }

    public void unblockUser(int user_id) {
        TLRPC.TL_contacts_unblock req = new TLRPC.TL_contacts_unblock();
        TLRPC.User user = getUser(Integer.valueOf(user_id));
        if (user != null) {
            this.totalBlockedCount--;
            this.blockedUsers.delete(user.id);
            req.id = getInputUser(user);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$Un5HQYcNJjKKbosJCSBzE_C41hk.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$unblockUser$65(TLObject response, TLRPC.TL_error error) {
    }

    public void getBlockedUsers(boolean reset) {
        if (getUserConfig().isClientActivated() && !this.loadingBlockedUsers) {
            this.loadingBlockedUsers = true;
            TLRPC.TL_contacts_getBlocked req = new TLRPC.TL_contacts_getBlocked();
            req.offset = reset ? 0 : this.blockedUsers.size();
            req.limit = reset ? 20 : 100;
            getConnectionsManager().sendRequest(req, new RequestDelegate(reset, req) {
                private final /* synthetic */ boolean f$1;
                private final /* synthetic */ TLRPC.TL_contacts_getBlocked f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$getBlockedUsers$67$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getBlockedUsers$67$MessagesController(boolean reset, TLRPC.TL_contacts_getBlocked req, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(response, reset, req) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ boolean f$2;
            private final /* synthetic */ TLRPC.TL_contacts_getBlocked f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$66$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$66$MessagesController(TLObject response, boolean reset, TLRPC.TL_contacts_getBlocked req) {
        if (response != null) {
            TLRPC.contacts_Blocked res = (TLRPC.contacts_Blocked) response;
            putUsers(res.users, false);
            getMessagesStorage().putUsersAndChats(res.users, (ArrayList<TLRPC.Chat>) null, true, true);
            if (reset) {
                this.blockedUsers.clear();
            }
            this.totalBlockedCount = Math.max(res.count, res.blocked.size());
            this.blockedEndReached = res.blocked.size() < req.limit;
            int N = res.blocked.size();
            for (int a = 0; a < N; a++) {
                this.blockedUsers.put(res.blocked.get(a).user_id, 1);
            }
            this.loadingBlockedUsers = false;
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
    }

    public void deleteUserPhoto(TLRPC.InputPhoto photo) {
        if (photo == null) {
            TLRPC.TL_photos_updateProfilePhoto req = new TLRPC.TL_photos_updateProfilePhoto();
            req.id = new TLRPC.TL_inputPhotoEmpty();
            getUserConfig().getCurrentUser().photo = new TLRPC.TL_userProfilePhotoEmpty();
            TLRPC.User user = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
            }
            if (user != null) {
                user.photo = getUserConfig().getCurrentUser().photo;
                getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
                getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
                getConnectionsManager().sendRequest(req, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$deleteUserPhoto$69$MessagesController(tLObject, tL_error);
                    }
                });
                return;
            }
            return;
        }
        TLRPC.TL_photos_deletePhotos req2 = new TLRPC.TL_photos_deletePhotos();
        req2.id.add(photo);
        getConnectionsManager().sendRequest(req2, $$Lambda$MessagesController$DsiVnXP0DiPhXhCSTHM7kg4NtA.INSTANCE);
    }

    public /* synthetic */ void lambda$deleteUserPhoto$69$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.User user1 = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user1 == null) {
                user1 = getUserConfig().getCurrentUser();
                putUser(user1, false);
            } else {
                getUserConfig().setCurrentUser(user1);
            }
            if (user1 != null) {
                getMessagesStorage().clearUserPhotos(user1.id);
                ArrayList<TLRPC.User> users2 = new ArrayList<>();
                users2.add(user1);
                getMessagesStorage().putUsersAndChats(users2, (ArrayList<TLRPC.Chat>) null, false, true);
                user1.photo = (TLRPC.UserProfilePhoto) response;
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$68$MessagesController();
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$null$68$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
        getUserConfig().saveConfig(true);
    }

    static /* synthetic */ void lambda$deleteUserPhoto$70(TLObject response, TLRPC.TL_error error) {
    }

    public void processLoadedUserPhotos(TLRPC.photos_Photos res, int did, int count, long max_id, boolean fromCache, int classGuid) {
        if (!fromCache) {
            getMessagesStorage().putUsersAndChats(res.users, (ArrayList<TLRPC.Chat>) null, true, true);
            getMessagesStorage().putDialogPhotos(did, res);
        } else if (res == null || res.photos.isEmpty()) {
            loadDialogPhotos(did, count, max_id, false, classGuid);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(res, fromCache, did, count, classGuid) {
            private final /* synthetic */ TLRPC.photos_Photos f$1;
            private final /* synthetic */ boolean f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ int f$4;
            private final /* synthetic */ int f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedUserPhotos$71$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedUserPhotos$71$MessagesController(TLRPC.photos_Photos res, boolean fromCache, int did, int count, int classGuid) {
        putUsers(res.users, fromCache);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogPhotosLoaded, Integer.valueOf(did), Integer.valueOf(count), Boolean.valueOf(fromCache), Integer.valueOf(classGuid), res.photos);
    }

    public void uploadAndApplyUserAvatar(TLRPC.FileLocation location) {
        if (location != null) {
            this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + location.volume_id + "_" + location.local_id + ".jpg";
            getFileLoader().uploadFile(this.uploadingAvatar, false, true, 16777216);
        }
    }

    public void uploadAvatar(TLRPC.FileLocation location) {
        if (location != null) {
            this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + location.volume_id + "_" + location.local_id + ".jpg";
            getFileLoader().uploadFile(this.uploadingAvatar, false, true, 16777216, false);
        }
    }

    public void saveTheme(Theme.ThemeInfo themeInfo, boolean night, boolean unsave) {
        if (themeInfo.info != null) {
            TLRPC.TL_account_saveTheme req = new TLRPC.TL_account_saveTheme();
            TLRPC.TL_inputTheme inputTheme = new TLRPC.TL_inputTheme();
            inputTheme.id = themeInfo.info.id;
            inputTheme.access_hash = themeInfo.info.access_hash;
            req.theme = inputTheme;
            req.unsave = unsave;
            getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$1NWLVtJ8_RhXgNCsVOEcuL0U2dM.INSTANCE);
        }
        if (!unsave) {
            installTheme(themeInfo, night);
        }
    }

    static /* synthetic */ void lambda$saveTheme$72(TLObject response, TLRPC.TL_error error) {
    }

    public void installTheme(Theme.ThemeInfo themeInfo, boolean night) {
        TLRPC.TL_account_installTheme req = new TLRPC.TL_account_installTheme();
        req.dark = night;
        if (themeInfo.info != null) {
            req.format = "android";
            TLRPC.TL_inputTheme inputTheme = new TLRPC.TL_inputTheme();
            inputTheme.id = themeInfo.info.id;
            inputTheme.access_hash = themeInfo.info.access_hash;
            req.theme = inputTheme;
            req.flags |= 2;
        }
        getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$Vlxvff8EieQ9jrJKdjNRXB1yH1I.INSTANCE);
        if (!TextUtils.isEmpty(themeInfo.slug)) {
            TLRPC.TL_account_installWallPaper req2 = new TLRPC.TL_account_installWallPaper();
            TLRPC.TL_inputWallPaperSlug inputWallPaperSlug = new TLRPC.TL_inputWallPaperSlug();
            inputWallPaperSlug.slug = themeInfo.slug;
            req2.wallpaper = inputWallPaperSlug;
            req2.settings = new TLRPC.TL_wallPaperSettings();
            req2.settings.blur = themeInfo.isBlured;
            req2.settings.motion = themeInfo.isMotion;
            getConnectionsManager().sendRequest(req2, $$Lambda$MessagesController$_GxU3FwZn41tbCJ8k5nAfSDtds.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$installTheme$73(TLObject response, TLRPC.TL_error error) {
    }

    static /* synthetic */ void lambda$installTheme$74(TLObject response, TLRPC.TL_error error) {
    }

    public void saveThemeToServer(Theme.ThemeInfo themeInfo) {
        if (themeInfo != null && !this.uploadingThemes.containsKey(themeInfo.pathToFile)) {
            this.uploadingThemes.put(themeInfo.pathToFile, themeInfo);
            Utilities.globalQueue.postRunnable(new Runnable(themeInfo) {
                private final /* synthetic */ Theme.ThemeInfo f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$saveThemeToServer$76$MessagesController(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$saveThemeToServer$76$MessagesController(Theme.ThemeInfo themeInfo) {
        AndroidUtilities.runOnUIThread(new Runnable(Theme.createThemePreviewImage(themeInfo), themeInfo) {
            private final /* synthetic */ String f$1;
            private final /* synthetic */ Theme.ThemeInfo f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$75$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$75$MessagesController(String thumbPath, Theme.ThemeInfo themeInfo) {
        if (thumbPath == null) {
            this.uploadingThemes.remove(themeInfo.pathToFile);
            return;
        }
        themeInfo.uploadingFile = themeInfo.pathToFile;
        themeInfo.uploadingThumb = thumbPath;
        this.uploadingThemes.put(thumbPath, themeInfo);
        long length = new File(themeInfo.pathToFile).length();
        long length2 = new File(thumbPath).length();
        getFileLoader().uploadFile(themeInfo.pathToFile, false, true, ConnectionsManager.FileTypeFile);
        getFileLoader().uploadFile(thumbPath, false, true, 16777216);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v0, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v2, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v15, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_account_installWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v3, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void saveWallpaperToServer(java.io.File r21, long r22, java.lang.String r24, long r25, boolean r27, boolean r28, int r29, float r30, boolean r31, long r32) {
        /*
            r20 = this;
            r9 = r20
            r10 = r21
            r11 = r22
            r13 = r24
            r14 = r25
            r8 = r27
            r6 = r28
            r7 = r29
            r5 = r30
            r3 = r31
            java.lang.String r0 = r9.uploadingWallpaper
            r1 = 0
            if (r0 == 0) goto L_0x0052
            java.io.File r0 = new java.io.File
            java.io.File r2 = im.bclpbkiauv.messenger.ApplicationLoader.getFilesDirFixed()
            boolean r4 = r9.uploadingWallpaperBlurred
            if (r4 == 0) goto L_0x0027
            java.lang.String r4 = "wallpaper_original.jpg"
            goto L_0x002a
        L_0x0027:
            java.lang.String r4 = "wallpaper.jpg"
        L_0x002a:
            r0.<init>(r2, r4)
            if (r10 == 0) goto L_0x0046
            java.lang.String r2 = r21.getAbsolutePath()
            java.lang.String r4 = r9.uploadingWallpaper
            boolean r2 = r2.equals(r4)
            if (r2 != 0) goto L_0x0041
            boolean r2 = r10.equals(r0)
            if (r2 == 0) goto L_0x0046
        L_0x0041:
            r9.uploadingWallpaperMotion = r6
            r9.uploadingWallpaperBlurred = r8
            return
        L_0x0046:
            im.bclpbkiauv.messenger.FileLoader r2 = r20.getFileLoader()
            java.lang.String r4 = r9.uploadingWallpaper
            r2.cancelUploadFile(r4, r1)
            r2 = 0
            r9.uploadingWallpaper = r2
        L_0x0052:
            r0 = 1
            if (r10 == 0) goto L_0x006c
            java.lang.String r2 = r21.getAbsolutePath()
            r9.uploadingWallpaper = r2
            r9.uploadingWallpaperMotion = r6
            r9.uploadingWallpaperBlurred = r8
            im.bclpbkiauv.messenger.FileLoader r2 = r20.getFileLoader()
            java.lang.String r4 = r9.uploadingWallpaper
            r9 = 16777216(0x1000000, float:2.3509887E-38)
            r2.uploadFile(r4, r1, r0, r9)
            goto L_0x012c
        L_0x006c:
            r1 = 0
            int r4 = (r14 > r1 ? 1 : (r14 == r1 ? 0 : -1))
            if (r4 == 0) goto L_0x012c
            im.bclpbkiauv.tgnet.TLRPC$TL_inputWallPaper r4 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputWallPaper
            r4.<init>()
            r9 = r4
            r9.id = r11
            r9.access_hash = r14
            im.bclpbkiauv.tgnet.TLRPC$TL_wallPaperSettings r4 = new im.bclpbkiauv.tgnet.TLRPC$TL_wallPaperSettings
            r4.<init>()
            r4.blur = r8
            r4.motion = r6
            if (r7 == 0) goto L_0x009b
            r4.background_color = r7
            int r1 = r4.flags
            r0 = r0 | r1
            r4.flags = r0
            r0 = 1120403456(0x42c80000, float:100.0)
            float r0 = r0 * r5
            int r0 = (int) r0
            r4.intensity = r0
            int r0 = r4.flags
            r0 = r0 | 8
            r4.flags = r0
        L_0x009b:
            if (r3 == 0) goto L_0x00a9
            im.bclpbkiauv.tgnet.TLRPC$TL_account_installWallPaper r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_account_installWallPaper
            r0.<init>()
            r0.wallpaper = r9
            r0.settings = r4
            r2 = r0
            goto L_0x00b4
        L_0x00a9:
            im.bclpbkiauv.tgnet.TLRPC$TL_account_saveWallPaper r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_account_saveWallPaper
            r0.<init>()
            r0.wallpaper = r9
            r0.settings = r4
            r1 = r0
            r2 = r1
        L_0x00b4:
            r0 = 0
            int r16 = (r32 > r0 ? 1 : (r32 == r0 ? 0 : -1))
            if (r16 == 0) goto L_0x00bf
            r0 = r32
            r16 = r0
            goto L_0x010e
        L_0x00bf:
            r1 = 0
            im.bclpbkiauv.tgnet.NativeByteBuffer r0 = new im.bclpbkiauv.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x00fe }
            r16 = r1
            r1 = 1024(0x400, float:1.435E-42)
            r0.<init>((int) r1)     // Catch:{ Exception -> 0x00fa }
            r1 = r0
            r0 = 19
            r1.writeInt32(r0)     // Catch:{ Exception -> 0x00f8 }
            r1.writeInt64(r11)     // Catch:{ Exception -> 0x00f8 }
            r1.writeInt64(r14)     // Catch:{ Exception -> 0x00f8 }
            r1.writeBool(r8)     // Catch:{ Exception -> 0x00f8 }
            r1.writeBool(r6)     // Catch:{ Exception -> 0x00f8 }
            r1.writeInt32(r7)     // Catch:{ Exception -> 0x00f8 }
            double r6 = (double) r5     // Catch:{ Exception -> 0x00f8 }
            r1.writeDouble(r6)     // Catch:{ Exception -> 0x00f8 }
            r1.writeBool(r3)     // Catch:{ Exception -> 0x00f8 }
            if (r13 == 0) goto L_0x00eb
            r1.writeString(r13)     // Catch:{ Exception -> 0x00f8 }
            goto L_0x00f0
        L_0x00eb:
            java.lang.String r0 = ""
            r1.writeString(r0)     // Catch:{ Exception -> 0x00f8 }
        L_0x00f0:
            int r0 = r1.position()     // Catch:{ Exception -> 0x00f8 }
            r1.limit(r0)     // Catch:{ Exception -> 0x00f8 }
            goto L_0x0104
        L_0x00f8:
            r0 = move-exception
            goto L_0x0101
        L_0x00fa:
            r0 = move-exception
            r1 = r16
            goto L_0x0101
        L_0x00fe:
            r0 = move-exception
            r16 = r1
        L_0x0101:
            im.bclpbkiauv.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0104:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r20.getMessagesStorage()
            long r6 = r0.createPendingTask(r1)
            r16 = r6
        L_0x010e:
            im.bclpbkiauv.tgnet.ConnectionsManager r0 = r20.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$q1CG6LWA29ijR6YjUCvadUEfExM r6 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$q1CG6LWA29ijR6YjUCvadUEfExM
            r1 = r6
            r7 = r2
            r2 = r20
            r18 = r4
            r3 = r16
            r5 = r31
            r10 = r7
            r19 = r9
            r9 = r6
            r6 = r22
            r8 = r24
            r1.<init>(r3, r5, r6, r8)
            r0.sendRequest(r10, r9)
        L_0x012c:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.saveWallpaperToServer(java.io.File, long, java.lang.String, long, boolean, boolean, int, float, boolean, long):void");
    }

    public /* synthetic */ void lambda$saveWallpaperToServer$77$MessagesController(long newTaskId, boolean install, long wallPaperId, String slug, TLObject response, TLRPC.TL_error error) {
        getMessagesStorage().removePendingTask(newTaskId);
        if (!install && this.uploadingWallpaper != null) {
            SharedPreferences.Editor editor = getGlobalMainSettings().edit();
            editor.putLong("selectedBackground2", wallPaperId);
            if (!TextUtils.isEmpty(slug)) {
                editor.putString("selectedBackgroundSlug", slug);
            } else {
                editor.remove("selectedBackgroundSlug");
            }
            editor.commit();
        }
    }

    public void markChannelDialogMessageAsDeleted(ArrayList<Integer> messages, int channelId) {
        MessageObject obj = this.dialogMessage.get((long) (-channelId));
        if (obj != null) {
            for (int a = 0; a < messages.size(); a++) {
                if (obj.getId() == messages.get(a).intValue()) {
                    obj.deleted = true;
                    return;
                }
            }
        }
    }

    public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms, TLRPC.EncryptedChat encryptedChat, long dialogId, int channelId, boolean forAll, boolean scheduled) {
        deleteMessages(messages, randoms, encryptedChat, dialogId, channelId, forAll, scheduled, 0, (TLObject) null);
    }

    public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms, TLRPC.EncryptedChat encryptedChat, long dialogId, int channelId, boolean forAll, boolean scheduled, long taskId, TLObject taskRequest) {
        ArrayList<Integer> toSend;
        long newTaskId;
        TLRPC.TL_messages_deleteMessages req;
        long newTaskId2;
        TLRPC.TL_channels_deleteMessages req2;
        long newTaskId3;
        TLRPC.TL_messages_deleteScheduledMessages req3;
        ArrayList<Integer> arrayList = messages;
        ArrayList<Long> arrayList2 = randoms;
        TLRPC.EncryptedChat encryptedChat2 = encryptedChat;
        long j = dialogId;
        int i = channelId;
        if ((arrayList != null && !messages.isEmpty()) || taskRequest != null) {
            if (taskId == 0) {
                ArrayList<Integer> toSend2 = new ArrayList<>();
                for (int a = 0; a < messages.size(); a++) {
                    Integer mid = arrayList.get(a);
                    if (mid.intValue() > 0) {
                        toSend2.add(mid);
                    }
                }
                if (scheduled) {
                    getMessagesStorage().markMessagesAsDeleted(messages, true, channelId, false, true);
                } else {
                    if (i == 0) {
                        for (int a2 = 0; a2 < messages.size(); a2++) {
                            MessageObject obj = this.dialogMessagesByIds.get(arrayList.get(a2).intValue());
                            if (obj != null) {
                                obj.deleted = true;
                            }
                        }
                    } else {
                        markChannelDialogMessageAsDeleted(arrayList, i);
                    }
                    getMessagesStorage().markMessagesAsDeleted(messages, true, channelId, forAll, false);
                    getMessagesStorage().updateDialogsWithDeletedMessages(arrayList, (ArrayList<Long>) null, true, i);
                }
                getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, Integer.valueOf(channelId), Boolean.valueOf(scheduled));
                toSend = toSend2;
            } else {
                toSend = null;
            }
            if (scheduled) {
                if (taskRequest != null) {
                    req3 = (TLRPC.TL_messages_deleteScheduledMessages) taskRequest;
                    newTaskId3 = taskId;
                } else {
                    TLRPC.TL_messages_deleteScheduledMessages req4 = new TLRPC.TL_messages_deleteScheduledMessages();
                    req4.id = toSend;
                    req4.peer = getInputPeer((int) j);
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(req4.getObjectSize() + 16);
                        data.writeInt32(18);
                        data.writeInt64(j);
                        data.writeInt32(i);
                        req4.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    req3 = req4;
                    newTaskId3 = MessagesStorage.getInstance(this.currentAccount).createPendingTask(data);
                }
                ConnectionsManager.getInstance(this.currentAccount).sendRequest(req3, new RequestDelegate(newTaskId3) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$deleteMessages$78$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
                long j2 = newTaskId3;
                boolean z = forAll;
            } else if (i != 0) {
                if (taskRequest != null) {
                    req2 = (TLRPC.TL_channels_deleteMessages) taskRequest;
                    newTaskId2 = taskId;
                } else {
                    TLRPC.TL_channels_deleteMessages req5 = new TLRPC.TL_channels_deleteMessages();
                    req5.id = toSend;
                    req5.channel = getInputChannel(i);
                    NativeByteBuffer data2 = null;
                    try {
                        data2 = new NativeByteBuffer(req5.getObjectSize() + 8);
                        data2.writeInt32(7);
                        data2.writeInt32(i);
                        req5.serializeToStream(data2);
                    } catch (Exception e2) {
                        FileLog.e((Throwable) e2);
                    }
                    req2 = req5;
                    newTaskId2 = getMessagesStorage().createPendingTask(data2);
                }
                getConnectionsManager().sendRequest(req2, new RequestDelegate(i, newTaskId2) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ long f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$deleteMessages$79$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                    }
                });
                long j3 = newTaskId2;
                boolean z2 = forAll;
            } else {
                if (!(arrayList2 == null || encryptedChat2 == null || randoms.isEmpty())) {
                    getSecretChatHelper().sendMessagesDeleteMessage(encryptedChat2, arrayList2, (TLRPC.Message) null);
                }
                if (taskRequest != null) {
                    req = (TLRPC.TL_messages_deleteMessages) taskRequest;
                    newTaskId = taskId;
                    boolean z3 = forAll;
                } else {
                    TLRPC.TL_messages_deleteMessages req6 = new TLRPC.TL_messages_deleteMessages();
                    req6.id = toSend;
                    req6.revoke = forAll;
                    NativeByteBuffer data3 = null;
                    try {
                        data3 = new NativeByteBuffer(req6.getObjectSize() + 8);
                        data3.writeInt32(7);
                        data3.writeInt32(i);
                        req6.serializeToStream(data3);
                    } catch (Exception e3) {
                        FileLog.e((Throwable) e3);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data3);
                    req = req6;
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(newTaskId) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$deleteMessages$80$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$deleteMessages$78$MessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
        if (newTaskId != 0) {
            MessagesStorage.getInstance(this.currentAccount).removePendingTask(newTaskId);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$79$MessagesController(int channelId, long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewChannelDifferenceParams(res.pts, res.pts_count, channelId);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$80$MessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void pinMessage(TLRPC.Chat chat, TLRPC.User user, int id, boolean notify) {
        if (chat != null || user != null) {
            TLRPC.TL_messages_updatePinnedMessage req = new TLRPC.TL_messages_updatePinnedMessage();
            req.peer = getInputPeer(chat != null ? -chat.id : user.id);
            req.id = id;
            req.silent = !notify;
            getConnectionsManager().sendRequest(req, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$pinMessage$81$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$pinMessage$81$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public void deleteUserChannelHistory(TLRPC.Chat chat, TLRPC.User user, int offset) {
        if (offset == 0) {
            getMessagesStorage().deleteUserChannelHistory(chat.id, user.id);
        }
        TLRPC.TL_channels_deleteUserHistory req = new TLRPC.TL_channels_deleteUserHistory();
        req.channel = getInputChannel(chat);
        req.user_id = getInputUser(user);
        getConnectionsManager().sendRequest(req, new RequestDelegate(chat, user) {
            private final /* synthetic */ TLRPC.Chat f$1;
            private final /* synthetic */ TLRPC.User f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$deleteUserChannelHistory$82$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
            }
        });
    }

    public /* synthetic */ void lambda$deleteUserChannelHistory$82$MessagesController(TLRPC.Chat chat, TLRPC.User user, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
            if (res.offset > 0) {
                deleteUserChannelHistory(chat, user, res.offset);
            }
            processNewChannelDifferenceParams(res.pts, res.pts_count, chat.id);
        }
    }

    public ArrayList<TLRPC.Dialog> getAllDialogs() {
        return this.allDialogs;
    }

    public boolean isDialogsEndReached(int folderId) {
        return this.dialogsEndReached.get(folderId);
    }

    public boolean isLoadingDialogs(int folderId) {
        return this.loadingDialogs.get(folderId);
    }

    public boolean isServerDialogsEndReached(int folderId) {
        return this.serverDialogsEndReached.get(folderId);
    }

    public boolean hasHiddenArchive() {
        return SharedConfig.archiveHidden && this.dialogs_dict.get(DialogObject.makeFolderDialogId(1)) != null;
    }

    public ArrayList<TLRPC.Dialog> getDialogs(int folderId) {
        ArrayList<TLRPC.Dialog> dialogs = this.dialogsByFolder.get(folderId);
        if (dialogs == null) {
            return new ArrayList<>();
        }
        return dialogs;
    }

    private void removeDialog(TLRPC.Dialog dialog) {
        if (dialog != null) {
            long did = dialog.id;
            if (this.dialogsServerOnly.remove(dialog) && DialogObject.isChannel(dialog)) {
                Utilities.stageQueue.postRunnable(new Runnable(did) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$removeDialog$83$MessagesController(this.f$1);
                    }
                });
            }
            this.allDialogs.remove(dialog);
            this.dialogsCanAddUsers.remove(dialog);
            this.dialogsChannelsOnly.remove(dialog);
            this.dialogsGroupsOnly.remove(dialog);
            this.dialogsUnreadOnly.remove(dialog);
            this.dialogsUsersOnly.remove(dialog);
            this.dialogsForward.remove(dialog);
            this.dialogs_dict.remove(did);
            this.dialogs_read_inbox_max.remove(Long.valueOf(did));
            this.dialogs_read_outbox_max.remove(Long.valueOf(did));
            ArrayList<TLRPC.Dialog> dialogs = this.dialogsByFolder.get(dialog.folder_id);
            if (dialogs != null) {
                dialogs.remove(dialog);
            }
        }
    }

    public /* synthetic */ void lambda$removeDialog$83$MessagesController(long did) {
        this.channelsPts.delete(-((int) did));
        this.shortPollChannels.delete(-((int) did));
        this.needShortPollChannels.delete(-((int) did));
        this.shortPollOnlines.delete(-((int) did));
        this.needShortPollOnlines.delete(-((int) did));
    }

    public void deleteDialog(long did, int onlyHistory) {
        deleteDialog(did, onlyHistory, false);
    }

    public void deleteDialog(long did, int onlyHistory, boolean revoke) {
        deleteDialog(did, true, onlyHistory, 0, revoke, (TLRPC.InputPeer) null, 0);
    }

    public void setDialogsInTransaction(boolean transaction) {
        this.dialogsInTransaction = transaction;
        if (!transaction) {
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
        }
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:29:0x0080  */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x00a1  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteDialog(long r34, boolean r36, int r37, int r38, boolean r39, im.bclpbkiauv.tgnet.TLRPC.InputPeer r40, long r41) {
        /*
            r33 = this;
            r11 = r33
            r12 = r34
            r14 = r36
            r15 = r37
            r9 = r39
            r0 = 2
            if (r15 != r0) goto L_0x0015
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            r0.deleteDialog(r12, r15)
            return
        L_0x0015:
            r1 = 3
            if (r15 == 0) goto L_0x001a
            if (r15 != r1) goto L_0x0021
        L_0x001a:
            im.bclpbkiauv.messenger.MediaDataController r2 = r33.getMediaDataController()
            r2.uninstallShortcut(r12)
        L_0x0021:
            int r7 = (int) r12
            r2 = 32
            long r2 = r12 >> r2
            int r10 = (int) r2
            r2 = r38
            r4 = 0
            r6 = 1
            r8 = 0
            if (r14 == 0) goto L_0x021a
            r16 = 0
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            r0.deleteDialog(r12, r15)
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r0 = r11.dialogs_dict
            java.lang.Object r0 = r0.get(r12)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r0 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r0
            if (r15 == 0) goto L_0x0044
            if (r15 != r1) goto L_0x004b
        L_0x0044:
            im.bclpbkiauv.messenger.NotificationsController r3 = r33.getNotificationsController()
            r3.deleteNotificationChannel(r12)
        L_0x004b:
            if (r0 == 0) goto L_0x01c7
            if (r2 != 0) goto L_0x0061
            int r3 = r0.top_message
            int r2 = java.lang.Math.max(r8, r3)
            int r3 = r0.read_inbox_max_id
            int r2 = java.lang.Math.max(r2, r3)
            int r3 = r0.read_outbox_max_id
            int r2 = java.lang.Math.max(r2, r3)
        L_0x0061:
            if (r15 == 0) goto L_0x006b
            if (r15 != r1) goto L_0x0066
            goto L_0x006b
        L_0x0066:
            r0.unread_count = r8
            r20 = r2
            goto L_0x00b8
        L_0x006b:
            im.bclpbkiauv.tgnet.TLRPC$Dialog r3 = r11.proxyDialog
            if (r3 == 0) goto L_0x0079
            r20 = r2
            long r1 = r3.id
            int r3 = (r1 > r12 ? 1 : (r1 == r12 ? 0 : -1))
            if (r3 != 0) goto L_0x007b
            r1 = 1
            goto L_0x007c
        L_0x0079:
            r20 = r2
        L_0x007b:
            r1 = 0
        L_0x007c:
            r16 = r1
            if (r1 == 0) goto L_0x00a1
            r11.isLeftProxyChannel = r6
            im.bclpbkiauv.tgnet.TLRPC$Dialog r1 = r11.proxyDialog
            long r1 = r1.id
            int r3 = (r1 > r4 ? 1 : (r1 == r4 ? 0 : -1))
            if (r3 >= 0) goto L_0x009c
            im.bclpbkiauv.tgnet.TLRPC$Dialog r1 = r11.proxyDialog
            long r1 = r1.id
            int r2 = (int) r1
            int r1 = -r2
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            im.bclpbkiauv.tgnet.TLRPC$Chat r1 = r11.getChat(r1)
            if (r1 == 0) goto L_0x009c
            r1.left = r6
        L_0x009c:
            r1 = 0
            r11.sortDialogs(r1)
            goto L_0x00b8
        L_0x00a1:
            r11.removeDialog(r0)
            android.util.SparseIntArray r1 = r11.nextDialogsCacheOffset
            int r2 = r0.folder_id
            int r1 = r1.get(r2, r8)
            if (r1 <= 0) goto L_0x00b7
            android.util.SparseIntArray r2 = r11.nextDialogsCacheOffset
            int r3 = r0.folder_id
            int r8 = r1 + -1
            r2.put(r3, r8)
        L_0x00b7:
        L_0x00b8:
            if (r16 != 0) goto L_0x01c5
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r1 = r11.dialogMessage
            long r2 = r0.id
            java.lang.Object r1 = r1.get(r2)
            im.bclpbkiauv.messenger.MessageObject r1 = (im.bclpbkiauv.messenger.MessageObject) r1
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r2 = r11.dialogMessage
            r21 = r7
            long r6 = r0.id
            r2.remove(r6)
            if (r1 == 0) goto L_0x00dd
            int r2 = r1.getId()
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r6 = r11.dialogMessagesByIds
            int r7 = r1.getId()
            r6.remove(r7)
            goto L_0x00f1
        L_0x00dd:
            int r2 = r0.top_message
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r6 = r11.dialogMessagesByIds
            int r7 = r0.top_message
            java.lang.Object r6 = r6.get(r7)
            r1 = r6
            im.bclpbkiauv.messenger.MessageObject r1 = (im.bclpbkiauv.messenger.MessageObject) r1
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r6 = r11.dialogMessagesByIds
            int r7 = r0.top_message
            r6.remove(r7)
        L_0x00f1:
            if (r1 == 0) goto L_0x0104
            im.bclpbkiauv.tgnet.TLRPC$Message r6 = r1.messageOwner
            long r6 = r6.random_id
            int r8 = (r6 > r4 ? 1 : (r6 == r4 ? 0 : -1))
            if (r8 == 0) goto L_0x0104
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r6 = r11.dialogMessagesByRandomIds
            im.bclpbkiauv.tgnet.TLRPC$Message r7 = r1.messageOwner
            long r7 = r7.random_id
            r6.remove(r7)
        L_0x0104:
            r3 = 1
            if (r15 != r3) goto L_0x01bc
            if (r21 == 0) goto L_0x01bc
            if (r2 <= 0) goto L_0x01bc
            im.bclpbkiauv.tgnet.TLRPC$TL_messageService r6 = new im.bclpbkiauv.tgnet.TLRPC$TL_messageService
            r6.<init>()
            int r7 = r0.top_message
            r6.id = r7
            im.bclpbkiauv.messenger.UserConfig r7 = r33.getUserConfig()
            int r7 = r7.getClientUserId()
            long r7 = (long) r7
            int r22 = (r7 > r12 ? 1 : (r7 == r12 ? 0 : -1))
            if (r22 != 0) goto L_0x0123
            r7 = 1
            goto L_0x0124
        L_0x0123:
            r7 = 0
        L_0x0124:
            r6.out = r7
            im.bclpbkiauv.messenger.UserConfig r7 = r33.getUserConfig()
            int r7 = r7.getClientUserId()
            r6.from_id = r7
            int r7 = r6.flags
            r7 = r7 | 256(0x100, float:3.59E-43)
            r6.flags = r7
            im.bclpbkiauv.tgnet.TLRPC$TL_messageActionHistoryClear r7 = new im.bclpbkiauv.tgnet.TLRPC$TL_messageActionHistoryClear
            r7.<init>()
            r6.action = r7
            int r7 = r0.last_message_date
            r6.date = r7
            r7 = r21
            long r3 = (long) r7
            r6.dialog_id = r3
            if (r7 <= 0) goto L_0x0154
            im.bclpbkiauv.tgnet.TLRPC$TL_peerUser r3 = new im.bclpbkiauv.tgnet.TLRPC$TL_peerUser
            r3.<init>()
            r6.to_id = r3
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r6.to_id
            r3.user_id = r7
            goto L_0x017c
        L_0x0154:
            int r3 = -r7
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            im.bclpbkiauv.tgnet.TLRPC$Chat r3 = r11.getChat(r3)
            boolean r4 = im.bclpbkiauv.messenger.ChatObject.isChannel(r3)
            if (r4 == 0) goto L_0x0170
            im.bclpbkiauv.tgnet.TLRPC$TL_peerChannel r4 = new im.bclpbkiauv.tgnet.TLRPC$TL_peerChannel
            r4.<init>()
            r6.to_id = r4
            im.bclpbkiauv.tgnet.TLRPC$Peer r4 = r6.to_id
            int r8 = -r7
            r4.channel_id = r8
            goto L_0x017c
        L_0x0170:
            im.bclpbkiauv.tgnet.TLRPC$TL_peerChat r4 = new im.bclpbkiauv.tgnet.TLRPC$TL_peerChat
            r4.<init>()
            r6.to_id = r4
            im.bclpbkiauv.tgnet.TLRPC$Peer r4 = r6.to_id
            int r8 = -r7
            r4.chat_id = r8
        L_0x017c:
            im.bclpbkiauv.messenger.MessageObject r3 = new im.bclpbkiauv.messenger.MessageObject
            int r4 = r11.currentAccount
            java.util.ArrayList<java.lang.Long> r8 = r11.createdDialogIds
            r23 = r1
            r24 = r2
            long r1 = r6.dialog_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            boolean r1 = r8.contains(r1)
            r3.<init>(r4, r6, r1)
            r1 = r3
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r2.add(r1)
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r3.add(r6)
            r4 = 0
            r11.updateInterfaceWithMessages(r12, r2, r4)
            im.bclpbkiauv.messenger.MessagesStorage r25 = r33.getMessagesStorage()
            r27 = 0
            r28 = 1
            r29 = 0
            r30 = 0
            r31 = 0
            r26 = r3
            r25.putMessages((java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC.Message>) r26, (boolean) r27, (boolean) r28, (boolean) r29, (int) r30, (boolean) r31)
            goto L_0x01c5
        L_0x01bc:
            r23 = r1
            r24 = r2
            r7 = r21
            r1 = 0
            r0.top_message = r1
        L_0x01c5:
            r2 = r20
        L_0x01c7:
            boolean r1 = r11.dialogsInTransaction
            if (r1 != 0) goto L_0x0207
            if (r16 == 0) goto L_0x01e1
            im.bclpbkiauv.messenger.NotificationCenter r1 = r33.getNotificationCenter()
            int r4 = im.bclpbkiauv.messenger.NotificationCenter.dialogsNeedReload
            r3 = 1
            java.lang.Object[] r5 = new java.lang.Object[r3]
            java.lang.Boolean r6 = java.lang.Boolean.valueOf(r3)
            r8 = 0
            r5[r8] = r6
            r1.postNotificationName(r4, r5)
            goto L_0x0208
        L_0x01e1:
            r8 = 0
            im.bclpbkiauv.messenger.NotificationCenter r1 = r33.getNotificationCenter()
            int r4 = im.bclpbkiauv.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r5 = new java.lang.Object[r8]
            r1.postNotificationName(r4, r5)
            im.bclpbkiauv.messenger.NotificationCenter r1 = r33.getNotificationCenter()
            int r4 = im.bclpbkiauv.messenger.NotificationCenter.removeAllMessagesFromDialog
            r5 = 2
            java.lang.Object[] r5 = new java.lang.Object[r5]
            java.lang.Long r6 = java.lang.Long.valueOf(r34)
            r5[r8] = r6
            java.lang.Boolean r6 = java.lang.Boolean.valueOf(r8)
            r3 = 1
            r5[r3] = r6
            r1.postNotificationName(r4, r5)
            goto L_0x0208
        L_0x0207:
            r8 = 0
        L_0x0208:
            im.bclpbkiauv.messenger.MessagesStorage r1 = r33.getMessagesStorage()
            im.bclpbkiauv.messenger.DispatchQueue r1 = r1.getStorageQueue()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$WGCOMPbjIYyjfgBSHwv6tH7mMhU r4 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$WGCOMPbjIYyjfgBSHwv6tH7mMhU
            r4.<init>(r12)
            r1.postRunnable(r4)
            r5 = r2
            goto L_0x021b
        L_0x021a:
            r5 = r2
        L_0x021b:
            r0 = 3
            if (r15 != r0) goto L_0x021f
            return
        L_0x021f:
            if (r7 == 0) goto L_0x0321
            if (r40 != 0) goto L_0x0229
            im.bclpbkiauv.tgnet.TLRPC$InputPeer r0 = r11.getInputPeer(r7)
            r6 = r0
            goto L_0x022b
        L_0x0229:
            r6 = r40
        L_0x022b:
            if (r6 != 0) goto L_0x022e
            return
        L_0x022e:
            boolean r0 = r6 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_inputPeerChannel
            r1 = 2147483647(0x7fffffff, float:NaN)
            if (r0 == 0) goto L_0x023d
            if (r15 == 0) goto L_0x0238
            goto L_0x023d
        L_0x0238:
            r16 = r41
            r12 = r16
            goto L_0x0288
        L_0x023d:
            if (r5 <= 0) goto L_0x024a
            if (r5 == r1) goto L_0x024a
            android.util.LongSparseArray<java.lang.Integer> r0 = r11.deletedHistory
            java.lang.Integer r2 = java.lang.Integer.valueOf(r5)
            r0.put(r12, r2)
        L_0x024a:
            r16 = 0
            int r0 = (r41 > r16 ? 1 : (r41 == r16 ? 0 : -1))
            if (r0 != 0) goto L_0x0284
            r2 = 0
            im.bclpbkiauv.tgnet.NativeByteBuffer r0 = new im.bclpbkiauv.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0275 }
            int r4 = r6.getObjectSize()     // Catch:{ Exception -> 0x0275 }
            int r4 = r4 + 28
            r0.<init>((int) r4)     // Catch:{ Exception -> 0x0275 }
            r2 = r0
            r0 = 13
            r2.writeInt32(r0)     // Catch:{ Exception -> 0x0275 }
            r2.writeInt64(r12)     // Catch:{ Exception -> 0x0275 }
            r2.writeBool(r14)     // Catch:{ Exception -> 0x0275 }
            r2.writeInt32(r15)     // Catch:{ Exception -> 0x0275 }
            r2.writeInt32(r5)     // Catch:{ Exception -> 0x0275 }
            r2.writeBool(r9)     // Catch:{ Exception -> 0x0275 }
            r6.serializeToStream(r2)     // Catch:{ Exception -> 0x0275 }
            goto L_0x0279
        L_0x0275:
            r0 = move-exception
            im.bclpbkiauv.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0279:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            long r16 = r0.createPendingTask(r2)
            r12 = r16
            goto L_0x0288
        L_0x0284:
            r16 = r41
            r12 = r16
        L_0x0288:
            boolean r0 = r6 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_inputPeerChannel
            if (r0 == 0) goto L_0x02d9
            if (r15 != 0) goto L_0x029c
            r1 = 0
            int r0 = (r12 > r1 ? 1 : (r12 == r1 ? 0 : -1))
            if (r0 == 0) goto L_0x029b
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            r0.removePendingTask(r12)
        L_0x029b:
            return
        L_0x029c:
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_deleteHistory r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_deleteHistory
            r0.<init>()
            im.bclpbkiauv.tgnet.TLRPC$TL_inputChannel r2 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputChannel
            r2.<init>()
            r0.channel = r2
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r2 = r0.channel
            int r3 = r6.channel_id
            r2.channel_id = r3
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r2 = r0.channel
            r16 = r5
            long r4 = r6.access_hash
            r2.access_hash = r4
            if (r16 <= 0) goto L_0x02ba
            r1 = r16
        L_0x02ba:
            r0.max_id = r1
            im.bclpbkiauv.tgnet.ConnectionsManager r8 = r33.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$gD0xO9zYTfghjdy75LLKksUcvIc r5 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$gD0xO9zYTfghjdy75LLKksUcvIc
            r1 = r5
            r2 = r33
            r14 = 64
            r3 = r12
            r14 = r5
            r32 = r6
            r5 = r34
            r1.<init>(r3, r5)
            r1 = 64
            r8.sendRequest(r0, r14, r1)
            r13 = r7
            r17 = r10
            goto L_0x031e
        L_0x02d9:
            r16 = r5
            r32 = r6
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteHistory r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteHistory
            r0.<init>()
            r14 = r32
            r0.peer = r14
            if (r15 != 0) goto L_0x02ec
            r5 = 2147483647(0x7fffffff, float:NaN)
            goto L_0x02ee
        L_0x02ec:
            r5 = r16
        L_0x02ee:
            r0.max_id = r5
            if (r15 == 0) goto L_0x02f4
            r6 = 1
            goto L_0x02f5
        L_0x02f4:
            r6 = 0
        L_0x02f5:
            r0.just_clear = r6
            r0.revoke = r9
            r8 = r16
            r5 = r10
            r10 = r14
            im.bclpbkiauv.tgnet.ConnectionsManager r6 = r33.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$-y6LF4rd4gdJHOh23PGDxwwP9ps r3 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$-y6LF4rd4gdJHOh23PGDxwwP9ps
            r1 = r3
            r2 = r33
            r32 = r14
            r14 = r3
            r3 = r12
            r17 = r5
            r18 = r12
            r12 = r6
            r5 = r34
            r13 = r7
            r7 = r37
            r9 = r39
            r1.<init>(r3, r5, r7, r8, r9, r10)
            r1 = 64
            r12.sendRequest(r0, r14, r1)
        L_0x031e:
            r1 = r17
            goto L_0x0347
        L_0x0321:
            r16 = r5
            r13 = r7
            r17 = r10
            r1 = 1
            if (r15 != r1) goto L_0x033c
            im.bclpbkiauv.messenger.SecretChatHelper r0 = r33.getSecretChatHelper()
            java.lang.Integer r1 = java.lang.Integer.valueOf(r17)
            im.bclpbkiauv.tgnet.TLRPC$EncryptedChat r1 = r11.getEncryptedChat(r1)
            r2 = 0
            r0.sendClearHistoryMessage(r1, r2)
            r1 = r17
            goto L_0x0345
        L_0x033c:
            im.bclpbkiauv.messenger.SecretChatHelper r0 = r33.getSecretChatHelper()
            r1 = r17
            r0.declineSecretChat(r1)
        L_0x0345:
            r32 = r40
        L_0x0347:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.deleteDialog(long, boolean, int, int, boolean, im.bclpbkiauv.tgnet.TLRPC$InputPeer, long):void");
    }

    public /* synthetic */ void lambda$deleteDialog$85$MessagesController(long did) {
        AndroidUtilities.runOnUIThread(new Runnable(did) {
            private final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$84$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$84$MessagesController(long did) {
        getNotificationsController().removeNotificationsForDialog(did);
    }

    public /* synthetic */ void lambda$deleteDialog$87$MessagesController(long newTaskId, long did, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
        AndroidUtilities.runOnUIThread(new Runnable(did) {
            private final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$86$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$86$MessagesController(long did) {
        this.deletedHistory.remove(did);
    }

    public /* synthetic */ void lambda$deleteDialog$88$MessagesController(long newTaskId, long did, int onlyHistory, int max_id_delete_final, boolean revoke, TLRPC.InputPeer peerFinal, TLObject response, TLRPC.TL_error error) {
        long j = newTaskId;
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (error == null) {
            TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
            if (res.offset > 0) {
                deleteDialog(did, false, onlyHistory, max_id_delete_final, revoke, peerFinal, 0);
            }
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
            getMessagesStorage().onDeleteQueryComplete(did);
            return;
        }
        long j2 = did;
    }

    public void saveGif(Object parentObject, TLRPC.Document document) {
        if (parentObject != null && MessageObject.isGifDocument(document)) {
            TLRPC.TL_messages_saveGif req = new TLRPC.TL_messages_saveGif();
            req.id = new TLRPC.TL_inputDocument();
            req.id.id = document.id;
            req.id.access_hash = document.access_hash;
            req.id.file_reference = document.file_reference;
            if (req.id.file_reference == null) {
                req.id.file_reference = new byte[0];
            }
            req.unsave = false;
            getConnectionsManager().sendRequest(req, new RequestDelegate(parentObject, req) {
                private final /* synthetic */ Object f$1;
                private final /* synthetic */ TLRPC.TL_messages_saveGif f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$saveGif$89$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$saveGif$89$MessagesController(Object parentObject, TLRPC.TL_messages_saveGif req, TLObject response, TLRPC.TL_error error) {
        if (error != null && FileRefController.isFileRefError(error.text) && parentObject != null) {
            getFileRefController().requestReference(parentObject, req);
        }
    }

    public void saveRecentSticker(Object parentObject, TLRPC.Document document, boolean asMask) {
        if (parentObject != null && document != null) {
            TLRPC.TL_messages_saveRecentSticker req = new TLRPC.TL_messages_saveRecentSticker();
            req.id = new TLRPC.TL_inputDocument();
            req.id.id = document.id;
            req.id.access_hash = document.access_hash;
            req.id.file_reference = document.file_reference;
            if (req.id.file_reference == null) {
                req.id.file_reference = new byte[0];
            }
            req.unsave = false;
            req.attached = asMask;
            getConnectionsManager().sendRequest(req, new RequestDelegate(parentObject, req) {
                private final /* synthetic */ Object f$1;
                private final /* synthetic */ TLRPC.TL_messages_saveRecentSticker f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$saveRecentSticker$90$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$saveRecentSticker$90$MessagesController(Object parentObject, TLRPC.TL_messages_saveRecentSticker req, TLObject response, TLRPC.TL_error error) {
        if (error != null && FileRefController.isFileRefError(error.text) && parentObject != null) {
            getFileRefController().requestReference(parentObject, req);
        }
    }

    public void loadChannelParticipants(Integer chat_id) {
        if (!this.loadingFullParticipants.contains(chat_id) && !this.loadedFullParticipants.contains(chat_id)) {
            this.loadingFullParticipants.add(chat_id);
            TLRPC.TL_channels_getParticipants req = new TLRPC.TL_channels_getParticipants();
            req.channel = getInputChannel(chat_id.intValue());
            req.filter = new TLRPC.TL_channelParticipantsRecent();
            req.offset = 0;
            req.limit = 32;
            getConnectionsManager().sendRequest(req, new RequestDelegate(chat_id) {
                private final /* synthetic */ Integer f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadChannelParticipants$92$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadChannelParticipants$92$MessagesController(Integer chat_id, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(error, response, chat_id) {
            private final /* synthetic */ TLRPC.TL_error f$1;
            private final /* synthetic */ TLObject f$2;
            private final /* synthetic */ Integer f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$91$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$91$MessagesController(TLRPC.TL_error error, TLObject response, Integer chat_id) {
        if (error == null && (response instanceof TLRPC.TL_channels_channelParticipants)) {
            TLRPC.TL_channels_channelParticipants res = (TLRPC.TL_channels_channelParticipants) response;
            putUsers(res.users, false);
            getMessagesStorage().putUsersAndChats(res.users, (ArrayList<TLRPC.Chat>) null, true, true);
            getMessagesStorage().updateChannelUsers(chat_id.intValue(), res.participants);
            this.loadedFullParticipants.add(chat_id);
        }
        this.loadingFullParticipants.remove(chat_id);
    }

    public void processChatInfo(int chat_id, TLRPC.ChatFull info, ArrayList<TLRPC.User> usersArr, boolean fromCache, boolean force, boolean byChannelUsers, MessageObject pinnedMessageObject) {
        AndroidUtilities.runOnUIThread(new Runnable(fromCache, chat_id, byChannelUsers, force, info, usersArr, pinnedMessageObject) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ boolean f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ TLRPC.ChatFull f$5;
            private final /* synthetic */ ArrayList f$6;
            private final /* synthetic */ MessageObject f$7;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$processChatInfo$93$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
            }
        });
    }

    public /* synthetic */ void lambda$processChatInfo$93$MessagesController(boolean fromCache, int chat_id, boolean byChannelUsers, boolean force, TLRPC.ChatFull info, ArrayList usersArr, MessageObject pinnedMessageObject) {
        if (fromCache && chat_id > 0 && !byChannelUsers) {
            loadFullChat(chat_id, 0, force);
        }
        if (info != null) {
            if (this.fullChats.get(chat_id) == null) {
                this.fullChats.put(chat_id, info);
            }
            putUsers(usersArr, fromCache);
            if (info.stickerset != null) {
                getMediaDataController().getGroupStickerSetById(info.stickerset);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, info, 0, Boolean.valueOf(byChannelUsers), pinnedMessageObject);
        }
    }

    public void loadUserInfo(TLRPC.User user, boolean force, int classGuid) {
        getMessagesStorage().loadUserInfo(user, force, classGuid);
    }

    public void processUserInfo(TLRPC.User user, TLRPC.UserFull info, boolean fromCache, boolean force, MessageObject pinnedMessageObject, int classGuid) {
        AndroidUtilities.runOnUIThread(new Runnable(fromCache, user, classGuid, force, info, pinnedMessageObject) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ TLRPC.User f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ TLRPC.UserFull f$5;
            private final /* synthetic */ MessageObject f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$processUserInfo$94$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$processUserInfo$94$MessagesController(boolean fromCache, TLRPC.User user, int classGuid, boolean force, TLRPC.UserFull info, MessageObject pinnedMessageObject) {
        if (fromCache) {
            loadFullUser(user, classGuid, force);
        }
        if (info != null) {
            if (this.fullUsers.get(user.id) == null) {
                this.fullUsers.put(user.id, info);
                if (info.blocked) {
                    this.blockedUsers.put(user.id, 1);
                } else {
                    this.blockedUsers.delete(user.id);
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.userFullInfoDidLoad, Integer.valueOf(user.id), info, pinnedMessageObject);
        }
    }

    public void updateTimerProc() {
        int timeToRemove;
        long currentTime = System.currentTimeMillis();
        checkDeletingTask(false);
        checkReadTasks();
        if (getUserConfig().isClientActivated()) {
            if (getConnectionsManager().getPauseTime() != 0 || !ApplicationLoader.isScreenOn || ApplicationLoader.mainInterfacePausedStageQueue) {
                if (this.statusSettingState != 2 && !this.offlineSent && Math.abs(System.currentTimeMillis() - getConnectionsManager().getPauseTime()) >= AdaptiveTrackSelection.DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS) {
                    this.statusSettingState = 2;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    TLRPC.TL_account_updateStatus req = new TLRPC.TL_account_updateStatus();
                    req.offline = true;
                    this.statusRequest = getConnectionsManager().sendRequest(req, new RequestDelegate() {
                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$updateTimerProc$96$MessagesController(tLObject, tL_error);
                        }
                    });
                }
            } else if (ApplicationLoader.mainInterfacePausedStageQueueTime != 0 && Math.abs(ApplicationLoader.mainInterfacePausedStageQueueTime - System.currentTimeMillis()) > 1000 && this.statusSettingState != 1 && (this.lastStatusUpdateTime == 0 || Math.abs(System.currentTimeMillis() - this.lastStatusUpdateTime) >= 55000 || this.offlineSent)) {
                this.statusSettingState = 1;
                if (this.statusRequest != 0) {
                    getConnectionsManager().cancelRequest(this.statusRequest, true);
                }
                TLRPC.TL_account_updateStatus req2 = new TLRPC.TL_account_updateStatus();
                req2.offline = false;
                this.statusRequest = getConnectionsManager().sendRequest(req2, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$updateTimerProc$95$MessagesController(tLObject, tL_error);
                    }
                });
            }
            if (this.updatesQueueChannels.size() != 0) {
                for (int a = 0; a < this.updatesQueueChannels.size(); a++) {
                    int key = this.updatesQueueChannels.keyAt(a);
                    if (this.updatesStartWaitTimeChannels.valueAt(a) + 1500 < currentTime) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("QUEUE CHANNEL " + key + " UPDATES WAIT TIMEOUT - CHECK QUEUE");
                        }
                        processChannelsUpdatesQueue(key, 0);
                    }
                }
            }
            for (int a2 = 0; a2 < 3; a2++) {
                if (getUpdatesStartTime(a2) != 0 && getUpdatesStartTime(a2) + 1500 < currentTime) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(a2 + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
                    }
                    processUpdatesQueue(a2, 0);
                }
            }
        }
        if (Math.abs(System.currentTimeMillis() - this.lastViewsCheckTime) >= DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS) {
            this.lastViewsCheckTime = System.currentTimeMillis();
            if (this.channelViewsToSend.size() != 0) {
                int a3 = 0;
                while (a3 < this.channelViewsToSend.size()) {
                    int key2 = this.channelViewsToSend.keyAt(a3);
                    TLRPC.TL_messages_getMessagesViews req3 = new TLRPC.TL_messages_getMessagesViews();
                    req3.peer = getInputPeer(key2);
                    req3.id = this.channelViewsToSend.valueAt(a3);
                    req3.increment = a3 == 0;
                    getConnectionsManager().sendRequest(req3, new RequestDelegate(key2, req3) {
                        private final /* synthetic */ int f$1;
                        private final /* synthetic */ TLRPC.TL_messages_getMessagesViews f$2;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                        }

                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$updateTimerProc$98$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                        }
                    });
                    a3++;
                }
                this.channelViewsToSend.clear();
            }
            if (this.pollsToCheckSize > 0) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$100$MessagesController();
                    }
                });
            }
        }
        if (!this.onlinePrivacy.isEmpty()) {
            ArrayList<Integer> toRemove = null;
            int currentServerTime = getConnectionsManager().getCurrentTime();
            for (Map.Entry<Integer, Integer> entry : this.onlinePrivacy.entrySet()) {
                if (entry.getValue().intValue() < currentServerTime - 30) {
                    if (toRemove == null) {
                        toRemove = new ArrayList<>();
                    }
                    toRemove.add(entry.getKey());
                }
            }
            if (toRemove != null) {
                Iterator<Integer> it = toRemove.iterator();
                while (it.hasNext()) {
                    this.onlinePrivacy.remove(it.next());
                }
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$101$MessagesController();
                    }
                });
            }
        }
        if (this.shortPollChannels.size() != 0) {
            int a4 = 0;
            while (a4 < this.shortPollChannels.size()) {
                int key3 = this.shortPollChannels.keyAt(a4);
                if (((long) this.shortPollChannels.valueAt(a4)) < System.currentTimeMillis() / 1000) {
                    this.shortPollChannels.delete(key3);
                    a4--;
                    if (this.needShortPollChannels.indexOfKey(key3) >= 0) {
                        getChannelDifference(key3);
                    }
                }
                a4++;
            }
        }
        if (this.shortPollOnlines.size() != 0) {
            long time = SystemClock.uptimeMillis() / 1000;
            int a5 = 0;
            while (a5 < this.shortPollOnlines.size()) {
                int key4 = this.shortPollOnlines.keyAt(a5);
                if (((long) this.shortPollOnlines.valueAt(a5)) < time) {
                    if (this.needShortPollChannels.indexOfKey(key4) >= 0) {
                        this.shortPollOnlines.put(key4, (int) (300 + time));
                    } else {
                        this.shortPollOnlines.delete(key4);
                        a5--;
                    }
                    TLRPC.TL_messages_getOnlines req4 = new TLRPC.TL_messages_getOnlines();
                    req4.peer = getInputPeer(-key4);
                    getConnectionsManager().sendRequest(req4, new RequestDelegate(key4) {
                        private final /* synthetic */ int f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$updateTimerProc$103$MessagesController(this.f$1, tLObject, tL_error);
                        }
                    });
                }
                a5++;
            }
        }
        if (!this.printingUsers.isEmpty() || this.lastPrintingStringCount != this.printingUsers.size()) {
            boolean updated = false;
            ArrayList<Long> keys = new ArrayList<>(this.printingUsers.keySet());
            int b = 0;
            while (b < keys.size()) {
                long key5 = keys.get(b).longValue();
                ArrayList<PrintingUser> arr = this.printingUsers.get(Long.valueOf(key5));
                if (arr != null) {
                    int a6 = 0;
                    while (a6 < arr.size()) {
                        PrintingUser user = arr.get(a6);
                        if (user.action instanceof TLRPC.TL_sendMessageGamePlayAction) {
                            timeToRemove = UIMsg.m_AppUI.MSG_RADAR_SEARCH_RETURN_RESULT;
                        } else {
                            timeToRemove = 5900;
                        }
                        boolean updated2 = updated;
                        if (user.lastTime + ((long) timeToRemove) < currentTime) {
                            arr.remove(user);
                            a6--;
                            updated = true;
                        } else {
                            updated = updated2;
                        }
                        a6++;
                    }
                    boolean z = updated;
                }
                if (arr == null || arr.isEmpty()) {
                    this.printingUsers.remove(Long.valueOf(key5));
                    keys.remove(b);
                    b--;
                }
                b++;
            }
            updatePrintingStrings();
            if (updated) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$104$MessagesController();
                    }
                });
            }
        }
        if (Theme.selectedAutoNightType == 1 && Math.abs(currentTime - lastThemeCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.themeCheckRunnable);
            lastThemeCheckTime = currentTime;
        }
        if (getUserConfig().savedPasswordHash != null && Math.abs(currentTime - lastPasswordCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.passwordCheckRunnable);
            lastPasswordCheckTime = currentTime;
        }
        if (this.lastPushRegisterSendTime != 0 && Math.abs(SystemClock.elapsedRealtime() - this.lastPushRegisterSendTime) >= 10800000) {
            GcmPushListenerService.sendRegistrationToServer(SharedConfig.pushString);
        }
        getLocationController().update();
        lambda$checkProxyInfo$107$MessagesController(false);
        checkTosUpdate();
    }

    public /* synthetic */ void lambda$updateTimerProc$95$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            this.lastStatusUpdateTime = System.currentTimeMillis();
            this.offlineSent = false;
            this.statusSettingState = 0;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS;
            }
        }
        this.statusRequest = 0;
    }

    public /* synthetic */ void lambda$updateTimerProc$96$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            this.offlineSent = true;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS;
            }
        }
        this.statusRequest = 0;
    }

    public /* synthetic */ void lambda$updateTimerProc$98$MessagesController(int key, TLRPC.TL_messages_getMessagesViews req, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.Vector vector = (TLRPC.Vector) response;
            SparseArray<SparseIntArray> channelViews = new SparseArray<>();
            SparseIntArray array = channelViews.get(key);
            if (array == null) {
                array = new SparseIntArray();
                channelViews.put(key, array);
            }
            int a1 = 0;
            while (a1 < req.id.size() && a1 < vector.objects.size()) {
                array.put(req.id.get(a1).intValue(), ((Integer) vector.objects.get(a1)).intValue());
                a1++;
            }
            getMessagesStorage().putChannelViews(channelViews, req.peer instanceof TLRPC.TL_inputPeerChannel);
            AndroidUtilities.runOnUIThread(new Runnable(channelViews) {
                private final /* synthetic */ SparseArray f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$97$MessagesController(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$97$MessagesController(SparseArray channelViews) {
        getNotificationCenter().postNotificationName(NotificationCenter.didUpdatedMessagesViews, channelViews);
    }

    public /* synthetic */ void lambda$updateTimerProc$100$MessagesController() {
        long time = SystemClock.uptimeMillis();
        int a = 0;
        int N = this.pollsToCheck.size();
        while (a < N) {
            SparseArray<MessageObject> array = this.pollsToCheck.valueAt(a);
            if (array != null) {
                int b = 0;
                int N2 = array.size();
                while (b < N2) {
                    MessageObject messageObject = array.valueAt(b);
                    if (Math.abs(time - messageObject.pollLastCheckTime) >= 30000) {
                        messageObject.pollLastCheckTime = time;
                        TLRPC.TL_messages_getPollResults req = new TLRPC.TL_messages_getPollResults();
                        req.peer = getInputPeer((int) messageObject.getDialogId());
                        req.msg_id = messageObject.getId();
                        getConnectionsManager().sendRequest(req, new RequestDelegate() {
                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                MessagesController.this.lambda$null$99$MessagesController(tLObject, tL_error);
                            }
                        });
                    } else if (!messageObject.pollVisibleOnScreen) {
                        array.remove(messageObject.getId());
                        N2--;
                        b--;
                    }
                    b++;
                }
                if (array.size() == 0) {
                    LongSparseArray<SparseArray<MessageObject>> longSparseArray = this.pollsToCheck;
                    longSparseArray.remove(longSparseArray.keyAt(a));
                    N--;
                    a--;
                }
            }
            a++;
        }
        this.pollsToCheckSize = this.pollsToCheck.size();
    }

    public /* synthetic */ void lambda$null$99$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public /* synthetic */ void lambda$updateTimerProc$101$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    public /* synthetic */ void lambda$updateTimerProc$103$MessagesController(int key, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.TL_chatOnlines res = (TLRPC.TL_chatOnlines) response;
            getMessagesStorage().updateChatOnlineCount(key, res.onlines);
            AndroidUtilities.runOnUIThread(new Runnable(key, res) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ TLRPC.TL_chatOnlines f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$102$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$102$MessagesController(int key, TLRPC.TL_chatOnlines res) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatOnlineCountDidLoad, Integer.valueOf(key), Integer.valueOf(res.onlines));
    }

    public /* synthetic */ void lambda$updateTimerProc$104$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
    }

    private void checkTosUpdate() {
        if (this.nextTosCheckTime <= getConnectionsManager().getCurrentTime() && !this.checkingTosUpdate && getUserConfig().isClientActivated()) {
            this.checkingTosUpdate = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_help_getTermsOfServiceUpdate(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$checkTosUpdate$106$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkTosUpdate$106$MessagesController(TLObject response, TLRPC.TL_error error) {
        this.checkingTosUpdate = false;
        if (response instanceof TLRPC.TL_help_termsOfServiceUpdateEmpty) {
            this.nextTosCheckTime = ((TLRPC.TL_help_termsOfServiceUpdateEmpty) response).expires;
        } else if (response instanceof TLRPC.TL_help_termsOfServiceUpdate) {
            TLRPC.TL_help_termsOfServiceUpdate res = (TLRPC.TL_help_termsOfServiceUpdate) response;
            this.nextTosCheckTime = res.expires;
            AndroidUtilities.runOnUIThread(new Runnable(res) {
                private final /* synthetic */ TLRPC.TL_help_termsOfServiceUpdate f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$105$MessagesController(this.f$1);
                }
            });
        } else {
            this.nextTosCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
    }

    public /* synthetic */ void lambda$null$105$MessagesController(TLRPC.TL_help_termsOfServiceUpdate res) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 4, res.terms_of_service);
    }

    public void checkProxyInfo(boolean reset) {
        Utilities.stageQueue.postRunnable(new Runnable(reset) {
            private final /* synthetic */ boolean f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$checkProxyInfo$107$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: checkProxyInfoInternal */
    public void lambda$checkProxyInfo$107$MessagesController(boolean reset) {
        String str;
        if (reset && this.checkingProxyInfo) {
            this.checkingProxyInfo = false;
        }
        if ((reset || this.nextProxyInfoCheckTime <= getConnectionsManager().getCurrentTime()) && !this.checkingProxyInfo) {
            if (this.checkingProxyInfoRequestId != 0) {
                getConnectionsManager().cancelRequest(this.checkingProxyInfoRequestId, true);
                this.checkingProxyInfoRequestId = 0;
            }
            SharedPreferences preferences = getGlobalMainSettings();
            boolean enabled = preferences.getBoolean("proxy_enabled", false);
            String proxyAddress = preferences.getString("proxy_ip", "");
            String proxySecret = preferences.getString("proxy_secret", "");
            int removeCurrent = 0;
            if (!(this.proxyDialogId == 0 || (str = this.proxyDialogAddress) == null)) {
                if (!str.equals(proxyAddress + proxySecret)) {
                    removeCurrent = 1;
                }
            }
            this.lastCheckProxyId++;
            if (!enabled || TextUtils.isEmpty(proxyAddress) || TextUtils.isEmpty(proxySecret)) {
                removeCurrent = 2;
            } else {
                this.checkingProxyInfo = true;
                this.checkingProxyInfoRequestId = getConnectionsManager().sendRequest(new TLRPC.TL_help_getProxyData(), new RequestDelegate(this.lastCheckProxyId, proxyAddress, proxySecret) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ String f$2;
                    private final /* synthetic */ String f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$checkProxyInfoInternal$112$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tL_error);
                    }
                });
            }
            if (removeCurrent != 0) {
                this.proxyDialogId = 0;
                this.proxyDialogAddress = null;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.proxyDialogId).remove("proxyDialogAddress").commit();
                this.nextProxyInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
                if (removeCurrent == 2) {
                    this.checkingProxyInfo = false;
                    if (this.checkingProxyInfoRequestId != 0) {
                        getConnectionsManager().cancelRequest(this.checkingProxyInfoRequestId, true);
                        this.checkingProxyInfoRequestId = 0;
                    }
                }
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.removeProxyDialog();
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$checkProxyInfoInternal$112$MessagesController(int checkProxyId, String proxyAddress, String proxySecret, TLObject response, TLRPC.TL_error error) {
        boolean noDialog;
        long did;
        boolean noDialog2;
        TLObject tLObject = response;
        if (checkProxyId == this.lastCheckProxyId) {
            boolean noDialog3 = false;
            if (tLObject instanceof TLRPC.TL_help_proxyDataEmpty) {
                this.nextProxyInfoCheckTime = ((TLRPC.TL_help_proxyDataEmpty) tLObject).expires;
                noDialog = true;
                String str = proxyAddress;
            } else if (tLObject instanceof TLRPC.TL_help_proxyDataPromo) {
                TLRPC.TL_help_proxyDataPromo res = (TLRPC.TL_help_proxyDataPromo) tLObject;
                if (res.peer.user_id != 0) {
                    noDialog2 = false;
                    did = (long) res.peer.user_id;
                } else if (res.peer.chat_id != 0) {
                    long did2 = (long) (-res.peer.chat_id);
                    int a = 0;
                    while (true) {
                        if (a >= res.chats.size()) {
                            break;
                        }
                        TLRPC.Chat chat = res.chats.get(a);
                        if (chat.id != res.peer.chat_id) {
                            a++;
                        } else if (chat.kicked || chat.restricted) {
                            noDialog3 = true;
                        }
                    }
                    noDialog2 = noDialog3;
                    did = did2;
                } else {
                    long did3 = (long) (-res.peer.channel_id);
                    int a2 = 0;
                    while (true) {
                        if (a2 >= res.chats.size()) {
                            break;
                        }
                        TLRPC.Chat chat2 = res.chats.get(a2);
                        if (chat2.id != res.peer.channel_id) {
                            a2++;
                        } else if (chat2.kicked || chat2.restricted) {
                            noDialog2 = true;
                            did = did3;
                        }
                    }
                    noDialog2 = false;
                    did = did3;
                }
                this.proxyDialogId = did;
                this.proxyDialogAddress = proxyAddress + proxySecret;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.proxyDialogId).putString("proxyDialogAddress", this.proxyDialogAddress).commit();
                this.nextProxyInfoCheckTime = res.expires;
                if (!noDialog2) {
                    AndroidUtilities.runOnUIThread(new Runnable(did, res, checkProxyId) {
                        private final /* synthetic */ long f$1;
                        private final /* synthetic */ TLRPC.TL_help_proxyDataPromo f$2;
                        private final /* synthetic */ int f$3;

                        {
                            this.f$1 = r2;
                            this.f$2 = r4;
                            this.f$3 = r5;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$111$MessagesController(this.f$1, this.f$2, this.f$3);
                        }
                    });
                }
                noDialog = noDialog2;
            } else {
                String str2 = proxyAddress;
                this.nextProxyInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
                noDialog = true;
            }
            if (noDialog) {
                this.proxyDialogId = 0;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.proxyDialogId).remove("proxyDialogAddress").commit();
                this.checkingProxyInfoRequestId = 0;
                this.checkingProxyInfo = false;
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.removeProxyDialog();
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$null$111$MessagesController(long did, TLRPC.TL_help_proxyDataPromo res, int checkProxyId) {
        long j = did;
        TLRPC.TL_help_proxyDataPromo tL_help_proxyDataPromo = res;
        TLRPC.Dialog dialog = this.proxyDialog;
        if (!(dialog == null || j == dialog.id)) {
            removeProxyDialog();
        }
        TLRPC.Dialog dialog2 = this.dialogs_dict.get(j);
        this.proxyDialog = dialog2;
        if (dialog2 != null) {
            this.checkingProxyInfo = false;
            sortDialogs((SparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
            return;
        }
        SparseArray sparseArray = new SparseArray();
        SparseArray sparseArray2 = new SparseArray();
        for (int a = 0; a < tL_help_proxyDataPromo.users.size(); a++) {
            TLRPC.User u = tL_help_proxyDataPromo.users.get(a);
            sparseArray.put(u.id, u);
        }
        for (int a2 = 0; a2 < tL_help_proxyDataPromo.chats.size(); a2++) {
            TLRPC.Chat c = tL_help_proxyDataPromo.chats.get(a2);
            sparseArray2.put(c.id, c);
        }
        TLRPC.TL_messages_getPeerDialogs req1 = new TLRPC.TL_messages_getPeerDialogs();
        TLRPC.TL_inputDialogPeer peer = new TLRPC.TL_inputDialogPeer();
        if (tL_help_proxyDataPromo.peer.user_id != 0) {
            peer.peer = new TLRPC.TL_inputPeerUser();
            peer.peer.user_id = tL_help_proxyDataPromo.peer.user_id;
            TLRPC.User user = (TLRPC.User) sparseArray.get(tL_help_proxyDataPromo.peer.user_id);
            if (user != null) {
                peer.peer.access_hash = user.access_hash;
            }
        } else if (tL_help_proxyDataPromo.peer.chat_id != 0) {
            peer.peer = new TLRPC.TL_inputPeerChat();
            peer.peer.chat_id = tL_help_proxyDataPromo.peer.chat_id;
            TLRPC.Chat chat = (TLRPC.Chat) sparseArray2.get(tL_help_proxyDataPromo.peer.chat_id);
            if (chat != null) {
                peer.peer.access_hash = chat.access_hash;
            }
        } else {
            peer.peer = new TLRPC.TL_inputPeerChannel();
            peer.peer.channel_id = tL_help_proxyDataPromo.peer.channel_id;
            TLRPC.Chat chat2 = (TLRPC.Chat) sparseArray2.get(tL_help_proxyDataPromo.peer.channel_id);
            if (chat2 != null) {
                peer.peer.access_hash = chat2.access_hash;
            }
        }
        req1.peers.add(peer);
        this.checkingProxyInfoRequestId = getConnectionsManager().sendRequest(req1, new RequestDelegate(checkProxyId, res, did) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ TLRPC.TL_help_proxyDataPromo f$2;
            private final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$null$110$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tL_error);
            }
        });
    }

    public /* synthetic */ void lambda$null$110$MessagesController(int checkProxyId, TLRPC.TL_help_proxyDataPromo res, long did, TLObject response1, TLRPC.TL_error error1) {
        TLRPC.TL_help_proxyDataPromo tL_help_proxyDataPromo = res;
        if (checkProxyId == this.lastCheckProxyId) {
            this.checkingProxyInfoRequestId = 0;
            TLRPC.TL_messages_peerDialogs res2 = (TLRPC.TL_messages_peerDialogs) response1;
            if (res2 == null || res2.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$109$MessagesController();
                    }
                });
            } else {
                getMessagesStorage().putUsersAndChats(tL_help_proxyDataPromo.users, tL_help_proxyDataPromo.chats, true, true);
                TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                dialogs.chats = res2.chats;
                dialogs.users = res2.users;
                dialogs.dialogs = res2.dialogs;
                dialogs.messages = res2.messages;
                getMessagesStorage().putDialogs(dialogs, 2);
                AndroidUtilities.runOnUIThread(new Runnable(res, res2, did) {
                    private final /* synthetic */ TLRPC.TL_help_proxyDataPromo f$1;
                    private final /* synthetic */ TLRPC.TL_messages_peerDialogs f$2;
                    private final /* synthetic */ long f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$108$MessagesController(this.f$1, this.f$2, this.f$3);
                    }
                });
            }
            this.checkingProxyInfo = false;
        }
    }

    public /* synthetic */ void lambda$null$108$MessagesController(TLRPC.TL_help_proxyDataPromo res, TLRPC.TL_messages_peerDialogs res2, long did) {
        putUsers(res.users, false);
        putChats(res.chats, false);
        putUsers(res2.users, false);
        putChats(res2.chats, false);
        TLRPC.Dialog dialog = this.proxyDialog;
        if (dialog != null) {
            int lowerId = (int) dialog.id;
            if (lowerId < 0) {
                TLRPC.Chat chat = getChat(Integer.valueOf(-lowerId));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.proxyDialog);
                }
            } else {
                removeDialog(this.proxyDialog);
            }
        }
        TLRPC.Dialog dialog2 = res2.dialogs.get(0);
        this.proxyDialog = dialog2;
        dialog2.id = did;
        this.proxyDialog.folder_id = 0;
        if (DialogObject.isChannel(this.proxyDialog)) {
            this.channelsPts.put(-((int) this.proxyDialog.id), this.proxyDialog.pts);
        }
        Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(this.proxyDialog.id));
        if (value == null) {
            value = 0;
        }
        this.dialogs_read_inbox_max.put(Long.valueOf(this.proxyDialog.id), Integer.valueOf(Math.max(value.intValue(), this.proxyDialog.read_inbox_max_id)));
        Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(this.proxyDialog.id));
        if (value2 == null) {
            value2 = 0;
        }
        this.dialogs_read_outbox_max.put(Long.valueOf(this.proxyDialog.id), Integer.valueOf(Math.max(value2.intValue(), this.proxyDialog.read_outbox_max_id)));
        this.dialogs_dict.put(did, this.proxyDialog);
        if (!res2.messages.isEmpty()) {
            SparseArray<TLRPC.User> usersDict1 = new SparseArray<>();
            SparseArray<TLRPC.Chat> chatsDict1 = new SparseArray<>();
            for (int a = 0; a < res2.users.size(); a++) {
                TLRPC.User u = res2.users.get(a);
                usersDict1.put(u.id, u);
            }
            for (int a2 = 0; a2 < res2.chats.size(); a2++) {
                TLRPC.Chat c = res2.chats.get(a2);
                chatsDict1.put(c.id, c);
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, res2.messages.get(0), usersDict1, chatsDict1, false);
            this.dialogMessage.put(did, messageObject);
            if (this.proxyDialog.last_message_date == 0) {
                this.proxyDialog.last_message_date = messageObject.messageOwner.date;
            }
        }
        sortDialogs((SparseArray<TLRPC.Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
    }

    public /* synthetic */ void lambda$null$109$MessagesController() {
        TLRPC.Dialog dialog = this.proxyDialog;
        if (dialog != null) {
            int lowerId = (int) dialog.id;
            if (lowerId < 0) {
                TLRPC.Chat chat = getChat(Integer.valueOf(-lowerId));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.proxyDialog);
                }
            } else {
                removeDialog(this.proxyDialog);
            }
            this.proxyDialog = null;
            sortDialogs((SparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public void removeProxyDialog() {
        TLRPC.Dialog dialog = this.proxyDialog;
        if (dialog != null) {
            int lowerId = (int) dialog.id;
            if (lowerId < 0) {
                TLRPC.Chat chat = getChat(Integer.valueOf(-lowerId));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.proxyDialog);
                }
            } else {
                removeDialog(this.proxyDialog);
            }
            this.proxyDialog = null;
            sortDialogs((SparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public boolean isProxyDialog(long did, boolean checkLeft) {
        TLRPC.Dialog dialog = this.proxyDialog;
        return dialog != null && dialog.id == did && (!checkLeft || this.isLeftProxyChannel);
    }

    private String getUserNameForTyping(TLRPC.User user) {
        if (user == null) {
            return "";
        }
        if (user.first_name != null && user.first_name.length() > 0) {
            return user.first_name;
        }
        if (user.last_name == null || user.last_name.length() <= 0) {
            return "";
        }
        return user.last_name;
    }

    private void updatePrintingStrings() {
        int i;
        char c;
        int i2;
        int i3;
        LongSparseArray<CharSequence> newPrintingStrings = new LongSparseArray<>();
        LongSparseArray<Integer> newPrintingStringsTypes = new LongSparseArray<>();
        for (Map.Entry<Long, ArrayList<PrintingUser>> entry : this.printingUsers.entrySet()) {
            long key = entry.getKey().longValue();
            ArrayList<PrintingUser> arr = entry.getValue();
            int lower_id = (int) key;
            if (lower_id > 0 || lower_id == 0) {
                i = 0;
            } else if (arr.size() == 1) {
                i = 0;
            } else {
                int count = 0;
                StringBuilder label = new StringBuilder();
                Iterator<PrintingUser> it = arr.iterator();
                while (it.hasNext()) {
                    TLRPC.User user = getUser(Integer.valueOf(it.next().userId));
                    if (user != null) {
                        if (label.length() != 0) {
                            label.append(", ");
                        }
                        label.append(getUserNameForTyping(user));
                        count++;
                    }
                    if (count == 2) {
                        break;
                    }
                }
                if (label.length() != 0) {
                    if (count == 1) {
                        newPrintingStrings.put(key, LocaleController.formatString("IsTypingGroup", R.string.IsTypingGroup, label.toString()));
                        i3 = 0;
                    } else if (arr.size() > 2) {
                        String plural = LocaleController.getPluralString("AndMoreTypingGroup", arr.size() - 2);
                        try {
                            newPrintingStrings.put(key, String.format(plural, new Object[]{label.toString(), Integer.valueOf(arr.size() - 2)}));
                        } catch (Exception e) {
                            newPrintingStrings.put(key, "LOC_ERR: AndMoreTypingGroup");
                        }
                        i3 = 0;
                    } else {
                        i3 = 0;
                        newPrintingStrings.put(key, LocaleController.formatString("AreTypingGroup", R.string.AreTypingGroup, label.toString()));
                    }
                    newPrintingStringsTypes.put(key, Integer.valueOf(i3));
                }
            }
            PrintingUser pu = arr.get(i);
            TLRPC.User user2 = getUser(Integer.valueOf(pu.userId));
            if (user2 != null) {
                if (pu.action instanceof TLRPC.TL_sendMessageRecordAudioAction) {
                    if (lower_id < 0) {
                        newPrintingStrings.put(key, LocaleController.formatString("IsRecordingAudio", R.string.IsRecordingAudio, getUserNameForTyping(user2)));
                    } else {
                        newPrintingStrings.put(key, LocaleController.getString("RecordingAudio", R.string.RecordingAudio));
                    }
                    newPrintingStringsTypes.put(key, 1);
                } else if ((pu.action instanceof TLRPC.TL_sendMessageRecordRoundAction) || (pu.action instanceof TLRPC.TL_sendMessageUploadRoundAction)) {
                    if (lower_id < 0) {
                        newPrintingStrings.put(key, LocaleController.formatString("IsRecordingRound", R.string.IsRecordingRound, getUserNameForTyping(user2)));
                    } else {
                        newPrintingStrings.put(key, LocaleController.getString("RecordingRound", R.string.RecordingRound));
                    }
                    newPrintingStringsTypes.put(key, 4);
                } else if (pu.action instanceof TLRPC.TL_sendMessageUploadAudioAction) {
                    if (lower_id < 0) {
                        newPrintingStrings.put(key, LocaleController.formatString("IsSendingAudio", R.string.IsSendingAudio, getUserNameForTyping(user2)));
                    } else {
                        newPrintingStrings.put(key, LocaleController.getString("SendingAudio", R.string.SendingAudio));
                    }
                    newPrintingStringsTypes.put(key, 2);
                } else {
                    if (pu.action instanceof TLRPC.TL_sendMessageUploadVideoAction) {
                        c = 0;
                    } else if (pu.action instanceof TLRPC.TL_sendMessageRecordVideoAction) {
                        c = 0;
                    } else if (pu.action instanceof TLRPC.TL_sendMessageUploadDocumentAction) {
                        if (lower_id < 0) {
                            newPrintingStrings.put(key, LocaleController.formatString("IsSendingFile", R.string.IsSendingFile, getUserNameForTyping(user2)));
                        } else {
                            newPrintingStrings.put(key, LocaleController.getString("SendingFile", R.string.SendingFile));
                        }
                        newPrintingStringsTypes.put(key, 2);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageUploadPhotoAction) {
                        if (lower_id < 0) {
                            newPrintingStrings.put(key, LocaleController.formatString("IsSendingPhoto", R.string.IsSendingPhoto, getUserNameForTyping(user2)));
                        } else {
                            newPrintingStrings.put(key, LocaleController.getString("SendingPhoto", R.string.SendingPhoto));
                        }
                        newPrintingStringsTypes.put(key, 2);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageGamePlayAction) {
                        if (lower_id < 0) {
                            newPrintingStrings.put(key, LocaleController.formatString("IsSendingGame", R.string.IsSendingGame, getUserNameForTyping(user2)));
                        } else {
                            newPrintingStrings.put(key, LocaleController.getString("SendingGame", R.string.SendingGame));
                        }
                        newPrintingStringsTypes.put(key, 3);
                    } else {
                        if (lower_id < 0) {
                            i2 = 0;
                            newPrintingStrings.put(key, LocaleController.formatString("IsTypingGroup", R.string.IsTypingGroup, getUserNameForTyping(user2)));
                        } else {
                            i2 = 0;
                            newPrintingStrings.put(key, LocaleController.getString("Typing", R.string.Typing));
                        }
                        newPrintingStringsTypes.put(key, Integer.valueOf(i2));
                    }
                    if (lower_id < 0) {
                        Object[] objArr = new Object[1];
                        objArr[c] = getUserNameForTyping(user2);
                        newPrintingStrings.put(key, LocaleController.formatString("IsSendingVideo", R.string.IsSendingVideo, objArr));
                    } else {
                        newPrintingStrings.put(key, LocaleController.getString("SendingVideoStatus", R.string.SendingVideoStatus));
                    }
                    newPrintingStringsTypes.put(key, 2);
                }
            }
        }
        this.lastPrintingStringCount = newPrintingStrings.size();
        AndroidUtilities.runOnUIThread(new Runnable(newPrintingStrings, newPrintingStringsTypes) {
            private final /* synthetic */ LongSparseArray f$1;
            private final /* synthetic */ LongSparseArray f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$updatePrintingStrings$113$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$updatePrintingStrings$113$MessagesController(LongSparseArray newPrintingStrings, LongSparseArray newPrintingStringsTypes) {
        this.printingStrings = newPrintingStrings;
        this.printingStringsTypes = newPrintingStringsTypes;
    }

    public void cancelTyping(int action, long dialog_id) {
        LongSparseArray<Boolean> typings = this.sendingTypings.get(action);
        if (typings != null) {
            typings.remove(dialog_id);
        }
    }

    public void sendTyping(long dialog_id, int action, int classGuid) {
        TLRPC.Chat chat;
        if (dialog_id != 0) {
            LongSparseArray<Boolean> typings = this.sendingTypings.get(action);
            if (typings == null || typings.get(dialog_id) == null) {
                if (typings == null) {
                    typings = new LongSparseArray<>();
                    this.sendingTypings.put(action, typings);
                }
                int lower_part = (int) dialog_id;
                int high_id = (int) (dialog_id >> 32);
                if (lower_part != 0) {
                    TLRPC.TL_messages_setTyping req = new TLRPC.TL_messages_setTyping();
                    req.peer = getInputPeer(lower_part);
                    if ((!(req.peer instanceof TLRPC.TL_inputPeerChannel) || ((chat = getChat(Integer.valueOf(req.peer.channel_id))) != null && chat.megagroup)) && req.peer != null) {
                        if (action == 0) {
                            req.action = new TLRPC.TL_sendMessageTypingAction();
                        } else if (action == 1) {
                            req.action = new TLRPC.TL_sendMessageRecordAudioAction();
                        } else if (action == 2) {
                            req.action = new TLRPC.TL_sendMessageCancelAction();
                        } else if (action == 3) {
                            req.action = new TLRPC.TL_sendMessageUploadDocumentAction();
                        } else if (action == 4) {
                            req.action = new TLRPC.TL_sendMessageUploadPhotoAction();
                        } else if (action == 5) {
                            req.action = new TLRPC.TL_sendMessageUploadVideoAction();
                        } else if (action == 6) {
                            req.action = new TLRPC.TL_sendMessageGamePlayAction();
                        } else if (action == 7) {
                            req.action = new TLRPC.TL_sendMessageRecordRoundAction();
                        } else if (action == 8) {
                            req.action = new TLRPC.TL_sendMessageUploadRoundAction();
                        } else if (action == 9) {
                            req.action = new TLRPC.TL_sendMessageUploadAudioAction();
                        }
                        typings.put(dialog_id, true);
                        int reqId = getConnectionsManager().sendRequest(req, new RequestDelegate(action, dialog_id) {
                            private final /* synthetic */ int f$1;
                            private final /* synthetic */ long f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                            }

                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                MessagesController.this.lambda$sendTyping$115$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                            }
                        }, 2);
                        if (classGuid != 0) {
                            getConnectionsManager().bindRequestToGuid(reqId, classGuid);
                        }
                    }
                } else if (action == 0) {
                    TLRPC.EncryptedChat chat2 = getEncryptedChat(Integer.valueOf(high_id));
                    if (chat2.auth_key != null && chat2.auth_key.length > 1 && (chat2 instanceof TLRPC.TL_encryptedChat)) {
                        TLRPC.TL_messages_setEncryptedTyping req2 = new TLRPC.TL_messages_setEncryptedTyping();
                        req2.peer = new TLRPC.TL_inputEncryptedChat();
                        req2.peer.chat_id = chat2.id;
                        req2.peer.access_hash = chat2.access_hash;
                        req2.typing = true;
                        typings.put(dialog_id, true);
                        int reqId2 = getConnectionsManager().sendRequest(req2, new RequestDelegate(action, dialog_id) {
                            private final /* synthetic */ int f$1;
                            private final /* synthetic */ long f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                            }

                            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                                MessagesController.this.lambda$sendTyping$117$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                            }
                        }, 2);
                        if (classGuid != 0) {
                            getConnectionsManager().bindRequestToGuid(reqId2, classGuid);
                        }
                    }
                }
            }
        }
    }

    public /* synthetic */ void lambda$sendTyping$115$MessagesController(int action, long dialog_id, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(action, dialog_id) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$114$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$114$MessagesController(int action, long dialog_id) {
        LongSparseArray<Boolean> typings1 = this.sendingTypings.get(action);
        if (typings1 != null) {
            typings1.remove(dialog_id);
        }
    }

    public /* synthetic */ void lambda$sendTyping$117$MessagesController(int action, long dialog_id, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(action, dialog_id) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$116$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$116$MessagesController(int action, long dialog_id) {
        LongSparseArray<Boolean> typings12 = this.sendingTypings.get(action);
        if (typings12 != null) {
            typings12.remove(dialog_id);
        }
    }

    /* access modifiers changed from: protected */
    public void removeDeletedMessagesFromArray(long dialog_id, ArrayList<TLRPC.Message> messages) {
        int maxDeletedId = this.deletedHistory.get(dialog_id, 0).intValue();
        if (maxDeletedId != 0) {
            int a = 0;
            int N = messages.size();
            while (a < N) {
                if (messages.get(a).id <= maxDeletedId) {
                    messages.remove(a);
                    a--;
                    N--;
                }
                a++;
            }
        }
    }

    public void loadMessages(long dialog_id, int count, int max_id, int offset_date, boolean fromCache, int midDate, int classGuid, int load_type, int last_message_id, boolean isChannel, boolean scheduled, int loadIndex) {
        loadMessages(dialog_id, count, max_id, offset_date, fromCache, midDate, classGuid, load_type, last_message_id, isChannel, scheduled, loadIndex, 0, 0, 0, false, 0);
    }

    public void loadMessages(long dialog_id, int count, int max_id, int offset_date, boolean fromCache, int midDate, int classGuid, int load_type, int last_message_id, boolean isChannel, boolean scheduled, int loadIndex, int first_unread, int unread_count, int last_date, boolean queryFromServer, int mentionsCount) {
        loadMessagesInternal(dialog_id, count, max_id, offset_date, fromCache, midDate, classGuid, load_type, last_message_id, isChannel, scheduled, loadIndex, first_unread, unread_count, last_date, queryFromServer, mentionsCount, true);
    }

    /*  JADX ERROR: JadxRuntimeException in pass: CodeShrinkVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Don't wrap MOVE or CONST insns: 0x007d: MOVE  (r13v3 int) = (r33v0 'load_type' int)
        	at jadx.core.dex.instructions.args.InsnArg.wrapArg(InsnArg.java:164)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.assignInline(CodeShrinkVisitor.java:133)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.checkInline(CodeShrinkVisitor.java:118)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.shrinkBlock(CodeShrinkVisitor.java:65)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.shrinkMethod(CodeShrinkVisitor.java:43)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.visit(CodeShrinkVisitor.java:35)
        */
    private void loadMessagesInternal(long r25, int r27, int r28, int r29, boolean r30, int r31, int r32, int r33, int r34, boolean r35, boolean r36, int r37, int r38, int r39, int r40, boolean r41, int r42, boolean r43) {
        /*
            r24 = this;
            r15 = r24
            r13 = r25
            r12 = r27
            r11 = r28
            r10 = r32
            r9 = r33
            int r8 = (int) r13
            if (r30 != 0) goto L_0x017f
            if (r8 != 0) goto L_0x0016
            r17 = r8
            r12 = r10
            goto L_0x0182
        L_0x0016:
            if (r36 == 0) goto L_0x0076
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_getScheduledHistory r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_getScheduledHistory
            r0.<init>()
            r7 = r0
            im.bclpbkiauv.tgnet.TLRPC$InputPeer r0 = r15.getInputPeer(r8)
            r7.peer = r0
            r6 = r31
            r7.hash = r6
            int r0 = r15.currentAccount
            im.bclpbkiauv.tgnet.ConnectionsManager r4 = im.bclpbkiauv.tgnet.ConnectionsManager.getInstance(r0)
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$bUUHicTZPu_SHnOiMtkb48BBuYI r5 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$bUUHicTZPu_SHnOiMtkb48BBuYI
            r0 = r5
            r1 = r24
            r2 = r28
            r3 = r29
            r17 = r4
            r18 = r5
            r4 = r25
            r6 = r27
            r19 = r7
            r7 = r32
            r20 = r8
            r8 = r38
            r9 = r34
            r10 = r39
            r11 = r40
            r12 = r33
            r13 = r35
            r14 = r37
            r15 = r41
            r16 = r42
            r0.<init>(r1, r2, r3, r4, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16)
            r1 = r17
            r2 = r18
            r0 = r19
            int r1 = r1.sendRequest(r0, r2)
            r15 = r24
            int r2 = r15.currentAccount
            im.bclpbkiauv.tgnet.ConnectionsManager r2 = im.bclpbkiauv.tgnet.ConnectionsManager.getInstance(r2)
            r14 = r32
            r2.bindRequestToGuid(r1, r14)
            r12 = r14
            r17 = r20
            goto L_0x019d
        L_0x0076:
            r20 = r8
            r14 = r10
            r0 = 3
            r1 = 2
            if (r43 == 0) goto L_0x00d6
            r13 = r33
            if (r13 == r0) goto L_0x0083
            if (r13 != r1) goto L_0x00d6
        L_0x0083:
            if (r34 != 0) goto L_0x00d6
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_getPeerDialogs r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_getPeerDialogs
            r0.<init>()
            r12 = r0
            r10 = r25
            int r0 = (int) r10
            im.bclpbkiauv.tgnet.TLRPC$InputPeer r9 = r15.getInputPeer(r0)
            im.bclpbkiauv.tgnet.TLRPC$TL_inputDialogPeer r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputDialogPeer
            r0.<init>()
            r8 = r0
            r8.peer = r9
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$InputDialogPeer> r0 = r12.peers
            r0.add(r8)
            im.bclpbkiauv.tgnet.ConnectionsManager r7 = r24.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$I5v-loPgl2qU8r7yZuHpXYprK30 r6 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$I5v-loPgl2qU8r7yZuHpXYprK30
            r0 = r6
            r1 = r24
            r2 = r25
            r4 = r27
            r5 = r28
            r15 = r6
            r6 = r29
            r16 = r15
            r15 = r7
            r7 = r31
            r17 = r8
            r8 = r32
            r18 = r9
            r9 = r33
            r10 = r35
            r11 = r37
            r19 = r15
            r15 = r12
            r12 = r38
            r13 = r40
            r14 = r41
            r0.<init>(r1, r2, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)
            r1 = r16
            r0 = r19
            r0.sendRequest(r15, r1)
            return
        L_0x00d6:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_getHistory r2 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_getHistory
            r2.<init>()
            r15 = r2
            r14 = r24
            r13 = r20
            im.bclpbkiauv.tgnet.TLRPC$InputPeer r2 = r14.getInputPeer(r13)
            r15.peer = r2
            r2 = 4
            r12 = r33
            if (r12 != r2) goto L_0x00f5
            r11 = r27
            int r0 = -r11
            int r0 = r0 + 5
            r15.add_offset = r0
            r10 = r28
            goto L_0x0133
        L_0x00f5:
            r11 = r27
            if (r12 != r0) goto L_0x0100
            int r0 = -r11
            int r0 = r0 / r1
            r15.add_offset = r0
            r10 = r28
            goto L_0x0133
        L_0x0100:
            r0 = 1
            if (r12 != r0) goto L_0x010a
            int r1 = -r11
            int r1 = r1 - r0
            r15.add_offset = r1
            r10 = r28
            goto L_0x0133
        L_0x010a:
            if (r12 != r1) goto L_0x0116
            r10 = r28
            if (r10 == 0) goto L_0x0118
            int r0 = -r11
            int r0 = r0 + 6
            r15.add_offset = r0
            goto L_0x0133
        L_0x0116:
            r10 = r28
        L_0x0118:
            if (r13 >= 0) goto L_0x0133
            if (r10 == 0) goto L_0x0133
            int r1 = -r13
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            im.bclpbkiauv.tgnet.TLRPC$Chat r1 = r14.getChat(r1)
            boolean r2 = im.bclpbkiauv.messenger.ChatObject.isChannel(r1)
            if (r2 == 0) goto L_0x0133
            r2 = -1
            r15.add_offset = r2
            int r2 = r15.limit
            int r2 = r2 + r0
            r15.limit = r2
        L_0x0133:
            r15.limit = r11
            r15.offset_id = r10
            r9 = r29
            r15.offset_date = r9
            im.bclpbkiauv.tgnet.ConnectionsManager r8 = r24.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$XcLiCgYCWCjGME8bfcM5M56wOms r7 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$XcLiCgYCWCjGME8bfcM5M56wOms
            r0 = r7
            r1 = r24
            r2 = r25
            r4 = r27
            r5 = r28
            r6 = r29
            r21 = r7
            r7 = r32
            r22 = r8
            r8 = r38
            r9 = r34
            r10 = r39
            r11 = r40
            r12 = r33
            r17 = r13
            r13 = r35
            r14 = r37
            r23 = r15
            r15 = r41
            r16 = r42
            r0.<init>(r1, r2, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16)
            r2 = r21
            r1 = r22
            r0 = r23
            int r1 = r1.sendRequest(r0, r2)
            im.bclpbkiauv.tgnet.ConnectionsManager r2 = r24.getConnectionsManager()
            r12 = r32
            r2.bindRequestToGuid(r1, r12)
            goto L_0x019d
        L_0x017f:
            r17 = r8
            r12 = r10
        L_0x0182:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r24.getMessagesStorage()
            r1 = r25
            r3 = r27
            r4 = r28
            r5 = r29
            r6 = r31
            r7 = r32
            r8 = r33
            r9 = r35
            r10 = r36
            r11 = r37
            r0.getMessages(r1, r3, r4, r5, r6, r7, r8, r9, r10, r11)
        L_0x019d:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.loadMessagesInternal(long, int, int, int, boolean, int, int, int, int, boolean, boolean, int, int, int, int, boolean, int, boolean):void");
    }

    public /* synthetic */ void lambda$loadMessagesInternal$118$MessagesController(int max_id, int offset_date, long dialog_id, int count, int classGuid, int first_unread, int last_message_id, int unread_count, int last_date, int load_type, boolean isChannel, int loadIndex, boolean queryFromServer, int mentionsCount, TLObject response, TLRPC.TL_error error) {
        int mid;
        int i = offset_date;
        if (response != null) {
            TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
            if (!(res instanceof TLRPC.TL_messages_messagesNotModified)) {
                int mid2 = max_id;
                if (i != 0 && !res.messages.isEmpty()) {
                    int mid3 = res.messages.get(res.messages.size() - 1).id;
                    int a = res.messages.size() - 1;
                    while (true) {
                        if (a < 0) {
                            mid = mid3;
                            break;
                        }
                        TLRPC.Message message = res.messages.get(a);
                        if (message.date > i) {
                            mid = message.id;
                            break;
                        }
                        a--;
                    }
                } else {
                    mid = mid2;
                }
                TLRPC.messages_Messages messages_messages = res;
                processLoadedMessages(res, dialog_id, count, mid, offset_date, false, classGuid, first_unread, last_message_id, unread_count, last_date, load_type, isChannel, false, true, loadIndex, queryFromServer, mentionsCount);
            }
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$119$MessagesController(long dialog_id, int count, int max_id, int offset_date, int minDate, int classGuid, int load_type, boolean isChannel, int loadIndex, int first_unread, int last_date, boolean queryFromServer, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            if (!res.dialogs.isEmpty()) {
                TLRPC.Dialog dialog = res.dialogs.get(0);
                if (dialog.top_message != 0) {
                    TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                    dialogs.chats = res.chats;
                    dialogs.users = res.users;
                    dialogs.dialogs = res.dialogs;
                    dialogs.messages = res.messages;
                    getMessagesStorage().putDialogs(dialogs, 0);
                }
                loadMessagesInternal(dialog_id, count, max_id, offset_date, false, minDate, classGuid, load_type, dialog.top_message, isChannel, false, loadIndex, first_unread, dialog.unread_count, last_date, queryFromServer, dialog.unread_mentions_count, false);
                return;
            }
            loadMessagesInternal(dialog_id, count, max_id, offset_date, false, minDate, classGuid, load_type, -1, isChannel, false, loadIndex, first_unread, res.state.unread_count, last_date, queryFromServer, 0, false);
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$120$MessagesController(long dialog_id, int count, int max_id, int offset_date, int classGuid, int first_unread, int last_message_id, int unread_count, int last_date, int load_type, boolean isChannel, int loadIndex, boolean queryFromServer, int mentionsCount, TLObject response, TLRPC.TL_error error) {
        int mid;
        int i = offset_date;
        if (response != null) {
            TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
            removeDeletedMessagesFromArray(dialog_id, res.messages);
            if (res.messages.size() > count) {
                res.messages.remove(0);
            }
            int mid2 = max_id;
            if (i != 0 && !res.messages.isEmpty()) {
                int mid3 = res.messages.get(res.messages.size() - 1).id;
                int a = res.messages.size() - 1;
                while (true) {
                    if (a < 0) {
                        mid = mid3;
                        break;
                    }
                    TLRPC.Message message = res.messages.get(a);
                    if (message.date > i) {
                        mid = message.id;
                        break;
                    }
                    a--;
                }
            } else {
                mid = mid2;
            }
            TLRPC.messages_Messages messages_messages = res;
            processLoadedMessages(res, dialog_id, count, mid, offset_date, false, classGuid, first_unread, last_message_id, unread_count, last_date, load_type, isChannel, false, false, loadIndex, queryFromServer, mentionsCount);
        }
    }

    public void reloadWebPages(long dialog_id, HashMap<String, ArrayList<MessageObject>> webpagesToReload, boolean scheduled) {
        HashMap<String, ArrayList<MessageObject>> map = scheduled ? this.reloadingScheduledWebpages : this.reloadingWebpages;
        LongSparseArray<ArrayList<MessageObject>> array = scheduled ? this.reloadingScheduledWebpagesPending : this.reloadingWebpagesPending;
        for (Map.Entry<String, ArrayList<MessageObject>> entry : webpagesToReload.entrySet()) {
            String url = entry.getKey();
            ArrayList<MessageObject> messages = entry.getValue();
            ArrayList<MessageObject> arrayList = map.get(url);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                map.put(url, arrayList);
            }
            arrayList.addAll(messages);
            TLRPC.TL_messages_getWebPagePreview req = new TLRPC.TL_messages_getWebPagePreview();
            req.message = url;
            $$Lambda$MessagesController$GrCSumCgkH8pj5MBq1rUkcqSWbw r8 = r0;
            HashMap<String, ArrayList<MessageObject>> map2 = map;
            ConnectionsManager connectionsManager = getConnectionsManager();
            $$Lambda$MessagesController$GrCSumCgkH8pj5MBq1rUkcqSWbw r0 = new RequestDelegate(map, url, array, dialog_id, scheduled) {
                private final /* synthetic */ HashMap f$1;
                private final /* synthetic */ String f$2;
                private final /* synthetic */ LongSparseArray f$3;
                private final /* synthetic */ long f$4;
                private final /* synthetic */ boolean f$5;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r7;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$reloadWebPages$122$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, tLObject, tL_error);
                }
            };
            connectionsManager.sendRequest(req, r8);
            map = map2;
        }
    }

    public /* synthetic */ void lambda$reloadWebPages$122$MessagesController(HashMap map, String url, LongSparseArray array, long dialog_id, boolean scheduled, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(map, url, response, array, dialog_id, scheduled) {
            private final /* synthetic */ HashMap f$1;
            private final /* synthetic */ String f$2;
            private final /* synthetic */ TLObject f$3;
            private final /* synthetic */ LongSparseArray f$4;
            private final /* synthetic */ long f$5;
            private final /* synthetic */ boolean f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$null$121$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$121$MessagesController(HashMap map, String url, TLObject response, LongSparseArray array, long dialog_id, boolean scheduled) {
        TLObject tLObject = response;
        ArrayList<MessageObject> arrayList1 = (ArrayList) map.remove(url);
        if (arrayList1 != null) {
            TLRPC.TL_messages_messages messagesRes = new TLRPC.TL_messages_messages();
            if (!(tLObject instanceof TLRPC.TL_messageMediaWebPage)) {
                for (int a = 0; a < arrayList1.size(); a++) {
                    arrayList1.get(a).messageOwner.media.webpage = new TLRPC.TL_webPageEmpty();
                    messagesRes.messages.add(arrayList1.get(a).messageOwner);
                }
                LongSparseArray longSparseArray = array;
            } else {
                TLRPC.TL_messageMediaWebPage media = (TLRPC.TL_messageMediaWebPage) tLObject;
                if (media.webpage instanceof TLRPC.TL_webPage) {
                    LongSparseArray longSparseArray2 = array;
                } else if (media.webpage instanceof TLRPC.TL_webPageEmpty) {
                    LongSparseArray longSparseArray3 = array;
                } else {
                    array.put(media.webpage.id, arrayList1);
                }
                for (int a2 = 0; a2 < arrayList1.size(); a2++) {
                    arrayList1.get(a2).messageOwner.media.webpage = media.webpage;
                    if (a2 == 0) {
                        ImageLoader.saveMessageThumbs(arrayList1.get(a2).messageOwner);
                    }
                    messagesRes.messages.add(arrayList1.get(a2).messageOwner);
                }
            }
            if (!messagesRes.messages.isEmpty()) {
                getMessagesStorage().putMessages((TLRPC.messages_Messages) messagesRes, dialog_id, -2, 0, false, scheduled);
                getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(dialog_id), arrayList1);
            }
        }
    }

    public void processLoadedMessages(TLRPC.messages_Messages messagesRes, long dialog_id, int count, int max_id, int offset_date, boolean isCache, int classGuid, int first_unread, int last_message_id, int unread_count, int last_date, int load_type, boolean isChannel, boolean isEnd, boolean scheduled, int loadIndex, boolean queryFromServer, int mentionsCount) {
        int i = load_type;
        boolean z = scheduled;
        boolean z2 = queryFromServer;
        DispatchQueue dispatchQueue = Utilities.stageQueue;
        $$Lambda$MessagesController$53djeZUqoKsMWcNM8q4tmV7w_Cw r23 = r0;
        $$Lambda$MessagesController$53djeZUqoKsMWcNM8q4tmV7w_Cw r0 = new Runnable(this, messagesRes, dialog_id, z, isCache, count, i, z2, first_unread, max_id, offset_date, classGuid, last_message_id, isChannel, loadIndex, unread_count, last_date, mentionsCount, isEnd) {
            private final /* synthetic */ MessagesController f$0;
            private final /* synthetic */ TLRPC.messages_Messages f$1;
            private final /* synthetic */ int f$10;
            private final /* synthetic */ int f$11;
            private final /* synthetic */ int f$12;
            private final /* synthetic */ boolean f$13;
            private final /* synthetic */ int f$14;
            private final /* synthetic */ int f$15;
            private final /* synthetic */ int f$16;
            private final /* synthetic */ int f$17;
            private final /* synthetic */ boolean f$18;
            private final /* synthetic */ long f$2;
            private final /* synthetic */ boolean f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ int f$6;
            private final /* synthetic */ boolean f$7;
            private final /* synthetic */ int f$8;
            private final /* synthetic */ int f$9;

            {
                this.f$0 = r4;
                this.f$1 = r5;
                this.f$2 = r6;
                this.f$3 = r8;
                this.f$4 = r9;
                this.f$5 = r10;
                this.f$6 = r11;
                this.f$7 = r12;
                this.f$8 = r13;
                this.f$9 = r14;
                this.f$10 = r15;
                this.f$11 = r16;
                this.f$12 = r17;
                this.f$13 = r18;
                this.f$14 = r19;
                this.f$15 = r20;
                this.f$16 = r21;
                this.f$17 = r22;
                this.f$18 = r23;
            }

            public final void run() {
                MessagesController messagesController = this.f$0;
                MessagesController messagesController2 = messagesController;
                messagesController2.lambda$processLoadedMessages$125$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, this.f$15, this.f$16, this.f$17, this.f$18);
            }
        };
        dispatchQueue.postRunnable(r23);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:119:0x02fe, code lost:
        if (r2.media.bytes[0] < 105) goto L_0x0303;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedMessages$125$MessagesController(im.bclpbkiauv.tgnet.TLRPC.messages_Messages r35, long r36, boolean r38, boolean r39, int r40, int r41, boolean r42, int r43, int r44, int r45, int r46, int r47, boolean r48, int r49, int r50, int r51, int r52, boolean r53) {
        /*
            r34 = this;
            r15 = r34
            r14 = r35
            r12 = r36
            r11 = r38
            r0 = 0
            r6 = 0
            boolean r1 = r14 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messages_channelMessages
            if (r1 == 0) goto L_0x006f
            int r1 = (int) r12
            int r7 = -r1
            if (r11 != 0) goto L_0x004b
            android.util.SparseIntArray r1 = r15.channelsPts
            int r1 = r1.get(r7)
            if (r1 != 0) goto L_0x004b
            im.bclpbkiauv.messenger.MessagesStorage r2 = r34.getMessagesStorage()
            int r8 = r2.getChannelPtsSync(r7)
            if (r8 != 0) goto L_0x004b
            android.util.SparseIntArray r1 = r15.channelsPts
            int r2 = r14.pts
            r1.put(r7, r2)
            r9 = 1
            android.util.SparseIntArray r0 = r15.needShortPollChannels
            int r0 = r0.indexOfKey(r7)
            if (r0 < 0) goto L_0x0047
            android.util.SparseIntArray r0 = r15.shortPollChannels
            int r0 = r0.indexOfKey(r7)
            if (r0 >= 0) goto L_0x0047
            r2 = 2
            r3 = 0
            r5 = 0
            r0 = r34
            r1 = r7
            r0.getChannelDifference(r1, r2, r3, r5)
            goto L_0x004a
        L_0x0047:
            r15.getChannelDifference(r7)
        L_0x004a:
            r0 = r9
        L_0x004b:
            r1 = 0
        L_0x004c:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r2 = r14.chats
            int r2 = r2.size()
            if (r1 >= r2) goto L_0x006a
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r2 = r14.chats
            java.lang.Object r2 = r2.get(r1)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = (im.bclpbkiauv.tgnet.TLRPC.Chat) r2
            int r3 = r2.id
            if (r3 != r7) goto L_0x0067
            boolean r6 = r2.megagroup
            r22 = r0
            r23 = r6
            goto L_0x0073
        L_0x0067:
            int r1 = r1 + 1
            goto L_0x004c
        L_0x006a:
            r22 = r0
            r23 = r6
            goto L_0x0073
        L_0x006f:
            r22 = r0
            r23 = r6
        L_0x0073:
            int r10 = (int) r12
            r0 = 32
            long r0 = r12 >> r0
            int r9 = (int) r0
            if (r39 != 0) goto L_0x0080
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r0 = r14.messages
            im.bclpbkiauv.messenger.ImageLoader.saveMessagesThumbs(r0)
        L_0x0080:
            r8 = 1
            if (r9 == r8) goto L_0x015f
            if (r10 == 0) goto L_0x015f
            if (r39 == 0) goto L_0x015f
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r0 = r14.messages
            int r0 = r0.size()
            if (r0 == 0) goto L_0x00be
            if (r11 == 0) goto L_0x00b7
            long r0 = android.os.SystemClock.uptimeMillis()
            android.util.LongSparseArray<java.lang.Long> r2 = r15.lastScheduledServerQueryTime
            r3 = 0
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            java.lang.Object r2 = r2.get(r12, r3)
            java.lang.Long r2 = (java.lang.Long) r2
            long r2 = r2.longValue()
            long r0 = r0 - r2
            r2 = 60000(0xea60, double:2.9644E-319)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 <= 0) goto L_0x00b0
            goto L_0x00be
        L_0x00b0:
            r24 = r9
            r26 = r10
            r15 = r14
            goto L_0x0164
        L_0x00b7:
            r24 = r9
            r26 = r10
            r15 = r14
            goto L_0x0164
        L_0x00be:
            if (r11 == 0) goto L_0x011e
            android.util.LongSparseArray<java.lang.Long> r0 = r15.lastScheduledServerQueryTime
            long r1 = android.os.SystemClock.uptimeMillis()
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r0.put(r12, r1)
            r0 = 0
            r2 = 0
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r3 = r14.messages
            int r3 = r3.size()
        L_0x00d6:
            if (r2 >= r3) goto L_0x0116
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r4 = r14.messages
            java.lang.Object r4 = r4.get(r2)
            im.bclpbkiauv.tgnet.TLRPC$Message r4 = (im.bclpbkiauv.tgnet.TLRPC.Message) r4
            int r5 = r4.id
            if (r5 >= 0) goto L_0x00e7
            r20 = r9
            goto L_0x0110
        L_0x00e7:
            r5 = 20261(0x4f25, double:1.00103E-319)
            long r16 = r0 * r5
            r18 = 2147483648(0x80000000, double:1.0609978955E-314)
            long r16 = r16 + r18
            int r7 = r4.id
            r20 = r9
            long r8 = (long) r7
            long r16 = r16 + r8
            long r16 = r16 % r18
            long r0 = r16 * r5
            long r0 = r0 + r18
            int r7 = r4.edit_date
            long r7 = (long) r7
            long r0 = r0 + r7
            long r0 = r0 % r18
            long r5 = r5 * r0
            long r5 = r5 + r18
            int r7 = r4.date
            long r7 = (long) r7
            long r5 = r5 + r7
            long r5 = r5 % r18
            r0 = r5
        L_0x0110:
            int r2 = r2 + 1
            r9 = r20
            r8 = 1
            goto L_0x00d6
        L_0x0116:
            r20 = r9
            int r2 = (int) r0
            r8 = 1
            int r2 = r2 - r8
            r19 = r2
            goto L_0x0123
        L_0x011e:
            r20 = r9
            r2 = 0
            r19 = r2
        L_0x0123:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$N4YYMW8xo_LK4mTiFO7HRKxKN2U r21 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$N4YYMW8xo_LK4mTiFO7HRKxKN2U
            r0 = r21
            r1 = r34
            r2 = r36
            r4 = r40
            r5 = r41
            r6 = r42
            r7 = r43
            r9 = 1
            r8 = r44
            r24 = r20
            r9 = r45
            r26 = r10
            r10 = r19
            r11 = r46
            r12 = r47
            r13 = r48
            r14 = r38
            r15 = r49
            r16 = r50
            r17 = r51
            r18 = r52
            r0.<init>(r1, r2, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r21)
            r15 = r35
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r0 = r15.messages
            boolean r0 = r0.isEmpty()
            if (r0 == 0) goto L_0x0164
            return
        L_0x015f:
            r24 = r9
            r26 = r10
            r15 = r14
        L_0x0164:
            android.util.SparseArray r0 = new android.util.SparseArray
            r0.<init>()
            r14 = r0
            android.util.SparseArray r0 = new android.util.SparseArray
            r0.<init>()
            r13 = r0
            r0 = 0
        L_0x0171:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r1 = r15.users
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x0189
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r1 = r15.users
            java.lang.Object r1 = r1.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$User r1 = (im.bclpbkiauv.tgnet.TLRPC.User) r1
            int r2 = r1.id
            r14.put(r2, r1)
            int r0 = r0 + 1
            goto L_0x0171
        L_0x0189:
            r0 = 0
        L_0x018a:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r1 = r15.chats
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x01a2
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r1 = r15.chats
            java.lang.Object r1 = r1.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$Chat r1 = (im.bclpbkiauv.tgnet.TLRPC.Chat) r1
            int r2 = r1.id
            r13.put(r2, r1)
            int r0 = r0 + 1
            goto L_0x018a
        L_0x01a2:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r0 = r15.messages
            int r12 = r0.size()
            r8 = 0
            if (r39 != 0) goto L_0x0280
            r11 = r34
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r11.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r36)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x01d5
            im.bclpbkiauv.messenger.MessagesStorage r1 = r34.getMessagesStorage()
            r9 = r36
            int r1 = r1.getDialogReadMax(r8, r9)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r1)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r36)
            r1.put(r2, r0)
            r16 = r0
            goto L_0x01d9
        L_0x01d5:
            r9 = r36
            r16 = r0
        L_0x01d9:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r11.dialogs_read_outbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r36)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x0200
            im.bclpbkiauv.messenger.MessagesStorage r1 = r34.getMessagesStorage()
            r7 = 1
            int r1 = r1.getDialogReadMax(r7, r9)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r1)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_outbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r36)
            r1.put(r2, r0)
            r17 = r0
            goto L_0x0203
        L_0x0200:
            r7 = 1
            r17 = r0
        L_0x0203:
            r0 = 0
        L_0x0204:
            if (r0 >= r12) goto L_0x0269
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r1 = r15.messages
            java.lang.Object r1 = r1.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$Message r1 = (im.bclpbkiauv.tgnet.TLRPC.Message) r1
            if (r23 == 0) goto L_0x0217
            int r2 = r1.flags
            r3 = -2147483648(0xffffffff80000000, float:-0.0)
            r2 = r2 | r3
            r1.flags = r2
        L_0x0217:
            r6 = r38
            if (r6 != 0) goto L_0x0266
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r2 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionChatDeleteUser
            if (r2 == 0) goto L_0x023e
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r2 = r1.action
            int r2 = r2.user_id
            java.lang.Object r2 = r14.get(r2)
            im.bclpbkiauv.tgnet.TLRPC$User r2 = (im.bclpbkiauv.tgnet.TLRPC.User) r2
            if (r2 == 0) goto L_0x023e
            boolean r3 = r2.bot
            if (r3 == 0) goto L_0x023e
            im.bclpbkiauv.tgnet.TLRPC$TL_replyKeyboardHide r3 = new im.bclpbkiauv.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r1.reply_markup = r3
            int r3 = r1.flags
            r3 = r3 | 64
            r1.flags = r3
        L_0x023e:
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r2 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionChatMigrateTo
            if (r2 != 0) goto L_0x0262
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r2 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionChannelCreate
            if (r2 == 0) goto L_0x024b
            goto L_0x0262
        L_0x024b:
            boolean r2 = r1.out
            if (r2 == 0) goto L_0x0252
            r2 = r17
            goto L_0x0254
        L_0x0252:
            r2 = r16
        L_0x0254:
            int r2 = r2.intValue()
            int r3 = r1.id
            if (r2 >= r3) goto L_0x025e
            r2 = 1
            goto L_0x025f
        L_0x025e:
            r2 = 0
        L_0x025f:
            r1.unread = r2
            goto L_0x0266
        L_0x0262:
            r1.unread = r8
            r1.media_unread = r8
        L_0x0266:
            int r0 = r0 + 1
            goto L_0x0204
        L_0x0269:
            r6 = r38
            im.bclpbkiauv.messenger.MessagesStorage r0 = r34.getMessagesStorage()
            r1 = r35
            r2 = r36
            r4 = r41
            r5 = r44
            r8 = r6
            r6 = r22
            r7 = r38
            r0.putMessages((im.bclpbkiauv.tgnet.TLRPC.messages_Messages) r1, (long) r2, (int) r4, (int) r5, (boolean) r6, (boolean) r7)
            goto L_0x0286
        L_0x0280:
            r11 = r34
            r9 = r36
            r8 = r38
        L_0x0286:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r7 = r0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            java.util.HashMap r1 = new java.util.HashMap
            r1.<init>()
            r6 = r1
            r25 = 0
            r1 = 0
            r5 = r1
        L_0x029b:
            if (r5 >= r12) goto L_0x036f
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r1 = r15.messages
            java.lang.Object r1 = r1.get(r5)
            r4 = r1
            im.bclpbkiauv.tgnet.TLRPC$Message r4 = (im.bclpbkiauv.tgnet.TLRPC.Message) r4
            r4.dialog_id = r9
            im.bclpbkiauv.messenger.MessageObject r16 = new im.bclpbkiauv.messenger.MessageObject
            int r2 = r11.currentAccount
            r17 = 1
            r1 = r16
            r3 = r4
            r28 = r4
            r4 = r14
            r19 = r5
            r5 = r13
            r15 = r6
            r6 = r17
            r1.<init>((int) r2, (im.bclpbkiauv.tgnet.TLRPC.Message) r3, (android.util.SparseArray<im.bclpbkiauv.tgnet.TLRPC.User>) r4, (android.util.SparseArray<im.bclpbkiauv.tgnet.TLRPC.Chat>) r5, (boolean) r6)
            r1.scheduled = r8
            r7.add(r1)
            if (r39 == 0) goto L_0x0363
            r2 = r28
            boolean r3 = r2.legacy
            r4 = 105(0x69, float:1.47E-43)
            if (r3 == 0) goto L_0x02dc
            int r3 = r2.layer
            if (r3 >= r4) goto L_0x02dc
            int r3 = r2.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r0.add(r3)
            r5 = 1
            r6 = 0
            goto L_0x0312
        L_0x02dc:
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            boolean r3 = r3 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageMediaUnsupported
            if (r3 == 0) goto L_0x0310
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            byte[] r3 = r3.bytes
            if (r3 == 0) goto L_0x030d
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            byte[] r3 = r3.bytes
            int r3 = r3.length
            if (r3 == 0) goto L_0x0301
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            byte[] r3 = r3.bytes
            int r3 = r3.length
            r5 = 1
            if (r3 != r5) goto L_0x030e
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            byte[] r3 = r3.bytes
            r6 = 0
            byte r3 = r3[r6]
            if (r3 >= r4) goto L_0x0312
            goto L_0x0303
        L_0x0301:
            r5 = 1
            r6 = 0
        L_0x0303:
            int r3 = r2.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r0.add(r3)
            goto L_0x0312
        L_0x030d:
            r5 = 1
        L_0x030e:
            r6 = 0
            goto L_0x0312
        L_0x0310:
            r5 = 1
            r6 = 0
        L_0x0312:
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            boolean r3 = r3 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageMediaWebPage
            if (r3 == 0) goto L_0x0367
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            im.bclpbkiauv.tgnet.TLRPC$WebPage r3 = r3.webpage
            boolean r3 = r3 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_webPagePending
            if (r3 == 0) goto L_0x033a
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            im.bclpbkiauv.tgnet.TLRPC$WebPage r3 = r3.webpage
            int r3 = r3.date
            im.bclpbkiauv.tgnet.ConnectionsManager r4 = r34.getConnectionsManager()
            int r4 = r4.getCurrentTime()
            if (r3 > r4) goto L_0x033a
            int r3 = r2.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r0.add(r3)
            goto L_0x0367
        L_0x033a:
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            im.bclpbkiauv.tgnet.TLRPC$WebPage r3 = r3.webpage
            boolean r3 = r3 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_webPageUrlPending
            if (r3 == 0) goto L_0x0367
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r3 = r2.media
            im.bclpbkiauv.tgnet.TLRPC$WebPage r3 = r3.webpage
            java.lang.String r3 = r3.url
            java.lang.Object r3 = r15.get(r3)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            if (r3 != 0) goto L_0x035f
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r3 = r4
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r4 = r2.media
            im.bclpbkiauv.tgnet.TLRPC$WebPage r4 = r4.webpage
            java.lang.String r4 = r4.url
            r15.put(r4, r3)
        L_0x035f:
            r3.add(r1)
            goto L_0x0367
        L_0x0363:
            r2 = r28
            r5 = 1
            r6 = 0
        L_0x0367:
            int r1 = r19 + 1
            r5 = r1
            r6 = r15
            r15 = r35
            goto L_0x029b
        L_0x036f:
            r19 = r5
            r15 = r6
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$ehw0J3PiN9qd0astGg5ZOuPW9JM r27 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$ehw0J3PiN9qd0astGg5ZOuPW9JM
            r28 = r0
            r0 = r27
            r1 = r34
            r2 = r35
            r3 = r39
            r4 = r38
            r5 = r42
            r6 = r41
            r29 = r7
            r7 = r43
            r8 = r40
            r9 = r36
            r11 = r29
            r30 = r12
            r12 = r47
            r31 = r13
            r13 = r50
            r32 = r14
            r14 = r51
            r33 = r15
            r15 = r53
            r16 = r46
            r17 = r49
            r18 = r44
            r19 = r52
            r20 = r28
            r21 = r33
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r27)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.lambda$processLoadedMessages$125$MessagesController(im.bclpbkiauv.tgnet.TLRPC$messages_Messages, long, boolean, boolean, int, int, boolean, int, int, int, int, int, boolean, int, int, int, int, boolean):void");
    }

    public /* synthetic */ void lambda$null$123$MessagesController(long dialog_id, int count, int load_type, boolean queryFromServer, int first_unread, int max_id, int offset_date, int hash, int classGuid, int last_message_id, boolean isChannel, boolean scheduled, int loadIndex, int unread_count, int last_date, int mentionsCount) {
        loadMessages(dialog_id, count, (load_type != 2 || !queryFromServer) ? max_id : first_unread, offset_date, false, hash, classGuid, load_type, last_message_id, isChannel, scheduled, loadIndex, first_unread, unread_count, last_date, queryFromServer, mentionsCount);
    }

    /* JADX WARNING: Removed duplicated region for block: B:26:0x005e  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$124$MessagesController(im.bclpbkiauv.tgnet.TLRPC.messages_Messages r18, boolean r19, boolean r20, boolean r21, int r22, int r23, int r24, long r25, java.util.ArrayList r27, int r28, int r29, int r30, boolean r31, int r32, int r33, int r34, int r35, java.util.ArrayList r36, java.util.HashMap r37) {
        /*
            r17 = this;
            r0 = r17
            r1 = r18
            r2 = r19
            r3 = r20
            r4 = r25
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r6 = r1.users
            r0.putUsers(r6, r2)
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r6 = r1.chats
            r0.putChats(r6, r2)
            r6 = 2
            if (r3 == 0) goto L_0x001d
            r7 = 0
            r8 = r22
            r12 = r23
            goto L_0x0060
        L_0x001d:
            r7 = 2147483647(0x7fffffff, float:NaN)
            if (r21 == 0) goto L_0x0055
            r8 = r22
            if (r8 != r6) goto L_0x0057
            r9 = 0
        L_0x0027:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r10 = r1.messages
            int r10 = r10.size()
            if (r9 >= r10) goto L_0x0052
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r10 = r1.messages
            java.lang.Object r10 = r10.get(r9)
            im.bclpbkiauv.tgnet.TLRPC$Message r10 = (im.bclpbkiauv.tgnet.TLRPC.Message) r10
            boolean r11 = r10.out
            if (r11 == 0) goto L_0x0043
            boolean r11 = r10.from_scheduled
            if (r11 == 0) goto L_0x0040
            goto L_0x0043
        L_0x0040:
            r12 = r23
            goto L_0x004f
        L_0x0043:
            int r11 = r10.id
            r12 = r23
            if (r11 <= r12) goto L_0x004f
            int r11 = r10.id
            if (r11 >= r7) goto L_0x004f
            int r7 = r10.id
        L_0x004f:
            int r9 = r9 + 1
            goto L_0x0027
        L_0x0052:
            r12 = r23
            goto L_0x0059
        L_0x0055:
            r8 = r22
        L_0x0057:
            r12 = r23
        L_0x0059:
            r9 = 2147483647(0x7fffffff, float:NaN)
            if (r7 != r9) goto L_0x0060
            r7 = r23
        L_0x0060:
            r9 = 0
            r10 = 1
            if (r3 == 0) goto L_0x0084
            r11 = r24
            if (r11 != r10) goto L_0x0086
            im.bclpbkiauv.messenger.NotificationCenter r13 = r17.getNotificationCenter()
            int r14 = im.bclpbkiauv.messenger.NotificationCenter.scheduledMessagesUpdated
            java.lang.Object[] r15 = new java.lang.Object[r6]
            java.lang.Long r16 = java.lang.Long.valueOf(r25)
            r15[r9] = r16
            int r16 = r27.size()
            java.lang.Integer r16 = java.lang.Integer.valueOf(r16)
            r15[r10] = r16
            r13.postNotificationName(r14, r15)
            goto L_0x0086
        L_0x0084:
            r11 = r24
        L_0x0086:
            im.bclpbkiauv.messenger.NotificationCenter r13 = r17.getNotificationCenter()
            int r14 = im.bclpbkiauv.messenger.NotificationCenter.messagesDidLoad
            r15 = 15
            java.lang.Object[] r15 = new java.lang.Object[r15]
            java.lang.Long r16 = java.lang.Long.valueOf(r25)
            r15[r9] = r16
            java.lang.Integer r9 = java.lang.Integer.valueOf(r24)
            r15[r10] = r9
            r15[r6] = r27
            r6 = 3
            java.lang.Boolean r9 = java.lang.Boolean.valueOf(r19)
            r15[r6] = r9
            r6 = 4
            java.lang.Integer r9 = java.lang.Integer.valueOf(r7)
            r15[r6] = r9
            r6 = 5
            java.lang.Integer r9 = java.lang.Integer.valueOf(r28)
            r15[r6] = r9
            r6 = 6
            java.lang.Integer r9 = java.lang.Integer.valueOf(r29)
            r15[r6] = r9
            r6 = 7
            java.lang.Integer r9 = java.lang.Integer.valueOf(r30)
            r15[r6] = r9
            r6 = 8
            java.lang.Integer r9 = java.lang.Integer.valueOf(r22)
            r15[r6] = r9
            r6 = 9
            java.lang.Boolean r9 = java.lang.Boolean.valueOf(r31)
            r15[r6] = r9
            r6 = 10
            java.lang.Integer r9 = java.lang.Integer.valueOf(r32)
            r15[r6] = r9
            r6 = 11
            java.lang.Integer r9 = java.lang.Integer.valueOf(r33)
            r15[r6] = r9
            r6 = 12
            java.lang.Integer r9 = java.lang.Integer.valueOf(r34)
            r15[r6] = r9
            r6 = 13
            java.lang.Integer r9 = java.lang.Integer.valueOf(r35)
            r15[r6] = r9
            r6 = 14
            java.lang.Boolean r9 = java.lang.Boolean.valueOf(r20)
            r15[r6] = r9
            r13.postNotificationName(r14, r15)
            boolean r6 = r36.isEmpty()
            if (r6 != 0) goto L_0x0108
            r6 = r36
            r0.reloadMessages(r6, r4, r3)
            goto L_0x010a
        L_0x0108:
            r6 = r36
        L_0x010a:
            boolean r9 = r37.isEmpty()
            if (r9 != 0) goto L_0x0116
            r9 = r37
            r0.reloadWebPages(r4, r9, r3)
            goto L_0x0118
        L_0x0116:
            r9 = r37
        L_0x0118:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.lambda$null$124$MessagesController(im.bclpbkiauv.tgnet.TLRPC$messages_Messages, boolean, boolean, boolean, int, int, int, long, java.util.ArrayList, int, int, int, boolean, int, int, int, int, java.util.ArrayList, java.util.HashMap):void");
    }

    public void loadHintDialogs() {
        if (this.hintDialogs.isEmpty() && !TextUtils.isEmpty(this.installReferer)) {
            TLRPC.TL_help_getRecentMeUrls req = new TLRPC.TL_help_getRecentMeUrls();
            req.referer = this.installReferer;
            getConnectionsManager().sendRequest(req, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadHintDialogs$127$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadHintDialogs$127$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            AndroidUtilities.runOnUIThread(new Runnable(response) {
                private final /* synthetic */ TLObject f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$126$MessagesController(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$126$MessagesController(TLObject response) {
        TLRPC.TL_help_recentMeUrls res = (TLRPC.TL_help_recentMeUrls) response;
        putUsers(res.users, false);
        putChats(res.chats, false);
        this.hintDialogs.clear();
        this.hintDialogs.addAll(res.urls);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private TLRPC.TL_dialogFolder ensureFolderDialogExists(int folderId, boolean[] folderCreated) {
        if (folderId == 0) {
            return null;
        }
        long folderDialogId = DialogObject.makeFolderDialogId(folderId);
        TLRPC.Dialog dialog = this.dialogs_dict.get(folderDialogId);
        if (dialog instanceof TLRPC.TL_dialogFolder) {
            if (folderCreated != null) {
                folderCreated[0] = false;
            }
            return (TLRPC.TL_dialogFolder) dialog;
        }
        if (folderCreated != null) {
            folderCreated[0] = true;
        }
        TLRPC.TL_dialogFolder dialogFolder = new TLRPC.TL_dialogFolder();
        dialogFolder.id = folderDialogId;
        dialogFolder.peer = new TLRPC.TL_peerUser();
        dialogFolder.folder = new TLRPC.TL_folder();
        dialogFolder.folder.id = folderId;
        dialogFolder.folder.title = LocaleController.getString("ArchivedChats", R.string.ArchivedChats);
        dialogFolder.pinned = true;
        int maxPinnedNum = 0;
        for (int a = 0; a < this.allDialogs.size(); a++) {
            TLRPC.Dialog d = this.allDialogs.get(a);
            if (!d.pinned) {
                break;
            }
            maxPinnedNum = Math.max(d.pinnedNum, maxPinnedNum);
        }
        dialogFolder.pinnedNum = maxPinnedNum + 1;
        TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
        dialogs.dialogs.add(dialogFolder);
        getMessagesStorage().putDialogs(dialogs, 1);
        this.dialogs_dict.put(folderDialogId, dialogFolder);
        this.allDialogs.add(0, dialogFolder);
        return dialogFolder;
    }

    /* access modifiers changed from: private */
    /* renamed from: removeFolder */
    public void lambda$onFolderEmpty$128$MessagesController(int folderId) {
        long dialogId = DialogObject.makeFolderDialogId(folderId);
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog != null) {
            this.dialogs_dict.remove(dialogId);
            this.allDialogs.remove(dialog);
            sortDialogs((SparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            getNotificationCenter().postNotificationName(NotificationCenter.folderBecomeEmpty, Integer.valueOf(folderId));
        }
    }

    /* access modifiers changed from: protected */
    public void onFolderEmpty(int folderId) {
        if (getUserConfig().getDialogLoadOffsets(folderId)[0] == Integer.MAX_VALUE) {
            lambda$onFolderEmpty$128$MessagesController(folderId);
            return;
        }
        loadDialogs(folderId, 0, 10, false, new Runnable(folderId) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$onFolderEmpty$128$MessagesController(this.f$1);
            }
        });
    }

    public void checkIfFolderEmpty(int folderId) {
        if (folderId != 0) {
            getMessagesStorage().checkIfFolderEmpty(folderId);
        }
    }

    public int addDialogToFolder(long dialogId, int folderId, int pinnedNum, long taskId) {
        ArrayList<Long> arrayList = new ArrayList<>(1);
        arrayList.add(Long.valueOf(dialogId));
        return addDialogToFolder(arrayList, folderId, pinnedNum, (ArrayList<TLRPC.TL_inputFolderPeer>) null, taskId);
    }

    public int addDialogToFolder(ArrayList<Long> dialogIds, int folderId, int pinnedNum, ArrayList<TLRPC.TL_inputFolderPeer> peers, long taskId) {
        long newTaskId;
        long newTaskId2;
        TLRPC.Dialog dialog;
        boolean[] folderCreated;
        int i = folderId;
        int i2 = pinnedNum;
        TLRPC.TL_folders_editPeerFolders req = new TLRPC.TL_folders_editPeerFolders();
        boolean[] folderCreated2 = null;
        int i3 = 1;
        if (taskId == 0) {
            int selfUserId = getUserConfig().getClientUserId();
            int N = dialogIds.size();
            int size = 0;
            int size2 = 0;
            boolean[] folderCreated3 = null;
            int a = 0;
            while (a < N) {
                long dialogId = dialogIds.get(a).longValue();
                if ((DialogObject.isPeerDialogId(dialogId) || DialogObject.isSecretDialogId(dialogId)) && !((i == i3 && (dialogId == ((long) selfUserId) || dialogId == 777000 || isProxyDialog(dialogId, false))) || (dialog = this.dialogs_dict.get(dialogId)) == null)) {
                    dialog.folder_id = i;
                    if (i2 > 0) {
                        dialog.pinned = true;
                        dialog.pinnedNum = i2;
                    } else {
                        dialog.pinned = false;
                        dialog.pinnedNum = 0;
                    }
                    if (folderCreated3 == null) {
                        boolean[] folderCreated4 = new boolean[1];
                        ensureFolderDialogExists(i, folderCreated4);
                        folderCreated = folderCreated4;
                    } else {
                        folderCreated = folderCreated3;
                    }
                    if (DialogObject.isSecretDialogId(dialogId)) {
                        long j = dialogId;
                        getMessagesStorage().setDialogsFolderId((ArrayList<TLRPC.TL_folderPeer>) null, (ArrayList<TLRPC.TL_inputFolderPeer>) null, dialogId, folderId);
                        size2 = 1;
                        folderCreated3 = folderCreated;
                    } else {
                        TLRPC.TL_inputFolderPeer folderPeer = new TLRPC.TL_inputFolderPeer();
                        folderPeer.folder_id = i;
                        folderPeer.peer = getInputPeer((int) dialogId);
                        req.folder_peers.add(folderPeer);
                        size += folderPeer.getObjectSize();
                        size2 = 1;
                        folderCreated3 = folderCreated;
                    }
                }
                a++;
                i3 = 1;
            }
            if (size2 == 0) {
                return 0;
            }
            sortDialogs((SparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (size != 0) {
                NativeByteBuffer data = null;
                try {
                    data = new NativeByteBuffer(size + 12);
                    data.writeInt32(17);
                    data.writeInt32(i);
                    data.writeInt32(req.folder_peers.size());
                    int N2 = req.folder_peers.size();
                    for (int a2 = 0; a2 < N2; a2++) {
                        req.folder_peers.get(a2).serializeToStream(data);
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
                newTaskId2 = getMessagesStorage().createPendingTask(data);
            } else {
                newTaskId2 = 0;
            }
            ArrayList<TLRPC.TL_inputFolderPeer> arrayList = peers;
            folderCreated2 = folderCreated3;
            newTaskId = newTaskId2;
        } else {
            req.folder_peers = peers;
            newTaskId = taskId;
        }
        if (!req.folder_peers.isEmpty()) {
            getConnectionsManager().sendRequest(req, new RequestDelegate(newTaskId) {
                private final /* synthetic */ long f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$addDialogToFolder$129$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
            getMessagesStorage().setDialogsFolderId((ArrayList<TLRPC.TL_folderPeer>) null, req.folder_peers, 0, folderId);
        }
        if (folderCreated2 == null) {
            return 0;
        }
        return folderCreated2[0] ? 2 : 1;
    }

    public /* synthetic */ void lambda$addDialogToFolder$129$MessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void loadDialogs(int folderId, int offset, int count, boolean fromCache) {
        loadDialogs(folderId, offset, count, fromCache, (Runnable) null);
    }

    public void loadDialogs(int folderId, int offset, int count, boolean fromCache, Runnable onEmptyCallback) {
        MessageObject message;
        int id;
        int i = folderId;
        int i2 = count;
        if (this.loadingDialogs.get(i)) {
            Runnable runnable = onEmptyCallback;
        } else if (this.resetingDialogs) {
            Runnable runnable2 = onEmptyCallback;
        } else {
            this.loadingDialogs.put(i, true);
            int i3 = 0;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (fromCache) {
                MessagesStorage messagesStorage = getMessagesStorage();
                if (offset != 0) {
                    i3 = this.nextDialogsCacheOffset.get(i, 0);
                }
                messagesStorage.getDialogs(i, i3, i2);
                Runnable runnable3 = onEmptyCallback;
                return;
            }
            TLRPC.TL_messages_getDialogs req = new TLRPC.TL_messages_getDialogs();
            req.limit = i2;
            req.exclude_pinned = true;
            if (i != 0) {
                req.flags |= 2;
                req.folder_id = i;
            }
            int[] dialogsLoadOffset = getUserConfig().getDialogLoadOffsets(i);
            if (dialogsLoadOffset[0] == -1) {
                boolean found = false;
                ArrayList<TLRPC.Dialog> dialogs = getDialogs(folderId);
                int a = dialogs.size() - 1;
                while (true) {
                    if (a < 0) {
                        break;
                    }
                    TLRPC.Dialog dialog = dialogs.get(a);
                    if (!dialog.pinned) {
                        int lower_id = (int) dialog.id;
                        int high_id = (int) (dialog.id >> 32);
                        if (!(lower_id == 0 || high_id == 1 || dialog.top_message <= 0 || (message = this.dialogMessage.get(dialog.id)) == null || message.getId() <= 0)) {
                            req.offset_date = message.messageOwner.date;
                            req.offset_id = message.messageOwner.id;
                            if (message.messageOwner.to_id.channel_id != 0) {
                                id = -message.messageOwner.to_id.channel_id;
                            } else if (message.messageOwner.to_id.chat_id != 0) {
                                id = -message.messageOwner.to_id.chat_id;
                            } else {
                                id = message.messageOwner.to_id.user_id;
                            }
                            req.offset_peer = getInputPeer(id);
                            found = true;
                        }
                    }
                    a--;
                }
                if (!found) {
                    req.offset_peer = new TLRPC.TL_inputPeerEmpty();
                }
            } else if (dialogsLoadOffset[0] == Integer.MAX_VALUE) {
                this.dialogsEndReached.put(i, true);
                this.serverDialogsEndReached.put(i, true);
                this.loadingDialogs.put(i, false);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                return;
            } else {
                req.offset_id = dialogsLoadOffset[0];
                req.offset_date = dialogsLoadOffset[1];
                if (req.offset_id == 0) {
                    req.offset_peer = new TLRPC.TL_inputPeerEmpty();
                } else {
                    if (dialogsLoadOffset[4] != 0) {
                        req.offset_peer = new TLRPC.TL_inputPeerChannel();
                        req.offset_peer.channel_id = dialogsLoadOffset[4];
                    } else if (dialogsLoadOffset[2] != 0) {
                        req.offset_peer = new TLRPC.TL_inputPeerUser();
                        req.offset_peer.user_id = dialogsLoadOffset[2];
                    } else {
                        req.offset_peer = new TLRPC.TL_inputPeerChat();
                        req.offset_peer.chat_id = dialogsLoadOffset[3];
                    }
                    req.offset_peer.access_hash = (((long) dialogsLoadOffset[5]) << 32) | ((long) dialogsLoadOffset[5]);
                }
            }
            getConnectionsManager().sendRequest(req, new RequestDelegate(i, i2, onEmptyCallback) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ Runnable f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadDialogs$130$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadDialogs$130$MessagesController(int folderId, int count, Runnable onEmptyCallback, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.messages_Dialogs dialogsRes = (TLRPC.messages_Dialogs) response;
            processLoadedDialogs(dialogsRes, (ArrayList<TLRPC.EncryptedChat>) null, folderId, 0, count, 0, false, false, false);
            if (onEmptyCallback != null && dialogsRes.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(onEmptyCallback);
            }
        }
    }

    public void loadGlobalNotificationsSettings() {
        if (this.loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
            SharedPreferences preferences = getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor editor1 = null;
            if (preferences.contains("EnableGroup")) {
                boolean enabled = preferences.getBoolean("EnableGroup", true);
                if (0 == 0) {
                    editor1 = preferences.edit();
                }
                if (!enabled) {
                    editor1.putInt("EnableGroup2", Integer.MAX_VALUE);
                    editor1.putInt("EnableChannel2", Integer.MAX_VALUE);
                }
                editor1.remove("EnableGroup").commit();
            }
            if (preferences.contains("EnableAll")) {
                boolean enabled2 = preferences.getBoolean("EnableAll", true);
                if (editor1 == null) {
                    editor1 = preferences.edit();
                }
                if (!enabled2) {
                    editor1.putInt("EnableAll2", Integer.MAX_VALUE);
                }
                editor1.remove("EnableAll").commit();
            }
            if (editor1 != null) {
                editor1.commit();
            }
            this.loadingNotificationSettings = 3;
            for (int a = 0; a < 3; a++) {
                TLRPC.TL_account_getNotifySettings req = new TLRPC.TL_account_getNotifySettings();
                if (a == 0) {
                    req.peer = new TLRPC.TL_inputNotifyChats();
                } else if (a == 1) {
                    req.peer = new TLRPC.TL_inputNotifyUsers();
                } else if (a == 2) {
                    req.peer = new TLRPC.TL_inputNotifyBroadcasts();
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(a) {
                    private final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadGlobalNotificationsSettings$132$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
            }
        }
        if (!getUserConfig().notificationsSignUpSettingsLoaded) {
            loadSignUpNotificationsSettings();
        }
    }

    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$132$MessagesController(int type, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(response, type) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$131$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$131$MessagesController(TLObject response, int type) {
        if (response != null) {
            this.loadingNotificationSettings--;
            TLRPC.TL_peerNotifySettings notify_settings = (TLRPC.TL_peerNotifySettings) response;
            SharedPreferences.Editor editor = this.notificationsPreferences.edit();
            if (type == 0) {
                if ((notify_settings.flags & 1) != 0) {
                    editor.putBoolean("EnablePreviewGroup", notify_settings.show_previews);
                }
                int i = notify_settings.flags;
                if ((notify_settings.flags & 4) != 0) {
                    editor.putInt("EnableGroup2", notify_settings.mute_until);
                }
            } else if (type == 1) {
                if ((notify_settings.flags & 1) != 0) {
                    editor.putBoolean("EnablePreviewAll", notify_settings.show_previews);
                }
                int i2 = notify_settings.flags;
                if ((notify_settings.flags & 4) != 0) {
                    editor.putInt("EnableAll2", notify_settings.mute_until);
                }
            } else if (type == 2) {
                if ((notify_settings.flags & 1) != 0) {
                    editor.putBoolean("EnablePreviewChannel", notify_settings.show_previews);
                }
                int i3 = notify_settings.flags;
                if ((notify_settings.flags & 4) != 0) {
                    editor.putInt("EnableChannel2", notify_settings.mute_until);
                }
            }
            editor.commit();
            if (this.loadingNotificationSettings == 0) {
                getUserConfig().notificationsSettingsLoaded = true;
                getUserConfig().saveConfig(false);
            }
        }
    }

    public void loadSignUpNotificationsSettings() {
        if (!this.loadingNotificationSignUpSettings) {
            this.loadingNotificationSignUpSettings = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_account_getContactSignUpNotification(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadSignUpNotificationsSettings$134$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$134$MessagesController(TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(response) {
            private final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$133$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$133$MessagesController(TLObject response) {
        this.loadingNotificationSignUpSettings = false;
        SharedPreferences.Editor editor = this.notificationsPreferences.edit();
        boolean z = response instanceof TLRPC.TL_boolFalse;
        this.enableJoined = z;
        editor.putBoolean("EnableContactJoined", z);
        editor.commit();
        getUserConfig().notificationsSignUpSettingsLoaded = true;
        getUserConfig().saveConfig(false);
    }

    public void forceResetDialogs() {
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        getNotificationsController().deleteAllNotificationChannels();
    }

    /* access modifiers changed from: protected */
    public void loadUnknownDialog(TLRPC.InputPeer peer, long taskId) {
        long newTaskId;
        TLRPC.InputPeer inputPeer = peer;
        if (inputPeer != null) {
            long dialogId = DialogObject.getPeerDialogId(peer);
            if (this.gettingUnknownDialogs.indexOfKey(dialogId) < 0) {
                this.gettingUnknownDialogs.put(dialogId, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("load unknown dialog " + dialogId);
                }
                TLRPC.TL_messages_getPeerDialogs req = new TLRPC.TL_messages_getPeerDialogs();
                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                inputDialogPeer.peer = inputPeer;
                req.peers.add(inputDialogPeer);
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(peer.getObjectSize() + 4);
                        data.writeInt32(15);
                        inputPeer.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(newTaskId, dialogId) {
                    private final /* synthetic */ long f$1;
                    private final /* synthetic */ long f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadUnknownDialog$135$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$loadUnknownDialog$135$MessagesController(long newTaskId, long dialogId, TLObject response, TLRPC.TL_error error) {
        long j = newTaskId;
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            if (!res.dialogs.isEmpty() && !(res.dialogs.get(0) instanceof TLRPC.TL_dialogFolder)) {
                TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                dialogs.dialogs.addAll(res.dialogs);
                dialogs.messages.addAll(res.messages);
                dialogs.users.addAll(res.users);
                dialogs.chats.addAll(res.chats);
                processLoadedDialogs(dialogs, (ArrayList<TLRPC.EncryptedChat>) null, ((TLRPC.TL_dialog) res.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_UNKNOWN, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownDialogs.delete(dialogId);
    }

    private void fetchFolderInLoadedPinnedDialogs(TLRPC.TL_messages_peerDialogs res) {
        int N;
        TLRPC.InputPeer inputPeer;
        TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = res;
        int a = 0;
        int N2 = tL_messages_peerDialogs.dialogs.size();
        while (a < N2) {
            TLRPC.Dialog dialog = tL_messages_peerDialogs.dialogs.get(a);
            if (dialog instanceof TLRPC.TL_dialogFolder) {
                TLRPC.TL_dialogFolder dialogFolder = (TLRPC.TL_dialogFolder) dialog;
                long folderTopDialogId = DialogObject.getPeerDialogId(dialog.peer);
                if (dialogFolder.top_message != 0) {
                    long folderTopDialogId2 = 0;
                    if (folderTopDialogId == 0) {
                        N = N2;
                        long j = folderTopDialogId;
                    } else {
                        int b = 0;
                        int N22 = tL_messages_peerDialogs.messages.size();
                        while (b < N22) {
                            TLRPC.Message message = tL_messages_peerDialogs.messages.get(b);
                            if (folderTopDialogId == MessageObject.getDialogId(message) && dialog.top_message == message.id) {
                                TLRPC.TL_dialog newDialog = new TLRPC.TL_dialog();
                                newDialog.peer = dialog.peer;
                                newDialog.top_message = dialog.top_message;
                                newDialog.folder_id = dialogFolder.folder.id;
                                newDialog.flags |= 16;
                                tL_messages_peerDialogs.dialogs.add(newDialog);
                                if (!(dialog.peer instanceof TLRPC.TL_peerChannel)) {
                                    long j2 = folderTopDialogId;
                                    if (!(dialog.peer instanceof TLRPC.TL_peerChat)) {
                                        inputPeer = new TLRPC.TL_inputPeerUser();
                                        inputPeer.user_id = dialog.peer.user_id;
                                        int c = 0;
                                        int N3 = tL_messages_peerDialogs.users.size();
                                        while (true) {
                                            if (c >= N3) {
                                                break;
                                            }
                                            TLRPC.User user = tL_messages_peerDialogs.users.get(c);
                                            if (user.id == inputPeer.user_id) {
                                                inputPeer.access_hash = user.access_hash;
                                                break;
                                            }
                                            c++;
                                        }
                                    } else {
                                        inputPeer = new TLRPC.TL_inputPeerChat();
                                        inputPeer.chat_id = dialog.peer.chat_id;
                                    }
                                } else {
                                    inputPeer = new TLRPC.TL_inputPeerChannel();
                                    inputPeer.channel_id = dialog.peer.channel_id;
                                    int c2 = 0;
                                    int N32 = tL_messages_peerDialogs.chats.size();
                                    while (true) {
                                        if (c2 >= N32) {
                                            long j3 = folderTopDialogId;
                                            break;
                                        }
                                        int N4 = N2;
                                        TLRPC.Chat chat = tL_messages_peerDialogs.chats.get(c2);
                                        long folderTopDialogId3 = folderTopDialogId;
                                        if (chat.id == inputPeer.channel_id) {
                                            inputPeer.access_hash = chat.access_hash;
                                            break;
                                        }
                                        c2++;
                                        N2 = N4;
                                        folderTopDialogId = folderTopDialogId3;
                                    }
                                }
                                loadUnknownDialog(inputPeer, 0);
                                return;
                            }
                            int N5 = N2;
                            b++;
                            folderTopDialogId2 = folderTopDialogId2;
                            N2 = N5;
                            folderTopDialogId = folderTopDialogId;
                        }
                        long j4 = folderTopDialogId;
                        return;
                    }
                } else {
                    N = N2;
                    long j5 = folderTopDialogId;
                }
                tL_messages_peerDialogs.dialogs.remove(dialogFolder);
            } else {
                N = N2;
            }
            a++;
            N2 = N;
        }
    }

    private void resetDialogs(boolean query, int seq, int newPts, int date, int qts) {
        TLRPC.messages_Dialogs messages_dialogs;
        int messagesCount;
        int messagesCount2;
        TLRPC.User user;
        TLRPC.Chat chat;
        MessageObject mess;
        int a;
        TLRPC.Chat chat2;
        if (query) {
            if (!this.resetingDialogs) {
                getUserConfig().setPinnedDialogsLoaded(1, false);
                this.resetingDialogs = true;
                int i = seq;
                int i2 = newPts;
                int i3 = date;
                int i4 = qts;
                getConnectionsManager().sendRequest(new TLRPC.TL_messages_getPinnedDialogs(), new RequestDelegate(i, i2, i3, i4) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ int f$3;
                    private final /* synthetic */ int f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$resetDialogs$136$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                    }
                });
                TLRPC.TL_messages_getDialogs req2 = new TLRPC.TL_messages_getDialogs();
                req2.limit = 100;
                req2.exclude_pinned = true;
                req2.offset_peer = new TLRPC.TL_inputPeerEmpty();
                getConnectionsManager().sendRequest(req2, new RequestDelegate(i, i2, i3, i4) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ int f$3;
                    private final /* synthetic */ int f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$resetDialogs$137$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                    }
                });
            }
        } else if (this.resetDialogsPinned != null && (messages_dialogs = this.resetDialogsAll) != null) {
            int messagesCount3 = messages_dialogs.messages.size();
            int dialogsCount = this.resetDialogsAll.dialogs.size();
            fetchFolderInLoadedPinnedDialogs(this.resetDialogsPinned);
            this.resetDialogsAll.dialogs.addAll(this.resetDialogsPinned.dialogs);
            this.resetDialogsAll.messages.addAll(this.resetDialogsPinned.messages);
            this.resetDialogsAll.users.addAll(this.resetDialogsPinned.users);
            this.resetDialogsAll.chats.addAll(this.resetDialogsPinned.chats);
            LongSparseArray<TLRPC.Dialog> new_dialogs_dict = new LongSparseArray<>();
            LongSparseArray<MessageObject> new_dialogMessage = new LongSparseArray<>();
            SparseArray<TLRPC.User> usersDict = new SparseArray<>();
            SparseArray<TLRPC.Chat> chatsDict = new SparseArray<>();
            for (int a2 = 0; a2 < this.resetDialogsAll.users.size(); a2++) {
                TLRPC.User u = this.resetDialogsAll.users.get(a2);
                usersDict.put(u.id, u);
            }
            for (int a3 = 0; a3 < this.resetDialogsAll.chats.size(); a3++) {
                TLRPC.Chat c = this.resetDialogsAll.chats.get(a3);
                chatsDict.put(c.id, c);
            }
            TLRPC.Message lastMessage = null;
            int a4 = 0;
            while (a4 < this.resetDialogsAll.messages.size()) {
                TLRPC.Message message = this.resetDialogsAll.messages.get(a4);
                if (a4 < messagesCount3 && (lastMessage == null || message.date < lastMessage.date)) {
                    lastMessage = message;
                }
                if (message.to_id.channel_id != 0) {
                    TLRPC.Chat chat3 = chatsDict.get(message.to_id.channel_id);
                    if (chat3 != null && chat3.left) {
                        a = a4;
                        a4 = a + 1;
                    } else if (chat3 != null && chat3.megagroup) {
                        message.flags |= Integer.MIN_VALUE;
                    }
                } else if (!(message.to_id.chat_id == 0 || (chat2 = chatsDict.get(message.to_id.chat_id)) == null || chat2.migrated_to == null)) {
                    a = a4;
                    a4 = a + 1;
                }
                TLRPC.Message message2 = message;
                a = a4;
                MessageObject messageObject = new MessageObject(this.currentAccount, message, usersDict, chatsDict, false);
                new_dialogMessage.put(messageObject.getDialogId(), messageObject);
                a4 = a + 1;
            }
            int i5 = a4;
            for (int a5 = 0; a5 < this.resetDialogsAll.dialogs.size(); a5++) {
                TLRPC.Dialog d = this.resetDialogsAll.dialogs.get(a5);
                DialogObject.initDialog(d);
                if (d.id != 0) {
                    if (d.last_message_date == 0 && (mess = new_dialogMessage.get(d.id)) != null) {
                        d.last_message_date = mess.messageOwner.date;
                    }
                    if (DialogObject.isChannel(d)) {
                        TLRPC.Chat chat4 = chatsDict.get(-((int) d.id));
                        if (chat4 == null || !chat4.left) {
                            this.channelsPts.put(-((int) d.id), d.pts);
                        }
                    } else if (!(((int) d.id) >= 0 || (chat = chatsDict.get(-((int) d.id))) == null || chat.migrated_to == null)) {
                    }
                    new_dialogs_dict.put(d.id, d);
                    Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(d.id));
                    if (value == null) {
                        value = 0;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
                    Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(d.id));
                    if (value2 == null) {
                        value2 = 0;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
                }
            }
            ImageLoader.saveMessagesThumbs(this.resetDialogsAll.messages);
            int a6 = 0;
            while (a6 < this.resetDialogsAll.messages.size()) {
                TLRPC.Message message3 = this.resetDialogsAll.messages.get(a6);
                if ((message3.action instanceof TLRPC.TL_messageActionChatDeleteUser) && (user = usersDict.get(message3.action.user_id)) != null && user.bot) {
                    message3.reply_markup = new TLRPC.TL_replyKeyboardHide();
                    message3.flags |= 64;
                }
                if (message3.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
                    messagesCount2 = messagesCount3;
                } else if (message3.action instanceof TLRPC.TL_messageActionChannelCreate) {
                    messagesCount2 = messagesCount3;
                } else {
                    ConcurrentHashMap<Long, Integer> read_max = message3.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer value3 = read_max.get(Long.valueOf(message3.dialog_id));
                    if (value3 == null) {
                        messagesCount = messagesCount3;
                        value3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message3.out, message3.dialog_id));
                        read_max.put(Long.valueOf(message3.dialog_id), value3);
                    } else {
                        messagesCount = messagesCount3;
                    }
                    message3.unread = value3.intValue() < message3.id;
                    a6++;
                    messagesCount3 = messagesCount;
                }
                message3.unread = false;
                message3.media_unread = false;
                a6++;
                messagesCount3 = messagesCount;
            }
            SparseArray<TLRPC.Chat> sparseArray = chatsDict;
            getMessagesStorage().resetDialogs(this.resetDialogsAll, messagesCount3, seq, newPts, date, qts, new_dialogs_dict, new_dialogMessage, lastMessage, dialogsCount);
            this.resetDialogsPinned = null;
            this.resetDialogsAll = null;
        }
    }

    public /* synthetic */ void lambda$resetDialogs$136$MessagesController(int seq, int newPts, int date, int qts, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            this.resetDialogsPinned = (TLRPC.TL_messages_peerDialogs) response;
            for (int a = 0; a < this.resetDialogsPinned.dialogs.size(); a++) {
                this.resetDialogsPinned.dialogs.get(a).pinned = true;
            }
            resetDialogs(false, seq, newPts, date, qts);
        }
    }

    public /* synthetic */ void lambda$resetDialogs$137$MessagesController(int seq, int newPts, int date, int qts, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            this.resetDialogsAll = (TLRPC.messages_Dialogs) response;
            resetDialogs(false, seq, newPts, date, qts);
        }
    }

    /* access modifiers changed from: protected */
    public void completeDialogsReset(TLRPC.messages_Dialogs dialogsRes, int messagesCount, int seq, int newPts, int date, int qts, LongSparseArray<TLRPC.Dialog> new_dialogs_dict, LongSparseArray<MessageObject> new_dialogMessage, TLRPC.Message lastMessage) {
        Utilities.stageQueue.postRunnable(new Runnable(newPts, date, qts, dialogsRes, new_dialogs_dict, new_dialogMessage) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ TLRPC.messages_Dialogs f$4;
            private final /* synthetic */ LongSparseArray f$5;
            private final /* synthetic */ LongSparseArray f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$139$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$completeDialogsReset$139$MessagesController(int newPts, int date, int qts, TLRPC.messages_Dialogs dialogsRes, LongSparseArray new_dialogs_dict, LongSparseArray new_dialogMessage) {
        this.gettingDifference = false;
        getMessagesStorage().setLastPtsValue(newPts);
        getMessagesStorage().setLastDateValue(date);
        getMessagesStorage().setLastQtsValue(qts);
        getDifference();
        AndroidUtilities.runOnUIThread(new Runnable(dialogsRes, new_dialogs_dict, new_dialogMessage) {
            private final /* synthetic */ TLRPC.messages_Dialogs f$1;
            private final /* synthetic */ LongSparseArray f$2;
            private final /* synthetic */ LongSparseArray f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$138$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$138$MessagesController(TLRPC.messages_Dialogs dialogsRes, LongSparseArray new_dialogs_dict, LongSparseArray new_dialogMessage) {
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        LongSparseArray longSparseArray = new_dialogs_dict;
        this.resetingDialogs = false;
        applyDialogsNotificationsSettings(messages_dialogs.dialogs);
        if (!getUserConfig().draftsLoaded) {
            getMediaDataController().loadDrafts();
        }
        putUsers(messages_dialogs.users, false);
        putChats(messages_dialogs.chats, false);
        for (int a = 0; a < this.allDialogs.size(); a++) {
            TLRPC.Dialog oldDialog = this.allDialogs.get(a);
            if (!DialogObject.isSecretDialogId(oldDialog.id)) {
                this.dialogs_dict.remove(oldDialog.id);
                MessageObject messageObject = this.dialogMessage.get(oldDialog.id);
                this.dialogMessage.remove(oldDialog.id);
                if (messageObject != null) {
                    this.dialogMessagesByIds.remove(messageObject.getId());
                    if (messageObject.messageOwner.random_id != 0) {
                        this.dialogMessagesByRandomIds.remove(messageObject.messageOwner.random_id);
                    }
                }
            }
        }
        for (int a2 = 0; a2 < new_dialogs_dict.size(); a2++) {
            long key = longSparseArray.keyAt(a2);
            TLRPC.Dialog value = (TLRPC.Dialog) longSparseArray.valueAt(a2);
            if (value.draft instanceof TLRPC.TL_draftMessage) {
                getMediaDataController().saveDraft(value.id, value.draft, (TLRPC.Message) null, false);
            }
            this.dialogs_dict.put(key, value);
            MessageObject messageObject2 = (MessageObject) new_dialogMessage.get(value.id);
            this.dialogMessage.put(key, messageObject2);
            if (messageObject2 != null && messageObject2.messageOwner.to_id.channel_id == 0) {
                this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                if (messageObject2.messageOwner.random_id != 0) {
                    this.dialogMessagesByRandomIds.put(messageObject2.messageOwner.random_id, messageObject2);
                }
            }
        }
        LongSparseArray longSparseArray2 = new_dialogMessage;
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int a3 = 0; a3 < size; a3++) {
            this.allDialogs.add(this.dialogs_dict.valueAt(a3));
        }
        sortDialogs((SparseArray<TLRPC.Chat>) null);
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, false);
        this.dialogsEndReached.put(1, true);
        this.serverDialogsEndReached.put(1, false);
        int totalDialogsLoadCount = getUserConfig().getTotalDialogsCount(0);
        int[] dialogsLoadOffset = getUserConfig().getDialogLoadOffsets(0);
        if (!(totalDialogsLoadCount >= 400 || dialogsLoadOffset[0] == -1 || dialogsLoadOffset[0] == Integer.MAX_VALUE)) {
            loadDialogs(0, 100, 0, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private void migrateDialogs(int offset, int offsetDate, int offsetUser, int offsetChat, int offsetChannel, long accessPeer) {
        if (!this.migratingDialogs && offset != -1) {
            this.migratingDialogs = true;
            TLRPC.TL_messages_getDialogs req = new TLRPC.TL_messages_getDialogs();
            req.exclude_pinned = true;
            req.limit = 100;
            req.offset_id = offset;
            req.offset_date = offsetDate;
            if (offset == 0) {
                req.offset_peer = new TLRPC.TL_inputPeerEmpty();
            } else {
                if (offsetChannel != 0) {
                    req.offset_peer = new TLRPC.TL_inputPeerChannel();
                    req.offset_peer.channel_id = offsetChannel;
                } else if (offsetUser != 0) {
                    req.offset_peer = new TLRPC.TL_inputPeerUser();
                    req.offset_peer.user_id = offsetUser;
                } else {
                    req.offset_peer = new TLRPC.TL_inputPeerChat();
                    req.offset_peer.chat_id = offsetChat;
                }
                req.offset_peer.access_hash = accessPeer;
            }
            getConnectionsManager().sendRequest(req, new RequestDelegate(offset) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$migrateDialogs$143$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$migrateDialogs$143$MessagesController(int offset, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable((TLRPC.messages_Dialogs) response, offset) {
                private final /* synthetic */ TLRPC.messages_Dialogs f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$141$MessagesController(this.f$1, this.f$2);
                }
            });
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$142$MessagesController();
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$141$MessagesController(TLRPC.messages_Dialogs dialogsRes, int offset) {
        int offsetId;
        int offsetId2;
        TLRPC.Message lastMessage;
        StringBuilder dids;
        int totalDialogsLoadCount;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        int i = offset;
        try {
            int i2 = 0;
            int totalDialogsLoadCount2 = getUserConfig().getTotalDialogsCount(0);
            getUserConfig().setTotalDialogsCount(0, messages_dialogs.dialogs.size() + totalDialogsLoadCount2);
            TLRPC.Message lastMessage2 = null;
            for (int a = 0; a < messages_dialogs.messages.size(); a++) {
                TLRPC.Message message = messages_dialogs.messages.get(a);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("search migrate id " + message.id + " date " + LocaleController.getInstance().formatterStats.format(((long) message.date) * 1000));
                }
                if (lastMessage2 == null || message.date < lastMessage2.date) {
                    lastMessage2 = message;
                }
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate step with id " + lastMessage2.id + " date " + LocaleController.getInstance().formatterStats.format(((long) lastMessage2.date) * 1000));
            }
            if (messages_dialogs.dialogs.size() >= 100) {
                offsetId = lastMessage2.id;
            } else {
                if (BuildVars.LOGS_ENABLED != 0) {
                    FileLog.d("migrate stop due to not 100 dialogs");
                }
                for (int i3 = 0; i3 < 2; i3++) {
                    getUserConfig().setDialogsLoadOffset(i3, Integer.MAX_VALUE, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                }
                offsetId = -1;
            }
            StringBuilder dids2 = new StringBuilder(messages_dialogs.dialogs.size() * 12);
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int a2 = 0; a2 < messages_dialogs.dialogs.size(); a2++) {
                TLRPC.Dialog dialog = messages_dialogs.dialogs.get(a2);
                DialogObject.initDialog(dialog);
                if (dids2.length() > 0) {
                    dids2.append(",");
                }
                dids2.append(dialog.id);
                longSparseArray.put(dialog.id, dialog);
            }
            int i4 = 1;
            SQLiteCursor cursor = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN (%s)", new Object[]{dids2.toString()}), new Object[0]);
            while (cursor.next()) {
                long did = cursor.longValue(i2);
                int folder_id = cursor.intValue(i4);
                TLRPC.Dialog dialog2 = (TLRPC.Dialog) longSparseArray.get(did);
                if (dialog2.folder_id == folder_id) {
                    longSparseArray.remove(did);
                    if (dialog2 != null) {
                        messages_dialogs.dialogs.remove(dialog2);
                        int a3 = 0;
                        while (true) {
                            if (a3 >= messages_dialogs.messages.size()) {
                                break;
                            }
                            TLRPC.Message message2 = messages_dialogs.messages.get(a3);
                            if (MessageObject.getDialogId(message2) == did) {
                                messages_dialogs.messages.remove(a3);
                                a3--;
                                if (message2.id == dialog2.top_message) {
                                    dialog2.top_message = 0;
                                    break;
                                }
                            }
                            a3++;
                        }
                    }
                    i2 = 0;
                    i4 = 1;
                }
            }
            cursor.dispose();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate found missing dialogs " + messages_dialogs.dialogs.size());
            }
            SQLiteCursor cursor2 = getMessagesStorage().getDatabase().queryFinalized("SELECT min(date) FROM dialogs WHERE date != 0 AND did >> 32 IN (0, -1)", new Object[0]);
            if (cursor2.next()) {
                int date = Math.max(1441062000, cursor2.intValue(0));
                int a4 = 0;
                while (a4 < messages_dialogs.messages.size()) {
                    try {
                        TLRPC.Message message3 = messages_dialogs.messages.get(a4);
                        if (message3.date < date) {
                            if (i != -1) {
                                int i5 = 0;
                                while (i5 < 2) {
                                    getUserConfig().setDialogsLoadOffset(i5, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                                    i5++;
                                    int i6 = offset;
                                    totalDialogsLoadCount2 = totalDialogsLoadCount2;
                                    offsetId = offsetId;
                                    dids2 = dids2;
                                    lastMessage2 = lastMessage2;
                                }
                                totalDialogsLoadCount = totalDialogsLoadCount2;
                                int i7 = offsetId;
                                lastMessage = lastMessage2;
                                dids = dids2;
                                offsetId = -1;
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("migrate stop due to reached loaded dialogs " + LocaleController.getInstance().formatterStats.format(((long) date) * 1000));
                                }
                            } else {
                                totalDialogsLoadCount = totalDialogsLoadCount2;
                                int i8 = offsetId;
                                lastMessage = lastMessage2;
                                dids = dids2;
                            }
                            messages_dialogs.messages.remove(a4);
                            a4--;
                            long did2 = MessageObject.getDialogId(message3);
                            TLRPC.Dialog dialog3 = (TLRPC.Dialog) longSparseArray.get(did2);
                            longSparseArray.remove(did2);
                            if (dialog3 != null) {
                                messages_dialogs.dialogs.remove(dialog3);
                            }
                        } else {
                            totalDialogsLoadCount = totalDialogsLoadCount2;
                            int i9 = offsetId;
                            lastMessage = lastMessage2;
                            dids = dids2;
                        }
                        a4++;
                        i = offset;
                        totalDialogsLoadCount2 = totalDialogsLoadCount;
                        dids2 = dids;
                        lastMessage2 = lastMessage;
                    } catch (Exception e) {
                        e = e;
                        int i10 = offset;
                        FileLog.e((Throwable) e);
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public final void run() {
                                MessagesController.this.lambda$null$140$MessagesController();
                            }
                        });
                    }
                }
                int i11 = totalDialogsLoadCount2;
                offsetId2 = offsetId;
                TLRPC.Message lastMessage3 = lastMessage2;
                StringBuilder sb = dids2;
                if (lastMessage3 != null) {
                    lastMessage2 = lastMessage3;
                    if (lastMessage2.date >= date) {
                        int i12 = offset;
                    } else if (offset != -1) {
                        for (int i13 = 0; i13 < 2; i13++) {
                            getUserConfig().setDialogsLoadOffset(i13, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                        }
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("migrate stop due to reached loaded dialogs " + LocaleController.getInstance().formatterStats.format(((long) date) * 1000));
                        }
                        offsetId2 = -1;
                    }
                } else {
                    int i14 = offset;
                    lastMessage2 = lastMessage3;
                }
            } else {
                StringBuilder sb2 = dids2;
                offsetId2 = offsetId;
            }
            cursor2.dispose();
            getUserConfig().migrateOffsetDate = lastMessage2.date;
            if (lastMessage2.to_id.channel_id != 0) {
                getUserConfig().migrateOffsetChannelId = lastMessage2.to_id.channel_id;
                getUserConfig().migrateOffsetChatId = 0;
                getUserConfig().migrateOffsetUserId = 0;
                int a5 = 0;
                while (true) {
                    if (a5 >= messages_dialogs.chats.size()) {
                        break;
                    }
                    TLRPC.Chat chat = messages_dialogs.chats.get(a5);
                    if (chat.id == getUserConfig().migrateOffsetChannelId) {
                        getUserConfig().migrateOffsetAccess = chat.access_hash;
                        break;
                    }
                    a5++;
                }
            } else if (lastMessage2.to_id.chat_id != 0) {
                getUserConfig().migrateOffsetChatId = lastMessage2.to_id.chat_id;
                getUserConfig().migrateOffsetChannelId = 0;
                getUserConfig().migrateOffsetUserId = 0;
                int a6 = 0;
                while (true) {
                    if (a6 >= messages_dialogs.chats.size()) {
                        break;
                    }
                    TLRPC.Chat chat2 = messages_dialogs.chats.get(a6);
                    if (chat2.id == getUserConfig().migrateOffsetChatId) {
                        getUserConfig().migrateOffsetAccess = chat2.access_hash;
                        break;
                    }
                    a6++;
                }
            } else if (lastMessage2.to_id.user_id != 0) {
                getUserConfig().migrateOffsetUserId = lastMessage2.to_id.user_id;
                getUserConfig().migrateOffsetChatId = 0;
                getUserConfig().migrateOffsetChannelId = 0;
                int a7 = 0;
                while (true) {
                    if (a7 >= messages_dialogs.users.size()) {
                        break;
                    }
                    TLRPC.User user = messages_dialogs.users.get(a7);
                    if (user.id == getUserConfig().migrateOffsetUserId) {
                        getUserConfig().migrateOffsetAccess = user.access_hash;
                        break;
                    }
                    a7++;
                }
            }
            SQLiteCursor sQLiteCursor = cursor2;
            processLoadedDialogs(dialogsRes, (ArrayList<TLRPC.EncryptedChat>) null, 0, offsetId2, 0, 0, false, true, false);
        } catch (Exception e2) {
            e = e2;
            FileLog.e((Throwable) e);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$140$MessagesController();
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$140$MessagesController() {
        this.migratingDialogs = false;
    }

    public /* synthetic */ void lambda$null$142$MessagesController() {
        this.migratingDialogs = false;
    }

    public void processLoadedDialogs(TLRPC.messages_Dialogs dialogsRes, ArrayList<TLRPC.EncryptedChat> encChats, int folderId, int offset, int count, int loadType, boolean resetEnd, boolean migrate, boolean fromCache) {
        Utilities.stageQueue.postRunnable(new Runnable(folderId, loadType, dialogsRes, resetEnd, count, encChats, offset, fromCache, migrate) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ TLRPC.messages_Dialogs f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ ArrayList f$6;
            private final /* synthetic */ int f$7;
            private final /* synthetic */ boolean f$8;
            private final /* synthetic */ boolean f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$146$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedDialogs$146$MessagesController(int folderId, int loadType, TLRPC.messages_Dialogs dialogsRes, boolean resetEnd, int count, ArrayList encChats, int offset, boolean fromCache, boolean migrate) {
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict;
        SparseArray<TLRPC.User> usersDict;
        LongSparseArray<MessageObject> new_dialogMessage;
        LongSparseArray<TLRPC.Dialog> new_dialogs_dict;
        int i;
        SparseArray<TLRPC.User> usersDict2;
        SparseArray<TLRPC.User> usersDict3;
        SparseArray<TLRPC.User> usersDict4;
        LongSparseArray<MessageObject> new_dialogMessage2;
        SparseArray<TLRPC.Chat> chatsDict;
        TLRPC.Chat chat;
        MessageObject mess;
        long dialogsLoadOffsetAccess;
        int dialogsLoadOffsetUserId;
        int totalDialogsLoadCount;
        int dialogsLoadOffsetId;
        int dialogsLoadOffsetDate;
        SparseArray<TLRPC.User> usersDict5;
        int dialogsLoadOffsetChannelId;
        int totalDialogsLoadCount2;
        int dialogsLoadOffsetDate2;
        int totalDialogsLoadCount3;
        TLRPC.Message lastMessage;
        SparseArray<TLRPC.Chat> chatsDict2;
        TLRPC.Message lastMessage2;
        int a;
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict2;
        TLRPC.Chat chat2;
        int i2 = folderId;
        int i3 = loadType;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        ArrayList arrayList = encChats;
        if (!this.firstGettingTask) {
            getNewDeleteTask((ArrayList<Integer>) null, 0);
            this.firstGettingTask = true;
        }
        int[] dialogsLoadOffset = getUserConfig().getDialogLoadOffsets(i2);
        if (i3 == this.DIALOGS_LOAD_TYPE_CACHE && messages_dialogs.dialogs.size() == 0) {
            AndroidUtilities.runOnUIThread(new Runnable(dialogsRes, folderId, resetEnd, dialogsLoadOffset, count) {
                private final /* synthetic */ TLRPC.messages_Dialogs f$1;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ boolean f$3;
                private final /* synthetic */ int[] f$4;
                private final /* synthetic */ int f$5;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                }

                public final void run() {
                    MessagesController.this.lambda$null$144$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
                }
            });
            return;
        }
        LongSparseArray<TLRPC.Dialog> new_dialogs_dict2 = new LongSparseArray<>();
        LongSparseArray<MessageObject> new_dialogMessage3 = new LongSparseArray<>();
        SparseArray<TLRPC.User> usersDict6 = new SparseArray<>();
        SparseArray<TLRPC.Chat> chatsDict3 = new SparseArray<>();
        for (int a2 = 0; a2 < messages_dialogs.users.size(); a2++) {
            TLRPC.User u = messages_dialogs.users.get(a2);
            usersDict6.put(u.id, u);
        }
        for (int a3 = 0; a3 < messages_dialogs.chats.size(); a3++) {
            TLRPC.Chat c = messages_dialogs.chats.get(a3);
            chatsDict3.put(c.id, c);
        }
        if (arrayList != null) {
            SparseArray<TLRPC.EncryptedChat> enc_chats_dict3 = new SparseArray<>();
            int N = encChats.size();
            for (int a4 = 0; a4 < N; a4++) {
                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) arrayList.get(a4);
                enc_chats_dict3.put(encryptedChat.id, encryptedChat);
            }
            enc_chats_dict = enc_chats_dict3;
        } else {
            enc_chats_dict = null;
        }
        if (i3 == this.DIALOGS_LOAD_TYPE_CACHE) {
            this.nextDialogsCacheOffset.put(i2, offset + count);
        }
        TLRPC.Message lastMessage3 = null;
        int a5 = 0;
        while (a5 < messages_dialogs.messages.size()) {
            TLRPC.Message message = messages_dialogs.messages.get(a5);
            if (lastMessage3 == null || message.date < lastMessage3.date) {
                lastMessage = message;
            } else {
                lastMessage = lastMessage3;
            }
            if (message.to_id.channel_id != 0) {
                TLRPC.Chat chat3 = chatsDict3.get(message.to_id.channel_id);
                if (chat3 == null || !chat3.left) {
                    a = a5;
                } else {
                    long j = this.proxyDialogId;
                    if (j != 0) {
                        a = a5;
                        if (j != ((long) (-chat3.id))) {
                            chatsDict2 = chatsDict3;
                            lastMessage2 = lastMessage;
                            enc_chats_dict2 = enc_chats_dict;
                        }
                    } else {
                        a = a5;
                        chatsDict2 = chatsDict3;
                        lastMessage2 = lastMessage;
                        enc_chats_dict2 = enc_chats_dict;
                    }
                    a5 = a + 1;
                    ArrayList arrayList2 = encChats;
                    enc_chats_dict = enc_chats_dict2;
                    lastMessage3 = lastMessage2;
                    chatsDict3 = chatsDict2;
                }
                if (chat3 != null && chat3.megagroup) {
                    message.flags |= Integer.MIN_VALUE;
                }
            } else {
                a = a5;
                if (!(message.to_id.chat_id == 0 || (chat2 = chatsDict3.get(message.to_id.chat_id)) == null || chat2.migrated_to == null)) {
                    chatsDict2 = chatsDict3;
                    lastMessage2 = lastMessage;
                    enc_chats_dict2 = enc_chats_dict;
                    a5 = a + 1;
                    ArrayList arrayList22 = encChats;
                    enc_chats_dict = enc_chats_dict2;
                    lastMessage3 = lastMessage2;
                    chatsDict3 = chatsDict2;
                }
            }
            lastMessage2 = lastMessage;
            enc_chats_dict2 = enc_chats_dict;
            chatsDict2 = chatsDict3;
            MessageObject messageObject = new MessageObject(this.currentAccount, message, usersDict6, chatsDict3, false);
            new_dialogMessage3.put(messageObject.getDialogId(), messageObject);
            a5 = a + 1;
            ArrayList arrayList222 = encChats;
            enc_chats_dict = enc_chats_dict2;
            lastMessage3 = lastMessage2;
            chatsDict3 = chatsDict2;
        }
        int i4 = a5;
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict4 = enc_chats_dict;
        SparseArray<TLRPC.Chat> chatsDict4 = chatsDict3;
        if (fromCache || migrate || dialogsLoadOffset[0] == -1 || i3 != 0) {
            usersDict = usersDict6;
            TLRPC.Message message2 = lastMessage3;
            new_dialogs_dict = new_dialogs_dict2;
            new_dialogMessage = new_dialogMessage3;
        } else {
            int totalDialogsLoadCount4 = getUserConfig().getTotalDialogsCount(i2);
            long dialogsLoadOffsetAccess2 = 0;
            if (lastMessage3 != null) {
                usersDict5 = usersDict6;
                dialogsLoadOffsetDate2 = 0;
                if (lastMessage3.id != dialogsLoadOffset[0]) {
                    int totalDialogsLoadCount5 = totalDialogsLoadCount4 + messages_dialogs.dialogs.size();
                    int dialogsLoadOffsetId2 = lastMessage3.id;
                    int dialogsLoadOffsetDate3 = lastMessage3.date;
                    dialogsLoadOffsetId = dialogsLoadOffsetId2;
                    if (lastMessage3.to_id.channel_id != 0) {
                        int dialogsLoadOffsetChannelId2 = lastMessage3.to_id.channel_id;
                        int a6 = 0;
                        while (true) {
                            totalDialogsLoadCount3 = totalDialogsLoadCount5;
                            if (a6 >= messages_dialogs.chats.size()) {
                                dialogsLoadOffsetDate = dialogsLoadOffsetDate3;
                                break;
                            }
                            TLRPC.Chat chat4 = messages_dialogs.chats.get(a6);
                            dialogsLoadOffsetDate = dialogsLoadOffsetDate3;
                            if (chat4.id == dialogsLoadOffsetChannelId2) {
                                dialogsLoadOffsetAccess2 = chat4.access_hash;
                                break;
                            }
                            a6++;
                            dialogsLoadOffsetDate3 = dialogsLoadOffsetDate;
                            totalDialogsLoadCount5 = totalDialogsLoadCount3;
                        }
                        dialogsLoadOffsetUserId = 0;
                        dialogsLoadOffsetAccess = dialogsLoadOffsetAccess2;
                        totalDialogsLoadCount2 = totalDialogsLoadCount3;
                        dialogsLoadOffsetChannelId = dialogsLoadOffsetChannelId2;
                        totalDialogsLoadCount = 0;
                    } else {
                        int totalDialogsLoadCount6 = totalDialogsLoadCount5;
                        dialogsLoadOffsetDate = dialogsLoadOffsetDate3;
                        if (lastMessage3.to_id.chat_id != 0) {
                            int dialogsLoadOffsetChatId = lastMessage3.to_id.chat_id;
                            int a7 = 0;
                            while (true) {
                                if (a7 >= messages_dialogs.chats.size()) {
                                    break;
                                }
                                TLRPC.Chat chat5 = messages_dialogs.chats.get(a7);
                                if (chat5.id == dialogsLoadOffsetChatId) {
                                    dialogsLoadOffsetAccess2 = chat5.access_hash;
                                    break;
                                }
                                a7++;
                            }
                            dialogsLoadOffsetUserId = 0;
                            dialogsLoadOffsetAccess = dialogsLoadOffsetAccess2;
                            totalDialogsLoadCount2 = totalDialogsLoadCount6;
                            dialogsLoadOffsetChannelId = 0;
                            totalDialogsLoadCount = dialogsLoadOffsetChatId;
                        } else if (lastMessage3.to_id.user_id != 0) {
                            int dialogsLoadOffsetUserId2 = lastMessage3.to_id.user_id;
                            int a8 = 0;
                            while (true) {
                                if (a8 >= messages_dialogs.users.size()) {
                                    break;
                                }
                                TLRPC.User user = messages_dialogs.users.get(a8);
                                if (user.id == dialogsLoadOffsetUserId2) {
                                    dialogsLoadOffsetAccess2 = user.access_hash;
                                    break;
                                }
                                a8++;
                            }
                            dialogsLoadOffsetUserId = dialogsLoadOffsetUserId2;
                            dialogsLoadOffsetAccess = dialogsLoadOffsetAccess2;
                            totalDialogsLoadCount2 = totalDialogsLoadCount6;
                            dialogsLoadOffsetChannelId = 0;
                            totalDialogsLoadCount = 0;
                        } else {
                            dialogsLoadOffsetUserId = 0;
                            dialogsLoadOffsetAccess = 0;
                            totalDialogsLoadCount2 = totalDialogsLoadCount6;
                            dialogsLoadOffsetChannelId = 0;
                            totalDialogsLoadCount = 0;
                        }
                    }
                    SparseArray<TLRPC.User> usersDict7 = usersDict5;
                    TLRPC.Message message3 = lastMessage3;
                    usersDict = usersDict7;
                    int i5 = dialogsLoadOffsetChannelId;
                    new_dialogMessage = new_dialogMessage3;
                    int i6 = dialogsLoadOffsetChannelId;
                    new_dialogs_dict = new_dialogs_dict2;
                    getUserConfig().setDialogsLoadOffset(folderId, dialogsLoadOffsetId, dialogsLoadOffsetDate, dialogsLoadOffsetUserId, totalDialogsLoadCount, i5, dialogsLoadOffsetAccess);
                    getUserConfig().setTotalDialogsCount(i2, totalDialogsLoadCount2);
                    getUserConfig().saveConfig(false);
                }
            } else {
                usersDict5 = usersDict6;
                dialogsLoadOffsetDate2 = 0;
            }
            dialogsLoadOffsetId = Integer.MAX_VALUE;
            totalDialogsLoadCount = 0;
            dialogsLoadOffsetUserId = 0;
            dialogsLoadOffsetAccess = 0;
            totalDialogsLoadCount2 = totalDialogsLoadCount4;
            dialogsLoadOffsetChannelId = 0;
            SparseArray<TLRPC.User> usersDict72 = usersDict5;
            TLRPC.Message message32 = lastMessage3;
            usersDict = usersDict72;
            int i52 = dialogsLoadOffsetChannelId;
            new_dialogMessage = new_dialogMessage3;
            int i62 = dialogsLoadOffsetChannelId;
            new_dialogs_dict = new_dialogs_dict2;
            getUserConfig().setDialogsLoadOffset(folderId, dialogsLoadOffsetId, dialogsLoadOffsetDate, dialogsLoadOffsetUserId, totalDialogsLoadCount, i52, dialogsLoadOffsetAccess);
            getUserConfig().setTotalDialogsCount(i2, totalDialogsLoadCount2);
            getUserConfig().saveConfig(false);
        }
        ArrayList<TLRPC.Dialog> dialogsToReload = new ArrayList<>();
        int a9 = 0;
        while (a9 < messages_dialogs.dialogs.size()) {
            TLRPC.Dialog d = messages_dialogs.dialogs.get(a9);
            DialogObject.initDialog(d);
            if (d.id == 0) {
                new_dialogMessage2 = new_dialogMessage;
                chatsDict = chatsDict4;
                int i7 = loadType;
            } else {
                int lower_id = (int) d.id;
                int high_id = (int) (d.id >> 32);
                if (lower_id == 0 && enc_chats_dict4 != null && enc_chats_dict4.get(high_id) == null) {
                    new_dialogMessage2 = new_dialogMessage;
                    chatsDict = chatsDict4;
                    int i8 = loadType;
                } else {
                    long j2 = this.proxyDialogId;
                    if (j2 != 0 && j2 == d.id) {
                        this.proxyDialog = d;
                    }
                    if (d.last_message_date == 0 && (mess = new_dialogMessage.get(d.id)) != null) {
                        d.last_message_date = mess.messageOwner.date;
                    }
                    boolean allowCheck = true;
                    if (DialogObject.isChannel(d)) {
                        chatsDict = chatsDict4;
                        TLRPC.Chat chat6 = chatsDict.get(-((int) d.id));
                        if (chat6 != null) {
                            if (!chat6.megagroup) {
                                allowCheck = false;
                            }
                            if (chat6.left) {
                                long j3 = this.proxyDialogId;
                                if (j3 != 0) {
                                    int i9 = high_id;
                                    int i10 = lower_id;
                                    if (j3 != d.id) {
                                        new_dialogMessage2 = new_dialogMessage;
                                        int i11 = loadType;
                                    }
                                } else {
                                    int i12 = lower_id;
                                    new_dialogMessage2 = new_dialogMessage;
                                    int i13 = loadType;
                                }
                            } else {
                                int i14 = lower_id;
                            }
                        } else {
                            int i15 = lower_id;
                        }
                        this.channelsPts.put(-((int) d.id), d.pts);
                    } else {
                        chatsDict = chatsDict4;
                        int i16 = high_id;
                        if (!(((int) d.id) >= 0 || (chat = chatsDict.get(-((int) d.id))) == null || chat.migrated_to == null)) {
                            new_dialogMessage2 = new_dialogMessage;
                            int i17 = loadType;
                        }
                    }
                    new_dialogs_dict.put(d.id, d);
                    if (allowCheck) {
                        new_dialogMessage2 = new_dialogMessage;
                        if (loadType == this.DIALOGS_LOAD_TYPE_CACHE && ((d.read_outbox_max_id == 0 || d.read_inbox_max_id == 0) && d.top_message != 0)) {
                            dialogsToReload.add(d);
                        }
                    } else {
                        new_dialogMessage2 = new_dialogMessage;
                        int i18 = loadType;
                    }
                    Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(d.id));
                    if (value == null) {
                        value = 0;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
                    Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(d.id));
                    if (value2 == null) {
                        value2 = 0;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
                }
            }
            a9++;
            chatsDict4 = chatsDict;
            new_dialogMessage = new_dialogMessage2;
        }
        LongSparseArray<MessageObject> new_dialogMessage4 = new_dialogMessage;
        SparseArray<TLRPC.Chat> chatsDict5 = chatsDict4;
        int i19 = loadType;
        if (i19 != this.DIALOGS_LOAD_TYPE_CACHE) {
            ImageLoader.saveMessagesThumbs(messages_dialogs.messages);
            for (int a10 = 0; a10 < messages_dialogs.messages.size(); a10++) {
                TLRPC.Message message4 = messages_dialogs.messages.get(a10);
                if (message4.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
                    usersDict2 = usersDict;
                    TLRPC.User user2 = usersDict2.get(message4.action.user_id);
                    if (user2 != null && user2.bot) {
                        message4.reply_markup = new TLRPC.TL_replyKeyboardHide();
                        message4.flags |= 64;
                    }
                } else {
                    usersDict2 = usersDict;
                }
                if (message4.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
                    usersDict4 = usersDict2;
                } else if (message4.action instanceof TLRPC.TL_messageActionChannelCreate) {
                    usersDict4 = usersDict2;
                } else {
                    ConcurrentHashMap<Long, Integer> read_max = message4.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer value3 = read_max.get(Long.valueOf(message4.dialog_id));
                    if (value3 == null) {
                        usersDict3 = usersDict2;
                        value3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message4.out, message4.dialog_id));
                        read_max.put(Long.valueOf(message4.dialog_id), value3);
                    } else {
                        usersDict3 = usersDict2;
                    }
                    message4.unread = value3.intValue() < message4.id;
                }
                message4.unread = false;
                message4.media_unread = false;
            }
            i = 0;
            getMessagesStorage().putDialogs(messages_dialogs, 0);
        } else {
            i = 0;
        }
        if (i19 == this.DIALOGS_LOAD_TYPE_CHANNEL) {
            TLRPC.Chat chat7 = messages_dialogs.chats.get(i);
            getChannelDifference(chat7.id);
            checkChannelInviter(chat7.id);
        }
        SparseArray<TLRPC.User> sparseArray = usersDict;
        SparseArray<TLRPC.EncryptedChat> sparseArray2 = enc_chats_dict4;
        LongSparseArray<TLRPC.Dialog> longSparseArray = new_dialogs_dict;
        AndroidUtilities.runOnUIThread(new Runnable(loadType, dialogsRes, encChats, migrate, folderId, new_dialogs_dict, new_dialogMessage4, chatsDict5, count, fromCache, offset, dialogsToReload) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ boolean f$10;
            private final /* synthetic */ int f$11;
            private final /* synthetic */ ArrayList f$12;
            private final /* synthetic */ TLRPC.messages_Dialogs f$2;
            private final /* synthetic */ ArrayList f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ LongSparseArray f$6;
            private final /* synthetic */ LongSparseArray f$7;
            private final /* synthetic */ SparseArray f$8;
            private final /* synthetic */ int f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
                this.f$10 = r11;
                this.f$11 = r12;
                this.f$12 = r13;
            }

            public final void run() {
                MessagesController.this.lambda$null$145$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12);
            }
        });
    }

    public /* synthetic */ void lambda$null$144$MessagesController(TLRPC.messages_Dialogs dialogsRes, int folderId, boolean resetEnd, int[] dialogsLoadOffset, int count) {
        putUsers(dialogsRes.users, true);
        this.loadingDialogs.put(folderId, false);
        if (resetEnd) {
            this.dialogsEndReached.put(folderId, false);
            this.serverDialogsEndReached.put(folderId, false);
        } else if (dialogsLoadOffset[0] == Integer.MAX_VALUE) {
            this.dialogsEndReached.put(folderId, true);
            this.serverDialogsEndReached.put(folderId, true);
        } else {
            loadDialogs(folderId, 0, count, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX WARNING: Removed duplicated region for block: B:103:0x01ec  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$145$MessagesController(int r29, im.bclpbkiauv.tgnet.TLRPC.messages_Dialogs r30, java.util.ArrayList r31, boolean r32, int r33, android.util.LongSparseArray r34, android.util.LongSparseArray r35, android.util.SparseArray r36, int r37, boolean r38, int r39, java.util.ArrayList r40) {
        /*
            r28 = this;
            r8 = r28
            r9 = r29
            r10 = r30
            r11 = r31
            r12 = r33
            r13 = r34
            r14 = r35
            r15 = r37
            int r0 = r8.DIALOGS_LOAD_TYPE_CACHE
            if (r9 == r0) goto L_0x0028
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r0 = r10.dialogs
            r8.applyDialogsNotificationsSettings(r0)
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            boolean r0 = r0.draftsLoaded
            if (r0 != 0) goto L_0x0028
            im.bclpbkiauv.messenger.MediaDataController r0 = r28.getMediaDataController()
            r0.loadDrafts()
        L_0x0028:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r0 = r10.users
            int r1 = r8.DIALOGS_LOAD_TYPE_CACHE
            r2 = 1
            r3 = 0
            if (r9 != r1) goto L_0x0032
            r1 = 1
            goto L_0x0033
        L_0x0032:
            r1 = 0
        L_0x0033:
            r8.putUsers(r0, r1)
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r0 = r10.chats
            int r1 = r8.DIALOGS_LOAD_TYPE_CACHE
            if (r9 != r1) goto L_0x003e
            r1 = 1
            goto L_0x003f
        L_0x003e:
            r1 = 0
        L_0x003f:
            r8.putChats(r0, r1)
            r0 = 0
            if (r11 == 0) goto L_0x006d
            r1 = 0
        L_0x0046:
            int r4 = r31.size()
            if (r1 >= r4) goto L_0x006d
            java.lang.Object r4 = r11.get(r1)
            im.bclpbkiauv.tgnet.TLRPC$EncryptedChat r4 = (im.bclpbkiauv.tgnet.TLRPC.EncryptedChat) r4
            boolean r5 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_encryptedChat
            if (r5 == 0) goto L_0x0067
            int r5 = r4.layer
            int r5 = im.bclpbkiauv.messenger.AndroidUtilities.getMyLayerVersion(r5)
            r6 = 101(0x65, float:1.42E-43)
            if (r5 >= r6) goto L_0x0067
            im.bclpbkiauv.messenger.SecretChatHelper r5 = r28.getSecretChatHelper()
            r5.sendNotifyLayerMessage(r4, r0)
        L_0x0067:
            r8.putEncryptedChat(r4, r2)
            int r1 = r1 + 1
            goto L_0x0046
        L_0x006d:
            if (r32 != 0) goto L_0x007c
            int r1 = r8.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r9 == r1) goto L_0x007c
            int r1 = r8.DIALOGS_LOAD_TYPE_CHANNEL
            if (r9 == r1) goto L_0x007c
            android.util.SparseBooleanArray r1 = r8.loadingDialogs
            r1.put(r12, r3)
        L_0x007c:
            r1 = 0
            r8.dialogsLoaded = r2
            r4 = 0
            if (r32 == 0) goto L_0x009a
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r5 = r8.allDialogs
            boolean r5 = r5.isEmpty()
            if (r5 != 0) goto L_0x009a
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r5 = r8.allDialogs
            int r6 = r5.size()
            int r6 = r6 - r2
            java.lang.Object r5 = r5.get(r6)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r5 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r5
            int r5 = r5.last_message_date
            goto L_0x009b
        L_0x009a:
            r5 = 0
        L_0x009b:
            r6 = r5
            r5 = 0
            r16 = r1
            r7 = r4
        L_0x00a0:
            int r1 = r34.size()
            if (r5 >= r1) goto L_0x0253
            long r0 = r13.keyAt(r5)
            java.lang.Object r19 = r13.valueAt(r5)
            r2 = r19
            im.bclpbkiauv.tgnet.TLRPC$Dialog r2 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r2
            int r3 = r8.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r9 == r3) goto L_0x00bf
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r3 = r8.dialogs_dict
            java.lang.Object r3 = r3.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r3 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r3
            goto L_0x00c0
        L_0x00bf:
            r3 = 0
        L_0x00c0:
            if (r32 == 0) goto L_0x00c8
            if (r3 == 0) goto L_0x00c8
            int r4 = r2.folder_id
            r3.folder_id = r4
        L_0x00c8:
            if (r32 == 0) goto L_0x00d4
            if (r6 == 0) goto L_0x00d4
            int r4 = r2.last_message_date
            if (r4 >= r6) goto L_0x00d4
            r22 = r6
            goto L_0x0246
        L_0x00d4:
            int r4 = r8.DIALOGS_LOAD_TYPE_CACHE
            if (r9 == r4) goto L_0x00f1
            im.bclpbkiauv.tgnet.TLRPC$DraftMessage r4 = r2.draft
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_draftMessage
            if (r4 == 0) goto L_0x00f1
            im.bclpbkiauv.messenger.MediaDataController r22 = r28.getMediaDataController()
            long r10 = r2.id
            im.bclpbkiauv.tgnet.TLRPC$DraftMessage r4 = r2.draft
            r26 = 0
            r27 = 0
            r23 = r10
            r25 = r4
            r22.saveDraft(r23, r25, r26, r27)
        L_0x00f1:
            int r4 = r2.folder_id
            if (r4 == r12) goto L_0x00f7
            int r7 = r7 + 1
        L_0x00f7:
            if (r3 != 0) goto L_0x0143
            r4 = 1
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r10 = r8.dialogs_dict
            r10.put(r0, r2)
            long r10 = r2.id
            java.lang.Object r10 = r14.get(r10)
            im.bclpbkiauv.messenger.MessageObject r10 = (im.bclpbkiauv.messenger.MessageObject) r10
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r11 = r8.dialogMessage
            r11.put(r0, r10)
            if (r10 == 0) goto L_0x0138
            im.bclpbkiauv.tgnet.TLRPC$Message r11 = r10.messageOwner
            im.bclpbkiauv.tgnet.TLRPC$Peer r11 = r11.to_id
            int r11 = r11.channel_id
            if (r11 != 0) goto L_0x0138
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r11 = r8.dialogMessagesByIds
            r16 = r4
            int r4 = r10.getId()
            r11.put(r4, r10)
            im.bclpbkiauv.tgnet.TLRPC$Message r4 = r10.messageOwner
            r11 = r6
            r19 = r7
            long r6 = r4.random_id
            r20 = 0
            int r4 = (r6 > r20 ? 1 : (r6 == r20 ? 0 : -1))
            if (r4 == 0) goto L_0x013d
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r4 = r8.dialogMessagesByRandomIds
            im.bclpbkiauv.tgnet.TLRPC$Message r6 = r10.messageOwner
            long r6 = r6.random_id
            r4.put(r6, r10)
            goto L_0x013d
        L_0x0138:
            r16 = r4
            r11 = r6
            r19 = r7
        L_0x013d:
            r22 = r11
            r7 = r19
            goto L_0x0246
        L_0x0143:
            r11 = r6
            r19 = r7
            int r4 = r8.DIALOGS_LOAD_TYPE_CACHE
            if (r9 == r4) goto L_0x014e
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r2.notify_settings
            r3.notify_settings = r4
        L_0x014e:
            boolean r4 = r2.pinned
            r3.pinned = r4
            int r4 = r2.pinnedNum
            r3.pinnedNum = r4
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r4 = r8.dialogMessage
            java.lang.Object r4 = r4.get(r0)
            im.bclpbkiauv.messenger.MessageObject r4 = (im.bclpbkiauv.messenger.MessageObject) r4
            if (r4 == 0) goto L_0x0169
            boolean r6 = r4.deleted
            if (r6 != 0) goto L_0x0165
            goto L_0x0169
        L_0x0165:
            r22 = r11
            goto L_0x01e6
        L_0x0169:
            if (r4 == 0) goto L_0x01e4
            int r6 = r3.top_message
            if (r6 <= 0) goto L_0x0170
            goto L_0x0165
        L_0x0170:
            long r6 = r2.id
            java.lang.Object r6 = r14.get(r6)
            im.bclpbkiauv.messenger.MessageObject r6 = (im.bclpbkiauv.messenger.MessageObject) r6
            boolean r7 = r4.deleted
            if (r7 != 0) goto L_0x018d
            if (r6 == 0) goto L_0x018d
            im.bclpbkiauv.tgnet.TLRPC$Message r7 = r6.messageOwner
            int r7 = r7.date
            im.bclpbkiauv.tgnet.TLRPC$Message r10 = r4.messageOwner
            int r10 = r10.date
            if (r7 <= r10) goto L_0x0189
            goto L_0x018d
        L_0x0189:
            r22 = r11
            goto L_0x0244
        L_0x018d:
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r7 = r8.dialogs_dict
            r7.put(r0, r2)
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessage
            r7.put(r0, r6)
            if (r6 == 0) goto L_0x01c5
            im.bclpbkiauv.tgnet.TLRPC$Message r7 = r6.messageOwner
            im.bclpbkiauv.tgnet.TLRPC$Peer r7 = r7.to_id
            int r7 = r7.channel_id
            if (r7 != 0) goto L_0x01c5
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessagesByIds
            int r10 = r6.getId()
            r7.put(r10, r6)
            if (r6 == 0) goto L_0x01c2
            im.bclpbkiauv.tgnet.TLRPC$Message r7 = r6.messageOwner
            r22 = r11
            long r10 = r7.random_id
            r20 = 0
            int r7 = (r10 > r20 ? 1 : (r10 == r20 ? 0 : -1))
            if (r7 == 0) goto L_0x01c7
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessagesByRandomIds
            im.bclpbkiauv.tgnet.TLRPC$Message r10 = r6.messageOwner
            long r10 = r10.random_id
            r7.put(r10, r6)
            goto L_0x01c7
        L_0x01c2:
            r22 = r11
            goto L_0x01c7
        L_0x01c5:
            r22 = r11
        L_0x01c7:
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessagesByIds
            int r10 = r4.getId()
            r7.remove(r10)
            im.bclpbkiauv.tgnet.TLRPC$Message r7 = r4.messageOwner
            long r10 = r7.random_id
            r20 = 0
            int r7 = (r10 > r20 ? 1 : (r10 == r20 ? 0 : -1))
            if (r7 == 0) goto L_0x0244
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessagesByRandomIds
            im.bclpbkiauv.tgnet.TLRPC$Message r10 = r4.messageOwner
            long r10 = r10.random_id
            r7.remove(r10)
            goto L_0x0244
        L_0x01e4:
            r22 = r11
        L_0x01e6:
            int r6 = r2.top_message
            int r7 = r3.top_message
            if (r6 < r7) goto L_0x0244
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r6 = r8.dialogs_dict
            r6.put(r0, r2)
            long r6 = r2.id
            java.lang.Object r6 = r14.get(r6)
            im.bclpbkiauv.messenger.MessageObject r6 = (im.bclpbkiauv.messenger.MessageObject) r6
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessage
            r7.put(r0, r6)
            if (r6 == 0) goto L_0x0226
            im.bclpbkiauv.tgnet.TLRPC$Message r7 = r6.messageOwner
            im.bclpbkiauv.tgnet.TLRPC$Peer r7 = r7.to_id
            int r7 = r7.channel_id
            if (r7 != 0) goto L_0x0226
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessagesByIds
            int r10 = r6.getId()
            r7.put(r10, r6)
            if (r6 == 0) goto L_0x0226
            im.bclpbkiauv.tgnet.TLRPC$Message r7 = r6.messageOwner
            long r10 = r7.random_id
            r20 = 0
            int r7 = (r10 > r20 ? 1 : (r10 == r20 ? 0 : -1))
            if (r7 == 0) goto L_0x0226
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessagesByRandomIds
            im.bclpbkiauv.tgnet.TLRPC$Message r10 = r6.messageOwner
            long r10 = r10.random_id
            r7.put(r10, r6)
        L_0x0226:
            if (r4 == 0) goto L_0x0244
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessagesByIds
            int r10 = r4.getId()
            r7.remove(r10)
            im.bclpbkiauv.tgnet.TLRPC$Message r7 = r4.messageOwner
            long r10 = r7.random_id
            r20 = 0
            int r7 = (r10 > r20 ? 1 : (r10 == r20 ? 0 : -1))
            if (r7 == 0) goto L_0x0244
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r8.dialogMessagesByRandomIds
            im.bclpbkiauv.tgnet.TLRPC$Message r10 = r4.messageOwner
            long r10 = r10.random_id
            r7.remove(r10)
        L_0x0244:
            r7 = r19
        L_0x0246:
            int r5 = r5 + 1
            r10 = r30
            r11 = r31
            r6 = r22
            r0 = 0
            r2 = 1
            r3 = 0
            goto L_0x00a0
        L_0x0253:
            r22 = r6
            r20 = 0
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r0 = r8.allDialogs
            r0.clear()
            r0 = 0
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            int r1 = r1.size()
        L_0x0263:
            if (r0 >= r1) goto L_0x0273
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r2 = r8.allDialogs
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r3 = r8.dialogs_dict
            java.lang.Object r3 = r3.valueAt(r0)
            r2.add(r3)
            int r0 = r0 + 1
            goto L_0x0263
        L_0x0273:
            if (r32 == 0) goto L_0x0278
            r0 = r36
            goto L_0x0279
        L_0x0278:
            r0 = 0
        L_0x0279:
            r8.sortDialogs(r0)
            int r0 = r8.DIALOGS_LOAD_TYPE_CHANNEL
            r1 = 2147483647(0x7fffffff, float:NaN)
            if (r9 == r0) goto L_0x02e6
            int r0 = r8.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r9 == r0) goto L_0x02e6
            if (r32 != 0) goto L_0x02e3
            android.util.SparseBooleanArray r0 = r8.dialogsEndReached
            r10 = r30
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r2 = r10.dialogs
            int r2 = r2.size()
            if (r2 == 0) goto L_0x029d
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r2 = r10.dialogs
            int r2 = r2.size()
            if (r2 == r15) goto L_0x02a1
        L_0x029d:
            if (r9 != 0) goto L_0x02a1
            r2 = 1
            goto L_0x02a2
        L_0x02a1:
            r2 = 0
        L_0x02a2:
            r0.put(r12, r2)
            if (r7 <= 0) goto L_0x02c6
            r0 = 20
            if (r7 >= r0) goto L_0x02c6
            if (r12 != 0) goto L_0x02c6
            android.util.SparseBooleanArray r0 = r8.dialogsEndReached
            r2 = 1
            r0.put(r2, r2)
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            int[] r0 = r0.getDialogLoadOffsets(r12)
            r3 = 0
            r4 = r0[r3]
            if (r4 != r1) goto L_0x02c7
            android.util.SparseBooleanArray r3 = r8.serverDialogsEndReached
            r3.put(r2, r2)
            goto L_0x02c7
        L_0x02c6:
            r2 = 1
        L_0x02c7:
            if (r38 != 0) goto L_0x02e8
            android.util.SparseBooleanArray r0 = r8.serverDialogsEndReached
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r3 = r10.dialogs
            int r3 = r3.size()
            if (r3 == 0) goto L_0x02db
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r3 = r10.dialogs
            int r3 = r3.size()
            if (r3 == r15) goto L_0x02de
        L_0x02db:
            if (r9 != 0) goto L_0x02de
            goto L_0x02df
        L_0x02de:
            r2 = 0
        L_0x02df:
            r0.put(r12, r2)
            goto L_0x02e8
        L_0x02e3:
            r10 = r30
            goto L_0x02e8
        L_0x02e6:
            r10 = r30
        L_0x02e8:
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            int r11 = r0.getTotalDialogsCount(r12)
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            int[] r18 = r0.getDialogLoadOffsets(r12)
            if (r38 != 0) goto L_0x030f
            if (r32 != 0) goto L_0x030f
            r0 = 400(0x190, float:5.6E-43)
            if (r11 >= r0) goto L_0x030f
            r0 = 0
            r2 = r18[r0]
            r3 = -1
            if (r2 == r3) goto L_0x030f
            r2 = r18[r0]
            if (r2 == r1) goto L_0x030f
            r1 = 100
            r8.loadDialogs(r0, r1, r12, r0)
        L_0x030f:
            im.bclpbkiauv.messenger.NotificationCenter r0 = r28.getNotificationCenter()
            int r1 = im.bclpbkiauv.messenger.NotificationCenter.dialogsNeedReload
            r2 = 0
            java.lang.Object[] r3 = new java.lang.Object[r2]
            r0.postNotificationName(r1, r3)
            if (r32 == 0) goto L_0x033a
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            r6 = r39
            r0.migrateOffsetId = r6
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            r0.saveConfig(r2)
            r8.migratingDialogs = r2
            im.bclpbkiauv.messenger.NotificationCenter r0 = r28.getNotificationCenter()
            int r1 = im.bclpbkiauv.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r2 = new java.lang.Object[r2]
            r0.postNotificationName(r1, r2)
            goto L_0x0348
        L_0x033a:
            r6 = r39
            r28.generateUpdateMessage()
            if (r16 != 0) goto L_0x0348
            int r0 = r8.DIALOGS_LOAD_TYPE_CACHE
            if (r9 != r0) goto L_0x0348
            r8.loadDialogs(r12, r2, r15, r2)
        L_0x0348:
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            int r1 = r0.migrateOffsetId
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            int r2 = r0.migrateOffsetDate
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            int r3 = r0.migrateOffsetUserId
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            int r4 = r0.migrateOffsetChatId
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            int r5 = r0.migrateOffsetChannelId
            im.bclpbkiauv.messenger.UserConfig r0 = r28.getUserConfig()
            r17 = r7
            long r6 = r0.migrateOffsetAccess
            r0 = r28
            r9 = r20
            r19 = r17
            r17 = r22
            r0.migrateDialogs(r1, r2, r3, r4, r5, r6)
            boolean r0 = r40.isEmpty()
            if (r0 != 0) goto L_0x0385
            r0 = r40
            r8.reloadDialogsReadValue(r0, r9)
            goto L_0x0387
        L_0x0385:
            r0 = r40
        L_0x0387:
            r28.loadUnreadDialogs()
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.lambda$null$145$MessagesController(int, im.bclpbkiauv.tgnet.TLRPC$messages_Dialogs, java.util.ArrayList, boolean, int, android.util.LongSparseArray, android.util.LongSparseArray, android.util.SparseArray, int, boolean, int, java.util.ArrayList):void");
    }

    private void applyDialogNotificationsSettings(long dialog_id, TLRPC.PeerNotifySettings notify_settings) {
        boolean updated;
        int i;
        long j = dialog_id;
        TLRPC.PeerNotifySettings peerNotifySettings = notify_settings;
        if (peerNotifySettings != null) {
            int currentValue = this.notificationsPreferences.getInt("notify2_" + j, -1);
            int currentValue2 = this.notificationsPreferences.getInt("notifyuntil_" + j, 0);
            SharedPreferences.Editor editor = this.notificationsPreferences.edit();
            TLRPC.Dialog dialog = this.dialogs_dict.get(j);
            if (dialog != null) {
                dialog.notify_settings = peerNotifySettings;
            }
            if ((peerNotifySettings.flags & 2) != 0) {
                editor.putBoolean("silent_" + j, peerNotifySettings.silent);
            } else {
                editor.remove("silent_" + j);
            }
            boolean updated2 = false;
            if ((peerNotifySettings.flags & 4) == 0) {
                if (currentValue != -1) {
                    if (dialog != null) {
                        dialog.notify_settings.mute_until = 0;
                    }
                    editor.remove("notify2_" + j);
                    updated2 = true;
                }
                getMessagesStorage().setDialogFlags(j, 0);
                updated = updated2;
            } else if (peerNotifySettings.mute_until > getConnectionsManager().getCurrentTime()) {
                int until = 0;
                if (peerNotifySettings.mute_until <= getConnectionsManager().getCurrentTime() + 31536000) {
                    if (currentValue == 3 && currentValue2 == peerNotifySettings.mute_until) {
                        updated = false;
                    } else {
                        updated = true;
                        editor.putInt("notify2_" + j, 3);
                        editor.putInt("notifyuntil_" + j, peerNotifySettings.mute_until);
                        if (dialog != null) {
                            dialog.notify_settings.mute_until = 0;
                        }
                    }
                    until = peerNotifySettings.mute_until;
                } else if (currentValue != 2) {
                    updated = true;
                    editor.putInt("notify2_" + j, 2);
                    if (dialog != null) {
                        dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                    }
                } else {
                    updated = false;
                }
                getMessagesStorage().setDialogFlags(j, (((long) until) << 32) | 1);
                getNotificationsController().removeNotificationsForDialog(j);
            } else {
                if (!(currentValue == 0 || currentValue == 1)) {
                    if (dialog != null) {
                        i = 0;
                        dialog.notify_settings.mute_until = 0;
                    } else {
                        i = 0;
                    }
                    editor.putInt("notify2_" + j, i);
                    updated2 = true;
                }
                getMessagesStorage().setDialogFlags(j, 0);
                updated = updated2;
            }
            editor.commit();
            if (updated) {
                getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
            }
        }
    }

    private void applyDialogsNotificationsSettings(ArrayList<TLRPC.Dialog> dialogs) {
        int dialog_id;
        SharedPreferences.Editor editor = null;
        for (int a = 0; a < dialogs.size(); a++) {
            TLRPC.Dialog dialog = dialogs.get(a);
            if (dialog.peer != null && (dialog.notify_settings instanceof TLRPC.TL_peerNotifySettings)) {
                if (editor == null) {
                    editor = this.notificationsPreferences.edit();
                }
                if (dialog.peer.user_id != 0) {
                    dialog_id = dialog.peer.user_id;
                } else if (dialog.peer.chat_id != 0) {
                    dialog_id = -dialog.peer.chat_id;
                } else {
                    dialog_id = -dialog.peer.channel_id;
                }
                if ((dialog.notify_settings.flags & 2) != 0) {
                    editor.putBoolean("silent_" + dialog_id, dialog.notify_settings.silent);
                } else {
                    editor.remove("silent_" + dialog_id);
                }
                if ((dialog.notify_settings.flags & 4) == 0) {
                    editor.remove("notify2_" + dialog_id);
                } else if (dialog.notify_settings.mute_until <= getConnectionsManager().getCurrentTime()) {
                    editor.putInt("notify2_" + dialog_id, 0);
                } else if (dialog.notify_settings.mute_until > getConnectionsManager().getCurrentTime() + 31536000) {
                    editor.putInt("notify2_" + dialog_id, 2);
                    dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                } else {
                    editor.putInt("notify2_" + dialog_id, 3);
                    editor.putInt("notifyuntil_" + dialog_id, dialog.notify_settings.mute_until);
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
    }

    public void reloadMentionsCountForChannels(ArrayList<Integer> arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$reloadMentionsCountForChannels$149$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$reloadMentionsCountForChannels$149$MessagesController(ArrayList arrayList) {
        for (int a = 0; a < arrayList.size(); a++) {
            long dialog_id = (long) (-((Integer) arrayList.get(a)).intValue());
            TLRPC.TL_messages_getUnreadMentions req = new TLRPC.TL_messages_getUnreadMentions();
            req.peer = getInputPeer((int) dialog_id);
            req.limit = 1;
            getConnectionsManager().sendRequest(req, new RequestDelegate(dialog_id) {
                private final /* synthetic */ long f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$null$148$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$148$MessagesController(long dialog_id, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(response, dialog_id) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$147$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$147$MessagesController(TLObject response, long dialog_id) {
        int newCount;
        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
        if (res != null) {
            if (res.count != 0) {
                newCount = res.count;
            } else {
                newCount = res.messages.size();
            }
            getMessagesStorage().resetMentionsCount(dialog_id, newCount);
        }
    }

    public void processDialogsUpdateRead(LongSparseArray<Integer> dialogsToUpdate, LongSparseArray<Integer> dialogsMentionsToUpdate) {
        AndroidUtilities.runOnUIThread(new Runnable(dialogsToUpdate, dialogsMentionsToUpdate) {
            private final /* synthetic */ LongSparseArray f$1;
            private final /* synthetic */ LongSparseArray f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$processDialogsUpdateRead$150$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$processDialogsUpdateRead$150$MessagesController(LongSparseArray dialogsToUpdate, LongSparseArray dialogsMentionsToUpdate) {
        if (dialogsToUpdate != null) {
            for (int a = 0; a < dialogsToUpdate.size(); a++) {
                long dialogId = dialogsToUpdate.keyAt(a);
                TLRPC.Dialog currentDialog = this.dialogs_dict.get(dialogId);
                if (currentDialog != null) {
                    int prevCount = currentDialog.unread_count;
                    currentDialog.unread_count = ((Integer) dialogsToUpdate.valueAt(a)).intValue();
                    if (prevCount != 0 && currentDialog.unread_count == 0 && !isDialogMuted(dialogId)) {
                        this.unreadUnmutedDialogs--;
                    } else if (prevCount == 0 && !currentDialog.unread_mark && currentDialog.unread_count != 0) {
                        this.dialogsUnreadOnly.add(currentDialog);
                        if (!isDialogMuted(dialogId)) {
                            this.unreadUnmutedDialogs++;
                        }
                    }
                }
            }
        }
        if (dialogsMentionsToUpdate != null) {
            for (int a2 = 0; a2 < dialogsMentionsToUpdate.size(); a2++) {
                TLRPC.Dialog currentDialog2 = this.dialogs_dict.get(dialogsMentionsToUpdate.keyAt(a2));
                if (currentDialog2 != null) {
                    currentDialog2.unread_mentions_count = ((Integer) dialogsMentionsToUpdate.valueAt(a2)).intValue();
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(currentDialog2.id))) {
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(currentDialog2.id), Integer.valueOf(currentDialog2.unread_mentions_count));
                    }
                }
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        if (dialogsToUpdate != null) {
            getNotificationsController().processDialogsUpdateRead(dialogsToUpdate);
        }
    }

    /* access modifiers changed from: protected */
    public void checkLastDialogMessage(TLRPC.Dialog dialog, TLRPC.InputPeer peer, long taskId) {
        long newTaskId;
        TLRPC.Dialog dialog2 = dialog;
        TLRPC.InputPeer inputPeer = peer;
        int lower_id = (int) dialog2.id;
        if (lower_id != 0 && this.checkingLastMessagesDialogs.indexOfKey(lower_id) < 0) {
            TLRPC.TL_messages_getHistory req = new TLRPC.TL_messages_getHistory();
            req.peer = inputPeer == null ? getInputPeer(lower_id) : inputPeer;
            if (req.peer != null) {
                req.limit = 1;
                this.checkingLastMessagesDialogs.put(lower_id, true);
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(req.peer.getObjectSize() + 60);
                        data.writeInt32(14);
                        data.writeInt64(dialog2.id);
                        data.writeInt32(dialog2.top_message);
                        data.writeInt32(dialog2.read_inbox_max_id);
                        data.writeInt32(dialog2.read_outbox_max_id);
                        data.writeInt32(dialog2.unread_count);
                        data.writeInt32(dialog2.last_message_date);
                        data.writeInt32(dialog2.pts);
                        data.writeInt32(dialog2.flags);
                        data.writeBool(dialog2.pinned);
                        data.writeInt32(dialog2.pinnedNum);
                        data.writeInt32(dialog2.unread_mentions_count);
                        data.writeBool(dialog2.unread_mark);
                        data.writeInt32(dialog2.folder_id);
                        inputPeer.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(lower_id, dialog, newTaskId) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ TLRPC.Dialog f$2;
                    private final /* synthetic */ long f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$checkLastDialogMessage$153$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$153$MessagesController(int lower_id, TLRPC.Dialog dialog, long newTaskId, TLObject response, TLRPC.TL_error error) {
        int i = lower_id;
        TLRPC.Dialog dialog2 = dialog;
        long j = newTaskId;
        if (response != null) {
            TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
            removeDeletedMessagesFromArray((long) i, res.messages);
            if (!res.messages.isEmpty()) {
                TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                TLRPC.Message newMessage = res.messages.get(0);
                TLRPC.Dialog newDialog = new TLRPC.TL_dialog();
                newDialog.flags = dialog2.flags;
                newDialog.top_message = newMessage.id;
                newDialog.last_message_date = newMessage.date;
                newDialog.notify_settings = dialog2.notify_settings;
                newDialog.pts = dialog2.pts;
                newDialog.unread_count = dialog2.unread_count;
                newDialog.unread_mark = dialog2.unread_mark;
                newDialog.unread_mentions_count = dialog2.unread_mentions_count;
                newDialog.read_inbox_max_id = dialog2.read_inbox_max_id;
                newDialog.read_outbox_max_id = dialog2.read_outbox_max_id;
                newDialog.pinned = dialog2.pinned;
                newDialog.pinnedNum = dialog2.pinnedNum;
                newDialog.folder_id = dialog2.folder_id;
                long j2 = dialog2.id;
                newDialog.id = j2;
                newMessage.dialog_id = j2;
                dialogs.users.addAll(res.users);
                dialogs.chats.addAll(res.chats);
                dialogs.dialogs.add(newDialog);
                dialogs.messages.addAll(res.messages);
                dialogs.count = 1;
                processDialogsUpdate(dialogs, (ArrayList<TLRPC.EncryptedChat>) null);
                getMessagesStorage().putMessages(res.messages, true, true, false, getDownloadController().getAutodownloadMask(), true);
            } else {
                AndroidUtilities.runOnUIThread(new Runnable(dialog2) {
                    private final /* synthetic */ TLRPC.Dialog f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$151$MessagesController(this.f$1);
                    }
                });
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        AndroidUtilities.runOnUIThread(new Runnable(i) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$152$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$151$MessagesController(TLRPC.Dialog dialog) {
        TLRPC.Dialog currentDialog = this.dialogs_dict.get(dialog.id);
        if (currentDialog != null && currentDialog.top_message == 0) {
            deleteDialog(dialog.id, 3);
        }
    }

    public /* synthetic */ void lambda$null$152$MessagesController(int lower_id) {
        this.checkingLastMessagesDialogs.delete(lower_id);
    }

    public void processDialogsUpdate(TLRPC.messages_Dialogs dialogsRes, ArrayList<TLRPC.EncryptedChat> arrayList) {
        Utilities.stageQueue.postRunnable(new Runnable(dialogsRes) {
            private final /* synthetic */ TLRPC.messages_Dialogs f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$155$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$processDialogsUpdate$155$MessagesController(TLRPC.messages_Dialogs dialogsRes) {
        long j;
        MessageObject mess;
        TLRPC.Chat chat;
        TLRPC.Chat chat2;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        LongSparseArray<Integer> new_dialogs_dict = new LongSparseArray<>();
        LongSparseArray<MessageObject> new_dialogMessage = new LongSparseArray<>();
        SparseArray<TLRPC.User> usersDict = new SparseArray<>(messages_dialogs.users.size());
        SparseArray<TLRPC.Chat> chatsDict = new SparseArray<>(messages_dialogs.chats.size());
        LongSparseArray<Integer> dialogsToUpdate = new LongSparseArray<>();
        for (int a = 0; a < messages_dialogs.users.size(); a++) {
            TLRPC.User u = messages_dialogs.users.get(a);
            usersDict.put(u.id, u);
        }
        for (int a2 = 0; a2 < messages_dialogs.chats.size(); a2++) {
            TLRPC.Chat c = messages_dialogs.chats.get(a2);
            chatsDict.put(c.id, c);
        }
        int a3 = 0;
        while (true) {
            j = 0;
            if (a3 >= messages_dialogs.messages.size()) {
                break;
            }
            TLRPC.Message message = messages_dialogs.messages.get(a3);
            long j2 = this.proxyDialogId;
            if (j2 == 0 || j2 != message.dialog_id) {
                if (message.to_id.channel_id != 0) {
                    TLRPC.Chat chat3 = chatsDict.get(message.to_id.channel_id);
                    if (chat3 != null && chat3.left) {
                        a3++;
                    }
                } else if (!(message.to_id.chat_id == 0 || (chat2 = chatsDict.get(message.to_id.chat_id)) == null || chat2.migrated_to == null)) {
                    a3++;
                }
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, message, usersDict, chatsDict, false);
            new_dialogMessage.put(messageObject.getDialogId(), messageObject);
            a3++;
        }
        int a4 = 0;
        while (a4 < messages_dialogs.dialogs.size()) {
            TLRPC.Dialog d = messages_dialogs.dialogs.get(a4);
            DialogObject.initDialog(d);
            long j3 = this.proxyDialogId;
            if (j3 == j || j3 != d.id) {
                if (DialogObject.isChannel(d)) {
                    TLRPC.Chat chat4 = chatsDict.get(-((int) d.id));
                    if (chat4 != null && chat4.left) {
                        a4++;
                        j = 0;
                    }
                } else if (!(((int) d.id) >= 0 || (chat = chatsDict.get(-((int) d.id))) == null || chat.migrated_to == null)) {
                    a4++;
                    j = 0;
                }
            }
            if (d.last_message_date == 0 && (mess = new_dialogMessage.get(d.id)) != null) {
                d.last_message_date = mess.messageOwner.date;
            }
            new_dialogs_dict.put(d.id, d);
            dialogsToUpdate.put(d.id, Integer.valueOf(d.unread_count));
            Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(d.id));
            if (value == null) {
                value = 0;
            }
            this.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
            Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(d.id));
            if (value2 == null) {
                value2 = 0;
            }
            this.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
            a4++;
            j = 0;
        }
        SparseArray<TLRPC.Chat> sparseArray = chatsDict;
        SparseArray<TLRPC.User> sparseArray2 = usersDict;
        AndroidUtilities.runOnUIThread(new Runnable(dialogsRes, new_dialogs_dict, new_dialogMessage, dialogsToUpdate) {
            private final /* synthetic */ TLRPC.messages_Dialogs f$1;
            private final /* synthetic */ LongSparseArray f$2;
            private final /* synthetic */ LongSparseArray f$3;
            private final /* synthetic */ LongSparseArray f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$154$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$154$MessagesController(TLRPC.messages_Dialogs dialogsRes, LongSparseArray new_dialogs_dict, LongSparseArray new_dialogMessage, LongSparseArray dialogsToUpdate) {
        TLRPC.Dialog value;
        TLRPC.Dialog value2;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        LongSparseArray longSparseArray = new_dialogs_dict;
        LongSparseArray longSparseArray2 = new_dialogMessage;
        int i = 1;
        putUsers(messages_dialogs.users, true);
        putChats(messages_dialogs.chats, true);
        int a = 0;
        while (a < new_dialogs_dict.size()) {
            long key = longSparseArray.keyAt(a);
            TLRPC.Dialog value3 = (TLRPC.Dialog) longSparseArray.valueAt(a);
            TLRPC.Dialog currentDialog = this.dialogs_dict.get(key);
            if (currentDialog == null) {
                this.nextDialogsCacheOffset.put(value3.folder_id, this.nextDialogsCacheOffset.get(value3.folder_id, 0) + i);
                this.dialogs_dict.put(key, value3);
                MessageObject messageObject = (MessageObject) longSparseArray2.get(value3.id);
                this.dialogMessage.put(key, messageObject);
                if (messageObject != null && messageObject.messageOwner.to_id.channel_id == 0) {
                    this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                    if (messageObject.messageOwner.random_id != 0) {
                        this.dialogMessagesByRandomIds.put(messageObject.messageOwner.random_id, messageObject);
                    }
                }
            } else {
                currentDialog.unread_count = value3.unread_count;
                if (currentDialog.unread_mentions_count != value3.unread_mentions_count) {
                    currentDialog.unread_mentions_count = value3.unread_mentions_count;
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(currentDialog.id))) {
                        value = value3;
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(currentDialog.id), Integer.valueOf(currentDialog.unread_mentions_count));
                    } else {
                        value = value3;
                    }
                } else {
                    value = value3;
                }
                MessageObject oldMsg = this.dialogMessage.get(key);
                if (oldMsg == null) {
                    value2 = value;
                } else if (currentDialog.top_message > 0) {
                    value2 = value;
                } else {
                    TLRPC.Dialog value4 = value;
                    MessageObject newMsg = (MessageObject) longSparseArray2.get(value4.id);
                    if (oldMsg.deleted || newMsg == null || newMsg.messageOwner.date > oldMsg.messageOwner.date) {
                        this.dialogs_dict.put(key, value4);
                        this.dialogMessage.put(key, newMsg);
                        if (newMsg != null && newMsg.messageOwner.to_id.channel_id == 0) {
                            this.dialogMessagesByIds.put(newMsg.getId(), newMsg);
                            if (newMsg.messageOwner.random_id != 0) {
                                this.dialogMessagesByRandomIds.put(newMsg.messageOwner.random_id, newMsg);
                            }
                        }
                        this.dialogMessagesByIds.remove(oldMsg.getId());
                        if (oldMsg.messageOwner.random_id != 0) {
                            this.dialogMessagesByRandomIds.remove(oldMsg.messageOwner.random_id);
                        }
                    }
                }
                if ((oldMsg != null && oldMsg.deleted) || value2.top_message > currentDialog.top_message) {
                    this.dialogs_dict.put(key, value2);
                    MessageObject messageObject2 = (MessageObject) longSparseArray2.get(value2.id);
                    this.dialogMessage.put(key, messageObject2);
                    if (messageObject2 != null && messageObject2.messageOwner.to_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                        if (messageObject2.messageOwner.random_id != 0) {
                            this.dialogMessagesByRandomIds.put(messageObject2.messageOwner.random_id, messageObject2);
                        }
                    }
                    if (oldMsg != null) {
                        this.dialogMessagesByIds.remove(oldMsg.getId());
                        if (oldMsg.messageOwner.random_id != 0) {
                            this.dialogMessagesByRandomIds.remove(oldMsg.messageOwner.random_id);
                        }
                    }
                    if (messageObject2 == null) {
                        checkLastDialogMessage(value2, (TLRPC.InputPeer) null, 0);
                    }
                }
            }
            a++;
            i = 1;
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int a2 = 0; a2 < size; a2++) {
            this.allDialogs.add(this.dialogs_dict.valueAt(a2));
        }
        sortDialogs((SparseArray<TLRPC.Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationsController().processDialogsUpdateRead(dialogsToUpdate);
    }

    public void addToViewsQueue(MessageObject messageObject) {
        Utilities.stageQueue.postRunnable(new Runnable(messageObject) {
            private final /* synthetic */ MessageObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$addToViewsQueue$156$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$addToViewsQueue$156$MessagesController(MessageObject messageObject) {
        int peer = (int) messageObject.getDialogId();
        int id = messageObject.getId();
        ArrayList<Integer> ids = this.channelViewsToSend.get(peer);
        if (ids == null) {
            ids = new ArrayList<>();
            this.channelViewsToSend.put(peer, ids);
        }
        if (!ids.contains(Integer.valueOf(id))) {
            ids.add(Integer.valueOf(id));
        }
    }

    public void addToPollsQueue(long dialogId, ArrayList<MessageObject> visibleObjects) {
        SparseArray<MessageObject> array = this.pollsToCheck.get(dialogId);
        if (array == null) {
            array = new SparseArray<>();
            this.pollsToCheck.put(dialogId, array);
            this.pollsToCheckSize++;
        }
        int N = array.size();
        for (int a = 0; a < N; a++) {
            array.valueAt(a).pollVisibleOnScreen = false;
        }
        int N2 = visibleObjects.size();
        for (int a2 = 0; a2 < N2; a2++) {
            MessageObject messageObject = visibleObjects.get(a2);
            if (messageObject.type == 17) {
                int id = messageObject.getId();
                MessageObject object = array.get(id);
                if (object != null) {
                    object.pollVisibleOnScreen = true;
                } else {
                    array.put(id, messageObject);
                }
            }
        }
    }

    public void markMessageContentAsRead(MessageObject messageObject) {
        if (!messageObject.scheduled) {
            ArrayList<Long> arrayList = new ArrayList<>();
            long messageId = (long) messageObject.getId();
            if (messageObject.messageOwner.to_id.channel_id != 0) {
                messageId |= ((long) messageObject.messageOwner.to_id.channel_id) << 32;
            }
            if (messageObject.messageOwner.mentioned) {
                getMessagesStorage().markMentionMessageAsRead(messageObject.getId(), messageObject.messageOwner.to_id.channel_id, messageObject.getDialogId());
            }
            arrayList.add(Long.valueOf(messageId));
            getMessagesStorage().markMessagesContentAsRead(arrayList, 0);
            getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, arrayList);
            if (messageObject.getId() < 0) {
                markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
            } else if (messageObject.messageOwner.to_id.channel_id != 0) {
                TLRPC.TL_channels_readMessageContents req = new TLRPC.TL_channels_readMessageContents();
                req.channel = getInputChannel(messageObject.messageOwner.to_id.channel_id);
                if (req.channel != null) {
                    req.id.add(Integer.valueOf(messageObject.getId()));
                    getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$UbT8lAEOJxsJcZ9dUXdZe1lBFs.INSTANCE);
                }
            } else {
                TLRPC.TL_messages_readMessageContents req2 = new TLRPC.TL_messages_readMessageContents();
                req2.id.add(Integer.valueOf(messageObject.getId()));
                getConnectionsManager().sendRequest(req2, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$markMessageContentAsRead$158$MessagesController(tLObject, tL_error);
                    }
                });
            }
        }
    }

    static /* synthetic */ void lambda$markMessageContentAsRead$157(TLObject response, TLRPC.TL_error error) {
    }

    public /* synthetic */ void lambda$markMessageContentAsRead$158$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
    }

    public void markMentionMessageAsRead(int mid, int channelId, long did) {
        getMessagesStorage().markMentionMessageAsRead(mid, channelId, did);
        if (channelId != 0) {
            TLRPC.TL_channels_readMessageContents req = new TLRPC.TL_channels_readMessageContents();
            req.channel = getInputChannel(channelId);
            if (req.channel != null) {
                req.id.add(Integer.valueOf(mid));
                getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$hnzEpQBiUiBgFIF5QmqAetH9_Ko.INSTANCE);
                return;
            }
            return;
        }
        TLRPC.TL_messages_readMessageContents req2 = new TLRPC.TL_messages_readMessageContents();
        req2.id.add(Integer.valueOf(mid));
        getConnectionsManager().sendRequest(req2, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$markMentionMessageAsRead$160$MessagesController(tLObject, tL_error);
            }
        });
    }

    static /* synthetic */ void lambda$markMentionMessageAsRead$159(TLObject response, TLRPC.TL_error error) {
    }

    public /* synthetic */ void lambda$markMentionMessageAsRead$160$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
    }

    public void markMessageAsRead(int mid, int channelId, TLRPC.InputChannel inputChannel, int ttl, long taskId) {
        TLRPC.InputChannel inputChannel2;
        long newTaskId;
        int i = mid;
        int i2 = channelId;
        int i3 = ttl;
        if (i != 0 && i3 > 0) {
            if (i2 == 0 || inputChannel != null) {
                inputChannel2 = inputChannel;
            } else {
                TLRPC.InputChannel inputChannel3 = getInputChannel(i2);
                if (inputChannel3 != null) {
                    inputChannel2 = inputChannel3;
                } else {
                    return;
                }
            }
            if (taskId == 0) {
                NativeByteBuffer data = null;
                try {
                    data = new NativeByteBuffer(16 + (inputChannel2 != null ? inputChannel2.getObjectSize() : 0));
                    data.writeInt32(11);
                    data.writeInt32(i);
                    data.writeInt32(i2);
                    data.writeInt32(i3);
                    if (i2 != 0) {
                        inputChannel2.serializeToStream(data);
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
                newTaskId = getMessagesStorage().createPendingTask(data);
            } else {
                newTaskId = taskId;
            }
            int time = getConnectionsManager().getCurrentTime();
            getMessagesStorage().createTaskForMid(mid, channelId, time, time, ttl, false);
            if (i2 != 0) {
                TLRPC.TL_channels_readMessageContents req = new TLRPC.TL_channels_readMessageContents();
                req.channel = inputChannel2;
                req.id.add(Integer.valueOf(mid));
                getConnectionsManager().sendRequest(req, new RequestDelegate(newTaskId) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$markMessageAsRead$161$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
                return;
            }
            TLRPC.TL_messages_readMessageContents req2 = new TLRPC.TL_messages_readMessageContents();
            req2.id.add(Integer.valueOf(mid));
            getConnectionsManager().sendRequest(req2, new RequestDelegate(newTaskId) {
                private final /* synthetic */ long f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$markMessageAsRead$162$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$markMessageAsRead$161$MessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public /* synthetic */ void lambda$markMessageAsRead$162$MessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void markMessageAsRead(long dialog_id, long random_id, int ttl) {
        long j = dialog_id;
        int i = ttl;
        if (random_id == 0 || j == 0) {
        } else if (i > 0 || i == Integer.MIN_VALUE) {
            int high_id = (int) (j >> 32);
            if (((int) j) == 0) {
                TLRPC.EncryptedChat chat = getEncryptedChat(Integer.valueOf(high_id));
                if (chat != null) {
                    ArrayList<Long> random_ids = new ArrayList<>();
                    random_ids.add(Long.valueOf(random_id));
                    getSecretChatHelper().sendMessagesReadMessage(chat, random_ids, (TLRPC.Message) null);
                    if (i > 0) {
                        int time = getConnectionsManager().getCurrentTime();
                        getMessagesStorage().createTaskForSecretChat(chat.id, time, time, 0, random_ids);
                    }
                }
            }
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v6, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v8, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v9, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v10, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void completeReadTask(im.bclpbkiauv.messenger.MessagesController.ReadTask r8) {
        /*
            r7 = this;
            long r0 = r8.dialogId
            int r1 = (int) r0
            long r2 = r8.dialogId
            r0 = 32
            long r2 = r2 >> r0
            int r0 = (int) r2
            if (r1 == 0) goto L_0x003e
            im.bclpbkiauv.tgnet.TLRPC$InputPeer r2 = r7.getInputPeer(r1)
            boolean r3 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_inputPeerChannel
            if (r3 == 0) goto L_0x0025
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_readHistory r3 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_readHistory
            r3.<init>()
            int r4 = -r1
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r4 = r7.getInputChannel((int) r4)
            r3.channel = r4
            int r4 = r8.maxId
            r3.max_id = r4
            goto L_0x0031
        L_0x0025:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_readHistory r3 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_readHistory
            r3.<init>()
            r3.peer = r2
            int r4 = r8.maxId
            r3.max_id = r4
            r4 = r3
        L_0x0031:
            im.bclpbkiauv.tgnet.ConnectionsManager r4 = r7.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$co3oyq1ZWtqSkiYdPqJ7ScVEaDA r5 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$co3oyq1ZWtqSkiYdPqJ7ScVEaDA
            r5.<init>()
            r4.sendRequest(r3, r5)
            goto L_0x0079
        L_0x003e:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r0)
            im.bclpbkiauv.tgnet.TLRPC$EncryptedChat r2 = r7.getEncryptedChat(r2)
            byte[] r3 = r2.auth_key
            if (r3 == 0) goto L_0x0079
            byte[] r3 = r2.auth_key
            int r3 = r3.length
            r4 = 1
            if (r3 <= r4) goto L_0x0079
            boolean r3 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_encryptedChat
            if (r3 == 0) goto L_0x0079
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_readEncryptedHistory r3 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_readEncryptedHistory
            r3.<init>()
            im.bclpbkiauv.tgnet.TLRPC$TL_inputEncryptedChat r4 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputEncryptedChat
            r4.<init>()
            r3.peer = r4
            im.bclpbkiauv.tgnet.TLRPC$TL_inputEncryptedChat r4 = r3.peer
            int r5 = r2.id
            r4.chat_id = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_inputEncryptedChat r4 = r3.peer
            long r5 = r2.access_hash
            r4.access_hash = r5
            int r4 = r8.maxDate
            r3.max_date = r4
            im.bclpbkiauv.tgnet.ConnectionsManager r4 = r7.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$b6OErMBdudTJ4g8xNHgHjN1Hr6E r5 = im.bclpbkiauv.messenger.$$Lambda$MessagesController$b6OErMBdudTJ4g8xNHgHjN1Hr6E.INSTANCE
            r4.sendRequest(r3, r5)
        L_0x0079:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.completeReadTask(im.bclpbkiauv.messenger.MessagesController$ReadTask):void");
    }

    public /* synthetic */ void lambda$completeReadTask$163$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null && (response instanceof TLRPC.TL_messages_affectedMessages)) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
    }

    static /* synthetic */ void lambda$completeReadTask$164(TLObject response, TLRPC.TL_error error) {
    }

    private void checkReadTasks() {
        long time = SystemClock.elapsedRealtime();
        int a = 0;
        int size = this.readTasks.size();
        while (a < size) {
            ReadTask task = this.readTasks.get(a);
            if (task.sendRequestTime <= time) {
                completeReadTask(task);
                this.readTasks.remove(a);
                this.readTasksMap.remove(task.dialogId);
                a--;
                size--;
            }
            a++;
        }
    }

    public void markDialogAsReadNow(long dialogId) {
        Utilities.stageQueue.postRunnable(new Runnable(dialogId) {
            private final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$markDialogAsReadNow$165$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsReadNow$165$MessagesController(long dialogId) {
        ReadTask currentReadTask = this.readTasksMap.get(dialogId);
        if (currentReadTask != null) {
            completeReadTask(currentReadTask);
            this.readTasks.remove(currentReadTask);
            this.readTasksMap.remove(dialogId);
        }
    }

    public void markMentionsAsRead(long dialogId) {
        if (((int) dialogId) != 0) {
            getMessagesStorage().resetMentionsCount(dialogId, 0);
            TLRPC.TL_messages_readMentions req = new TLRPC.TL_messages_readMentions();
            req.peer = getInputPeer((int) dialogId);
            getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$HVx7NA04TN1rBBgxTCdSKKsu3Y4.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$markMentionsAsRead$166(TLObject response, TLRPC.TL_error error) {
    }

    /* JADX WARNING: Removed duplicated region for block: B:14:0x0060  */
    /* JADX WARNING: Removed duplicated region for block: B:15:0x0067  */
    /* JADX WARNING: Removed duplicated region for block: B:18:0x00b6  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void markDialogAsRead(long r26, int r28, int r29, int r30, boolean r31, int r32, boolean r33, int r34) {
        /*
            r25 = this;
            r9 = r25
            r10 = r26
            r12 = r28
            r13 = r29
            r14 = r30
            int r15 = (int) r10
            r0 = 32
            long r1 = r10 >> r0
            int r8 = (int) r1
            im.bclpbkiauv.messenger.NotificationsController r1 = r25.getNotificationsController()
            boolean r7 = r1.showBadgeMessages
            if (r15 == 0) goto L_0x00bd
            if (r12 != 0) goto L_0x001b
            return
        L_0x001b:
            long r1 = (long) r12
            long r3 = (long) r13
            r5 = 0
            if (r15 >= 0) goto L_0x0048
            int r6 = -r15
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            im.bclpbkiauv.tgnet.TLRPC$Chat r6 = r9.getChat(r6)
            boolean r16 = im.bclpbkiauv.messenger.ChatObject.isChannel(r6)
            if (r16 == 0) goto L_0x0043
            r16 = r5
            int r5 = -r15
            r17 = r6
            long r5 = (long) r5
            long r5 = r5 << r0
            long r1 = r1 | r5
            int r5 = -r15
            long r5 = (long) r5
            long r5 = r5 << r0
            long r3 = r3 | r5
            r5 = 1
            r16 = r1
            r18 = r3
            r20 = r5
            goto L_0x0050
        L_0x0043:
            r16 = r5
            r17 = r6
            goto L_0x004a
        L_0x0048:
            r16 = r5
        L_0x004a:
            r18 = r3
            r20 = r16
            r16 = r1
        L_0x0050:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r9.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r26)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            r21 = 0
            if (r0 != 0) goto L_0x0067
            java.lang.Integer r0 = java.lang.Integer.valueOf(r21)
            r22 = r0
            goto L_0x0069
        L_0x0067:
            r22 = r0
        L_0x0069:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r9.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r26)
            int r2 = r22.intValue()
            int r2 = java.lang.Math.max(r2, r12)
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r0.put(r1, r2)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            r1 = r26
            r3 = r16
            r5 = r18
            r23 = r7
            r7 = r20
            r24 = r8
            r8 = r34
            r0.processPendingRead(r1, r3, r5, r7, r8)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            im.bclpbkiauv.messenger.DispatchQueue r8 = r0.getStorageQueue()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$wx4Y_t37qwM4-UY6ysk1EZlF1_I r7 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$wx4Y_t37qwM4-UY6ysk1EZlF1_I
            r0 = r7
            r1 = r25
            r2 = r26
            r4 = r32
            r5 = r28
            r6 = r23
            r10 = r7
            r7 = r31
            r0.<init>(r2, r4, r5, r6, r7)
            r8.postRunnable(r10)
            r0 = 2147483647(0x7fffffff, float:NaN)
            if (r12 == r0) goto L_0x00b8
            r21 = 1
        L_0x00b8:
            r0 = r21
            r16 = r0
            goto L_0x011d
        L_0x00bd:
            r23 = r7
            r24 = r8
            if (r14 != 0) goto L_0x00c4
            return
        L_0x00c4:
            r10 = 1
            java.lang.Integer r0 = java.lang.Integer.valueOf(r24)
            im.bclpbkiauv.tgnet.TLRPC$EncryptedChat r11 = r9.getEncryptedChat(r0)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            long r3 = (long) r12
            long r5 = (long) r13
            r7 = 0
            r1 = r26
            r8 = r34
            r0.processPendingRead(r1, r3, r5, r7, r8)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            im.bclpbkiauv.messenger.DispatchQueue r8 = r0.getStorageQueue()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$vpAECPg5o1HBPu4pz-rupepdhGg r7 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$vpAECPg5o1HBPu4pz-rupepdhGg
            r0 = r7
            r1 = r25
            r2 = r26
            r4 = r30
            r5 = r31
            r6 = r32
            r9 = r7
            r7 = r29
            r16 = r10
            r10 = r8
            r8 = r23
            r0.<init>(r2, r4, r5, r6, r7, r8)
            r10.postRunnable(r9)
            if (r11 == 0) goto L_0x011d
            int r0 = r11.ttl
            if (r0 <= 0) goto L_0x011d
            im.bclpbkiauv.tgnet.ConnectionsManager r0 = r25.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = java.lang.Math.max(r0, r14)
            im.bclpbkiauv.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r2 = r11.id
            r5 = 0
            r6 = 0
            r3 = r0
            r4 = r0
            r1.createTaskForSecretChat(r2, r3, r4, r5, r6)
        L_0x011d:
            if (r16 == 0) goto L_0x0134
            im.bclpbkiauv.messenger.DispatchQueue r7 = im.bclpbkiauv.messenger.Utilities.stageQueue
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$b0-4U1W_UZIo6U4TVBcHFmESg5E r8 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$b0-4U1W_UZIo6U4TVBcHFmESg5E
            r0 = r8
            r1 = r25
            r2 = r26
            r4 = r33
            r5 = r30
            r6 = r28
            r0.<init>(r2, r4, r5, r6)
            r7.postRunnable(r8)
        L_0x0134:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.markDialogAsRead(long, int, int, int, boolean, int, boolean, int):void");
    }

    public /* synthetic */ void lambda$markDialogAsRead$168$MessagesController(long dialogId, int countDiff, int maxPositiveId, boolean countMessages, boolean popup) {
        AndroidUtilities.runOnUIThread(new Runnable(dialogId, countDiff, maxPositiveId, countMessages, popup) {
            private final /* synthetic */ long f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ boolean f$5;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
                this.f$4 = r6;
                this.f$5 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$167$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    public /* synthetic */ void lambda$null$167$MessagesController(long dialogId, int countDiff, int maxPositiveId, boolean countMessages, boolean popup) {
        TLRPC.Dialog folder;
        long j = dialogId;
        int i = maxPositiveId;
        TLRPC.Dialog dialog = this.dialogs_dict.get(j);
        if (dialog != null) {
            int prevCount = dialog.unread_count;
            if (countDiff == 0 || i >= dialog.top_message) {
                dialog.unread_count = 0;
            } else {
                dialog.unread_count = Math.max(dialog.unread_count - countDiff, 0);
                if (i != Integer.MIN_VALUE && dialog.unread_count > dialog.top_message - i) {
                    dialog.unread_count = dialog.top_message - i;
                }
            }
            if (!(dialog.folder_id == 0 || (folder = this.dialogs_dict.get(DialogObject.makeFolderDialogId(dialog.folder_id))) == null)) {
                if (countMessages) {
                    if (isDialogMuted(dialog.id)) {
                        folder.unread_count -= prevCount - dialog.unread_count;
                    } else {
                        folder.unread_mentions_count -= prevCount - dialog.unread_count;
                    }
                } else if (dialog.unread_count == 0) {
                    if (isDialogMuted(dialog.id)) {
                        folder.unread_count--;
                    } else {
                        folder.unread_mentions_count--;
                    }
                }
            }
            if ((prevCount != 0 || dialog.unread_mark) && dialog.unread_count == 0 && !isDialogMuted(dialogId)) {
                this.unreadUnmutedDialogs--;
            }
            if (dialog.unread_mark) {
                dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(dialog.id, false);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        }
        if (!popup) {
            getNotificationsController().processReadMessages((SparseLongArray) null, dialogId, 0, maxPositiveId, false);
            LongSparseArray<Integer> dialogsToUpdate = new LongSparseArray<>(1);
            dialogsToUpdate.put(j, 0);
            getNotificationsController().processDialogsUpdateRead(dialogsToUpdate);
            return;
        }
        getNotificationsController().processReadMessages((SparseLongArray) null, dialogId, 0, maxPositiveId, true);
        LongSparseArray<Integer> dialogsToUpdate2 = new LongSparseArray<>(1);
        dialogsToUpdate2.put(j, -1);
        getNotificationsController().processDialogsUpdateRead(dialogsToUpdate2);
    }

    public /* synthetic */ void lambda$markDialogAsRead$170$MessagesController(long dialogId, int maxDate, boolean popup, int countDiff, int maxNegativeId, boolean countMessages) {
        AndroidUtilities.runOnUIThread(new Runnable(dialogId, maxDate, popup, countDiff, maxNegativeId, countMessages) {
            private final /* synthetic */ long f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ boolean f$3;
            private final /* synthetic */ int f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ boolean f$6;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
                this.f$4 = r6;
                this.f$5 = r7;
                this.f$6 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$null$169$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$169$MessagesController(long dialogId, int maxDate, boolean popup, int countDiff, int maxNegativeId, boolean countMessages) {
        TLRPC.Dialog folder;
        getNotificationsController().processReadMessages((SparseLongArray) null, dialogId, maxDate, 0, popup);
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog != null) {
            int prevCount = dialog.unread_count;
            if (countDiff == 0 || maxNegativeId <= dialog.top_message) {
                dialog.unread_count = 0;
            } else {
                dialog.unread_count = Math.max(dialog.unread_count - countDiff, 0);
                if (maxNegativeId != Integer.MAX_VALUE && dialog.unread_count > maxNegativeId - dialog.top_message) {
                    dialog.unread_count = maxNegativeId - dialog.top_message;
                }
            }
            if (!(dialog.folder_id == 0 || (folder = this.dialogs_dict.get(DialogObject.makeFolderDialogId(dialog.folder_id))) == null)) {
                if (countMessages) {
                    if (isDialogMuted(dialog.id)) {
                        folder.unread_count -= prevCount - dialog.unread_count;
                    } else {
                        folder.unread_mentions_count -= prevCount - dialog.unread_count;
                    }
                } else if (dialog.unread_count == 0) {
                    if (isDialogMuted(dialog.id)) {
                        folder.unread_count--;
                    } else {
                        folder.unread_mentions_count--;
                    }
                }
            }
            if ((prevCount != 0 || dialog.unread_mark) && dialog.unread_count == 0 && !isDialogMuted(dialogId)) {
                this.unreadUnmutedDialogs--;
            }
            if (dialog.unread_mark) {
                dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(dialog.id, false);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        }
        LongSparseArray longSparseArray = new LongSparseArray(1);
        longSparseArray.put(dialogId, 0);
        getNotificationsController().processDialogsUpdateRead(longSparseArray);
    }

    public /* synthetic */ void lambda$markDialogAsRead$171$MessagesController(long dialogId, boolean readNow, int maxDate, int maxPositiveId) {
        ReadTask currentReadTask = this.readTasksMap.get(dialogId);
        if (currentReadTask == null) {
            currentReadTask = new ReadTask();
            currentReadTask.dialogId = dialogId;
            currentReadTask.sendRequestTime = SystemClock.elapsedRealtime() + DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS;
            if (!readNow) {
                this.readTasksMap.put(dialogId, currentReadTask);
                this.readTasks.add(currentReadTask);
            }
        }
        currentReadTask.maxDate = maxDate;
        currentReadTask.maxId = maxPositiveId;
        if (readNow) {
            completeReadTask(currentReadTask);
        }
    }

    public int createChat(String title, ArrayList<Integer> selectedContacts, String about, int type, BDLocation location, String locationAddress, BaseFragment fragment) {
        if (type == 0) {
            TLRPC.TL_messages_createChat req = new TLRPC.TL_messages_createChat();
            req.title = title;
            for (int a = 0; a < selectedContacts.size(); a++) {
                TLRPC.User user = getUser(selectedContacts.get(a));
                if (user != null) {
                    req.users.add(getInputUser(user));
                }
            }
            return getConnectionsManager().sendRequest(req, new RequestDelegate(fragment, req) {
                private final /* synthetic */ BaseFragment f$1;
                private final /* synthetic */ TLRPC.TL_messages_createChat f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$createChat$174$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            }, 2);
        } else if (type != 2 && type != 4) {
            return 0;
        } else {
            TLRPC.TL_channels_createChannel req2 = new TLRPC.TL_channels_createChannel();
            req2.title = title;
            req2.about = about != null ? about : "";
            if (type == 4) {
                req2.megagroup = true;
            } else {
                req2.broadcast = true;
            }
            if (location != null) {
                req2.geo_point = new TLRPC.TL_inputGeoPoint();
                req2.geo_point.lat = location.getLatitude();
                req2.geo_point._long = location.getLongitude();
                req2.address = locationAddress;
                req2.flags = 4 | req2.flags;
            }
            return getConnectionsManager().sendRequest(req2, new RequestDelegate(fragment, req2) {
                private final /* synthetic */ BaseFragment f$1;
                private final /* synthetic */ TLRPC.TL_channels_createChannel f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$createChat$177$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            }, 2);
        }
    }

    public /* synthetic */ void lambda$createChat$174$MessagesController(BaseFragment fragment, TLRPC.TL_messages_createChat req, TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(error, fragment, req) {
                private final /* synthetic */ TLRPC.TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC.TL_messages_createChat f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$172$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        TLRPC.Updates updates = (TLRPC.Updates) response;
        processUpdates(updates, false);
        AndroidUtilities.runOnUIThread(new Runnable(updates) {
            private final /* synthetic */ TLRPC.Updates f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$173$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$172$MessagesController(TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_messages_createChat req) {
        AlertsCreator.processError(this.currentAccount, error, fragment, req, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$null$173$MessagesController(TLRPC.Updates updates) {
        putUsers(updates.users, false);
        putChats(updates.chats, false);
        if (updates.chats == null || updates.chats.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Integer.valueOf(updates.chats.get(0).id));
    }

    public /* synthetic */ void lambda$createChat$177$MessagesController(BaseFragment fragment, TLRPC.TL_channels_createChannel req, TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(error, fragment, req) {
                private final /* synthetic */ TLRPC.TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC.TL_channels_createChannel f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$175$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        TLRPC.Updates updates = (TLRPC.Updates) response;
        processUpdates(updates, false);
        AndroidUtilities.runOnUIThread(new Runnable(updates) {
            private final /* synthetic */ TLRPC.Updates f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$176$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$175$MessagesController(TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_channels_createChannel req) {
        AlertsCreator.processError(this.currentAccount, error, fragment, req, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$null$176$MessagesController(TLRPC.Updates updates) {
        putUsers(updates.users, false);
        putChats(updates.chats, false);
        if (updates.chats == null || updates.chats.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Integer.valueOf(updates.chats.get(0).id));
    }

    public int createMegaGroup(String title, ArrayList<Integer> selectedContacts, String about, int type, BDLocation location, String locationAddress, BaseFragment fragment, boolean forbidContact) {
        if (type != 2 && type != 4) {
            return 0;
        }
        TLRPCChats.TL_channels_createChannel_v1 req = new TLRPCChats.TL_channels_createChannel_v1();
        req.title = title;
        req.about = about != null ? about : "";
        req.ban_add_contact = forbidContact;
        if (type == 4) {
            req.megagroup = true;
        } else {
            req.broadcast = true;
        }
        if (location != null) {
            req.geo_point = new TLRPC.TL_inputGeoPoint();
            req.geo_point.lat = location.getLatitude();
            req.geo_point._long = location.getLongitude();
            req.address = locationAddress;
            req.flags = 4 | req.flags;
        }
        return getConnectionsManager().sendRequest(req, new RequestDelegate(fragment, req, selectedContacts) {
            private final /* synthetic */ BaseFragment f$1;
            private final /* synthetic */ TLRPCChats.TL_channels_createChannel_v1 f$2;
            private final /* synthetic */ ArrayList f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$createMegaGroup$180$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tL_error);
            }
        }, 2);
    }

    public /* synthetic */ void lambda$createMegaGroup$180$MessagesController(BaseFragment fragment, TLRPCChats.TL_channels_createChannel_v1 req, ArrayList selectedContacts, TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(error, fragment, req) {
                private final /* synthetic */ TLRPC.TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPCChats.TL_channels_createChannel_v1 f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$178$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        TLRPC.Updates updates = (TLRPC.Updates) response;
        AndroidUtilities.runOnUIThread(new Runnable(updates) {
            private final /* synthetic */ TLRPC.Updates f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$179$MessagesController(this.f$1);
            }
        });
        ArrayList<TLRPC.InputUser> result = new ArrayList<>();
        for (int a = 0; a < selectedContacts.size(); a++) {
            TLRPC.InputUser user = getInstance(this.currentAccount).getInputUser(getInstance(this.currentAccount).getUser((Integer) selectedContacts.get(a)));
            if (user != null) {
                result.add(user);
            }
        }
        getInstance(this.currentAccount).addUsersToChannelWithCreate(updates.chats.get(0), result, (BaseFragment) null);
        processUpdates(updates, false);
    }

    public /* synthetic */ void lambda$null$178$MessagesController(TLRPC.TL_error error, BaseFragment fragment, TLRPCChats.TL_channels_createChannel_v1 req) {
        AlertsCreator.processError(this.currentAccount, error, fragment, req, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$null$179$MessagesController(TLRPC.Updates updates) {
        putUsers(updates.users, false);
        putChats(updates.chats, false);
        if (updates.chats == null || updates.chats.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Integer.valueOf(updates.chats.get(0).id));
    }

    public void addUsersToChannelWithCreate(TLRPC.Chat chat, ArrayList<TLRPC.InputUser> users2, BaseFragment fragment) {
        if (users2 != null && !users2.isEmpty()) {
            TLRPC.TL_channels_inviteToChannel req = new TLRPC.TL_channels_inviteToChannel();
            req.channel = getInputChannel(chat);
            req.users = users2;
            getConnectionsManager().sendRequest(req, new RequestDelegate(fragment, req) {
                private final /* synthetic */ BaseFragment f$1;
                private final /* synthetic */ TLRPC.TL_channels_inviteToChannel f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$addUsersToChannelWithCreate$182$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$addUsersToChannelWithCreate$182$MessagesController(BaseFragment fragment, TLRPC.TL_channels_inviteToChannel req, TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(error, fragment, req) {
                private final /* synthetic */ TLRPC.TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC.TL_channels_inviteToChannel f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$181$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        } else {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public /* synthetic */ void lambda$null$181$MessagesController(TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_channels_inviteToChannel req) {
        AlertsCreator.processError(this.currentAccount, error, fragment, req, true);
    }

    public void convertToMegaGroup(Context context, int chat_id, BaseFragment fragment, MessagesStorage.IntCallback convertRunnable) {
        TLRPC.TL_messages_migrateChat req = new TLRPC.TL_messages_migrateChat();
        req.chat_id = chat_id;
        AlertDialog progressDialog = new AlertDialog(context, 3);
        progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener(getConnectionsManager().sendRequest(req, new RequestDelegate(context, progressDialog, convertRunnable, fragment, req) {
            private final /* synthetic */ Context f$1;
            private final /* synthetic */ AlertDialog f$2;
            private final /* synthetic */ MessagesStorage.IntCallback f$3;
            private final /* synthetic */ BaseFragment f$4;
            private final /* synthetic */ TLRPC.TL_messages_migrateChat f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$convertToMegaGroup$186$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, tLObject, tL_error);
            }
        })) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void onCancel(DialogInterface dialogInterface) {
                MessagesController.this.lambda$convertToMegaGroup$187$MessagesController(this.f$1, dialogInterface);
            }
        });
        try {
            progressDialog.show();
        } catch (Exception e) {
        }
    }

    public /* synthetic */ void lambda$convertToMegaGroup$186$MessagesController(Context context, AlertDialog progressDialog, MessagesStorage.IntCallback convertRunnable, BaseFragment fragment, TLRPC.TL_messages_migrateChat req, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            Context context2 = context;
            AlertDialog alertDialog = progressDialog;
            AndroidUtilities.runOnUIThread(new Runnable(context, progressDialog) {
                private final /* synthetic */ Context f$0;
                private final /* synthetic */ AlertDialog f$1;

                {
                    this.f$0 = r1;
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.lambda$null$183(this.f$0, this.f$1);
                }
            });
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new Runnable((TLRPC.Updates) response) {
                private final /* synthetic */ TLRPC.Updates f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.lambda$null$184(MessagesStorage.IntCallback.this, this.f$1);
                }
            });
            return;
        }
        Context context3 = context;
        AlertDialog alertDialog2 = progressDialog;
        MessagesStorage.IntCallback intCallback = convertRunnable;
        AndroidUtilities.runOnUIThread(new Runnable(convertRunnable, context, progressDialog, error, fragment, req) {
            private final /* synthetic */ MessagesStorage.IntCallback f$1;
            private final /* synthetic */ Context f$2;
            private final /* synthetic */ AlertDialog f$3;
            private final /* synthetic */ TLRPC.TL_error f$4;
            private final /* synthetic */ BaseFragment f$5;
            private final /* synthetic */ TLRPC.TL_messages_migrateChat f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$185$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    static /* synthetic */ void lambda$null$183(Context context, AlertDialog progressDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                progressDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    static /* synthetic */ void lambda$null$184(MessagesStorage.IntCallback convertRunnable, TLRPC.Updates updates) {
        if (convertRunnable != null) {
            for (int a = 0; a < updates.chats.size(); a++) {
                TLRPC.Chat chat = updates.chats.get(a);
                if (ChatObject.isChannel(chat)) {
                    convertRunnable.run(chat.id);
                    return;
                }
            }
        }
    }

    public /* synthetic */ void lambda$null$185$MessagesController(MessagesStorage.IntCallback convertRunnable, Context context, AlertDialog progressDialog, TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_messages_migrateChat req) {
        if (convertRunnable != null) {
            convertRunnable.run(0);
        }
        if (!((Activity) context).isFinishing()) {
            try {
                progressDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
            AlertsCreator.processError(this.currentAccount, error, fragment, req, false);
        }
    }

    public /* synthetic */ void lambda$convertToMegaGroup$187$MessagesController(int reqId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
    }

    public void addUsersToChannel(int chat_id, ArrayList<TLRPC.InputUser> users2, BaseFragment fragment) {
        if (users2 != null && !users2.isEmpty()) {
            TLRPC.TL_channels_inviteToChannel req = new TLRPC.TL_channels_inviteToChannel();
            req.channel = getInputChannel(chat_id);
            req.users = users2;
            getConnectionsManager().sendRequest(req, new RequestDelegate(fragment, req) {
                private final /* synthetic */ BaseFragment f$1;
                private final /* synthetic */ TLRPC.TL_channels_inviteToChannel f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$addUsersToChannel$189$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$addUsersToChannel$189$MessagesController(BaseFragment fragment, TLRPC.TL_channels_inviteToChannel req, TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(error, fragment, req) {
                private final /* synthetic */ TLRPC.TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC.TL_channels_inviteToChannel f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$188$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        } else {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public /* synthetic */ void lambda$null$188$MessagesController(TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_channels_inviteToChannel req) {
        AlertsCreator.processError(this.currentAccount, error, fragment, req, true);
    }

    public void toogleChannelSignatures(int chat_id, boolean enabled) {
        TLRPC.TL_channels_toggleSignatures req = new TLRPC.TL_channels_toggleSignatures();
        req.channel = getInputChannel(chat_id);
        req.enabled = enabled;
        getConnectionsManager().sendRequest(req, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$toogleChannelSignatures$191$MessagesController(tLObject, tL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toogleChannelSignatures$191$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$190$MessagesController();
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$190$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void toogleChannelInvitesHistory(int chat_id, boolean enabled) {
        TLRPC.TL_channels_togglePreHistoryHidden req = new TLRPC.TL_channels_togglePreHistoryHidden();
        req.channel = getInputChannel(chat_id);
        req.enabled = enabled;
        getConnectionsManager().sendRequest(req, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$toogleChannelInvitesHistory$193$MessagesController(tLObject, tL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toogleChannelInvitesHistory$193$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$192$MessagesController();
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$192$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void updateChatAbout(int chat_id, String about, TLRPC.ChatFull info) {
        if (info != null) {
            TLRPC.TL_messages_editChatAbout req = new TLRPC.TL_messages_editChatAbout();
            req.peer = getInputPeer(-chat_id);
            req.about = about;
            getConnectionsManager().sendRequest(req, new RequestDelegate(info, about) {
                private final /* synthetic */ TLRPC.ChatFull f$1;
                private final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$updateChatAbout$195$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            }, 64);
        }
    }

    public /* synthetic */ void lambda$updateChatAbout$195$MessagesController(TLRPC.ChatFull info, String about, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_boolTrue) {
            AndroidUtilities.runOnUIThread(new Runnable(info, about) {
                private final /* synthetic */ TLRPC.ChatFull f$1;
                private final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$194$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$194$MessagesController(TLRPC.ChatFull info, String about) {
        info.about = about;
        getMessagesStorage().updateChatInfo(info, false);
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, info, 0, false, null);
    }

    public void updateChannelUserName(int chat_id, String userName) {
        TLRPC.TL_channels_updateUsername req = new TLRPC.TL_channels_updateUsername();
        req.channel = getInputChannel(chat_id);
        req.username = userName;
        getConnectionsManager().sendRequest(req, new RequestDelegate(chat_id, userName) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ String f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$updateChannelUserName$197$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$updateChannelUserName$197$MessagesController(int chat_id, String userName, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_boolTrue) {
            AndroidUtilities.runOnUIThread(new Runnable(chat_id, userName) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$196$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$196$MessagesController(int chat_id, String userName) {
        TLRPC.Chat chat = getChat(Integer.valueOf(chat_id));
        if (userName.length() != 0) {
            chat.flags |= 64;
        } else {
            chat.flags &= -65;
        }
        chat.username = userName;
        ArrayList<TLRPC.Chat> arrayList = new ArrayList<>();
        arrayList.add(chat);
        getMessagesStorage().putUsersAndChats((ArrayList<TLRPC.User>) null, arrayList, true, true);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void sendBotStart(TLRPC.User user, String botHash) {
        if (user != null) {
            TLRPC.TL_messages_startBot req = new TLRPC.TL_messages_startBot();
            req.bot = getInputUser(user);
            req.peer = getInputPeer(user.id);
            req.start_param = botHash;
            req.random_id = Utilities.random.nextLong();
            getConnectionsManager().sendRequest(req, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$sendBotStart$198$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$sendBotStart$198$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public boolean isJoiningChannel(int chat_id) {
        return this.joiningToChannels.contains(Integer.valueOf(chat_id));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_inviteToChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v7, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_joinChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v10, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v9, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_startBot} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v13, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void addUserToChat(int r19, im.bclpbkiauv.tgnet.TLRPC.User r20, im.bclpbkiauv.tgnet.TLRPC.ChatFull r21, int r22, java.lang.String r23, im.bclpbkiauv.ui.actionbar.BaseFragment r24, java.lang.Runnable r25) {
        /*
            r18 = this;
            r9 = r18
            r10 = r19
            r11 = r20
            r12 = r21
            r13 = r23
            if (r11 != 0) goto L_0x000d
            return
        L_0x000d:
            r0 = 0
            r1 = 1
            if (r10 <= 0) goto L_0x00cf
            int r2 = r9.currentAccount
            boolean r14 = im.bclpbkiauv.messenger.ChatObject.isChannel(r10, r2)
            if (r14 == 0) goto L_0x0026
            java.lang.Integer r2 = java.lang.Integer.valueOf(r19)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = r9.getChat(r2)
            boolean r2 = r2.megagroup
            if (r2 == 0) goto L_0x0026
            r0 = 1
        L_0x0026:
            r15 = r0
            im.bclpbkiauv.tgnet.TLRPC$InputUser r8 = r9.getInputUser((im.bclpbkiauv.tgnet.TLRPC.User) r11)
            if (r13 == 0) goto L_0x005d
            if (r14 == 0) goto L_0x0032
            if (r15 != 0) goto L_0x0032
            goto L_0x005d
        L_0x0032:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_startBot r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_startBot
            r0.<init>()
            r0.bot = r8
            if (r14 == 0) goto L_0x0043
            int r1 = -r10
            im.bclpbkiauv.tgnet.TLRPC$InputPeer r1 = r9.getInputPeer(r1)
            r0.peer = r1
            goto L_0x004e
        L_0x0043:
            im.bclpbkiauv.tgnet.TLRPC$TL_inputPeerChat r1 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputPeerChat
            r1.<init>()
            r0.peer = r1
            im.bclpbkiauv.tgnet.TLRPC$InputPeer r1 = r0.peer
            r1.chat_id = r10
        L_0x004e:
            r0.start_param = r13
            java.security.SecureRandom r1 = im.bclpbkiauv.messenger.Utilities.random
            long r1 = r1.nextLong()
            r0.random_id = r1
            r1 = r0
            r7 = r22
            r6 = r1
            goto L_0x00ad
        L_0x005d:
            if (r14 == 0) goto L_0x009e
            boolean r0 = r8 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_inputUserSelf
            if (r0 == 0) goto L_0x0089
            java.util.ArrayList<java.lang.Integer> r0 = r9.joiningToChannels
            java.lang.Integer r1 = java.lang.Integer.valueOf(r19)
            boolean r0 = r0.contains(r1)
            if (r0 == 0) goto L_0x0070
            return
        L_0x0070:
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_joinChannel r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_joinChannel
            r0.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r1 = r18.getInputChannel((int) r19)
            r0.channel = r1
            r1 = r0
            java.util.ArrayList<java.lang.Integer> r2 = r9.joiningToChannels
            java.lang.Integer r3 = java.lang.Integer.valueOf(r19)
            r2.add(r3)
            r7 = r22
            r6 = r1
            goto L_0x00ad
        L_0x0089:
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_inviteToChannel r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_inviteToChannel
            r0.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r1 = r18.getInputChannel((int) r19)
            r0.channel = r1
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$InputUser> r1 = r0.users
            r1.add(r8)
            r1 = r0
            r7 = r22
            r6 = r1
            goto L_0x00ad
        L_0x009e:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_addChatUser r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_addChatUser
            r0.<init>()
            r0.chat_id = r10
            r7 = r22
            r0.fwd_limit = r7
            r0.user_id = r8
            r1 = r0
            r6 = r1
        L_0x00ad:
            im.bclpbkiauv.tgnet.ConnectionsManager r5 = r18.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$nTlEEngPkPpZ7sIKZ5kqfcSEocU r4 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$nTlEEngPkPpZ7sIKZ5kqfcSEocU
            r0 = r4
            r1 = r18
            r2 = r14
            r3 = r8
            r10 = r4
            r4 = r19
            r13 = r5
            r5 = r24
            r16 = r6
            r7 = r15
            r17 = r8
            r8 = r25
            r0.<init>(r2, r3, r4, r5, r6, r7, r8)
            r1 = r16
            r13.sendRequest(r1, r10)
            goto L_0x016b
        L_0x00cf:
            boolean r2 = r12 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_chatFull
            if (r2 == 0) goto L_0x016b
            r2 = 0
        L_0x00d4:
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipants r3 = r12.participants
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$ChatParticipant> r3 = r3.participants
            int r3 = r3.size()
            if (r2 >= r3) goto L_0x00f2
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipants r3 = r12.participants
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$ChatParticipant> r3 = r3.participants
            java.lang.Object r3 = r3.get(r2)
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipant r3 = (im.bclpbkiauv.tgnet.TLRPC.ChatParticipant) r3
            int r3 = r3.user_id
            int r4 = r11.id
            if (r3 != r4) goto L_0x00ef
            return
        L_0x00ef:
            int r2 = r2 + 1
            goto L_0x00d4
        L_0x00f2:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r19)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = r9.getChat(r2)
            int r3 = r2.participants_count
            int r3 = r3 + r1
            r2.participants_count = r3
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r3.add(r2)
            im.bclpbkiauv.messenger.MessagesStorage r4 = r18.getMessagesStorage()
            r5 = 0
            r4.putUsersAndChats(r5, r3, r1, r1)
            im.bclpbkiauv.tgnet.TLRPC$TL_chatParticipant r4 = new im.bclpbkiauv.tgnet.TLRPC$TL_chatParticipant
            r4.<init>()
            int r6 = r11.id
            r4.user_id = r6
            im.bclpbkiauv.messenger.UserConfig r6 = r18.getUserConfig()
            int r6 = r6.getClientUserId()
            r4.inviter_id = r6
            im.bclpbkiauv.tgnet.ConnectionsManager r6 = r18.getConnectionsManager()
            int r6 = r6.getCurrentTime()
            r4.date = r6
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipants r6 = r12.participants
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$ChatParticipant> r6 = r6.participants
            r6.add(r0, r4)
            im.bclpbkiauv.messenger.MessagesStorage r6 = r18.getMessagesStorage()
            r6.updateChatInfo(r12, r1)
            im.bclpbkiauv.messenger.NotificationCenter r6 = r18.getNotificationCenter()
            int r7 = im.bclpbkiauv.messenger.NotificationCenter.chatInfoDidLoad
            r8 = 4
            java.lang.Object[] r8 = new java.lang.Object[r8]
            r8[r0] = r12
            java.lang.Integer r10 = java.lang.Integer.valueOf(r0)
            r8[r1] = r10
            r10 = 2
            java.lang.Boolean r13 = java.lang.Boolean.valueOf(r0)
            r8[r10] = r13
            r10 = 3
            r8[r10] = r5
            r6.postNotificationName(r7, r8)
            im.bclpbkiauv.messenger.NotificationCenter r5 = r18.getNotificationCenter()
            int r6 = im.bclpbkiauv.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r7 = 32
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r1[r0] = r7
            r5.postNotificationName(r6, r1)
        L_0x016b:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.addUserToChat(int, im.bclpbkiauv.tgnet.TLRPC$User, im.bclpbkiauv.tgnet.TLRPC$ChatFull, int, java.lang.String, im.bclpbkiauv.ui.actionbar.BaseFragment, java.lang.Runnable):void");
    }

    public /* synthetic */ void lambda$addUserToChat$202$MessagesController(boolean isChannel, TLRPC.InputUser inputUser, int chat_id, BaseFragment fragment, TLObject request, boolean isMegagroup, Runnable onFinishRunnable, TLObject response, TLRPC.TL_error error) {
        TLRPC.InputUser inputUser2 = inputUser;
        int i = chat_id;
        if (isChannel && (inputUser2 instanceof TLRPC.TL_inputUserSelf)) {
            AndroidUtilities.runOnUIThread(new Runnable(chat_id) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$199$MessagesController(this.f$1);
                }
            });
        }
        if (error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(error, fragment, request, isChannel, isMegagroup, inputUser) {
                private final /* synthetic */ TLRPC.TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLObject f$3;
                private final /* synthetic */ boolean f$4;
                private final /* synthetic */ boolean f$5;
                private final /* synthetic */ TLRPC.InputUser f$6;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                }

                public final void run() {
                    MessagesController.this.lambda$null$200$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                }
            });
            return;
        }
        boolean hasJoinMessage = false;
        TLRPC.Updates updates = (TLRPC.Updates) response;
        int a = 0;
        while (true) {
            if (a >= updates.updates.size()) {
                break;
            }
            TLRPC.Update update = updates.updates.get(a);
            if ((update instanceof TLRPC.TL_updateNewChannelMessage) && (((TLRPC.TL_updateNewChannelMessage) update).message.action instanceof TLRPC.TL_messageActionChatAddUser)) {
                hasJoinMessage = true;
                break;
            }
            a++;
        }
        processUpdates(updates, false);
        if (isChannel) {
            if (!hasJoinMessage && (inputUser2 instanceof TLRPC.TL_inputUserSelf)) {
                generateJoinMessage(chat_id, true);
            }
            AndroidUtilities.runOnUIThread(new Runnable(chat_id) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$201$MessagesController(this.f$1);
                }
            }, 1000);
        }
        if (isChannel && (inputUser2 instanceof TLRPC.TL_inputUserSelf)) {
            getMessagesStorage().updateDialogsWithDeletedMessages(new ArrayList(), (ArrayList<Long>) null, true, chat_id);
        }
        if (onFinishRunnable != null) {
            AndroidUtilities.runOnUIThread(onFinishRunnable);
        }
    }

    public /* synthetic */ void lambda$null$199$MessagesController(int chat_id) {
        this.joiningToChannels.remove(Integer.valueOf(chat_id));
    }

    public /* synthetic */ void lambda$null$200$MessagesController(TLRPC.TL_error error, BaseFragment fragment, TLObject request, boolean isChannel, boolean isMegagroup, TLRPC.InputUser inputUser) {
        int i = this.currentAccount;
        Object[] objArr = new Object[1];
        objArr[0] = Boolean.valueOf(isChannel && !isMegagroup);
        AlertsCreator.processError(i, error, fragment, request, objArr);
        if (isChannel && (inputUser instanceof TLRPC.TL_inputUserSelf)) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
        }
    }

    public /* synthetic */ void lambda$null$201$MessagesController(int chat_id) {
        loadFullChat(chat_id, 0, true);
    }

    public void deleteUserFromChat(int chat_id, TLRPC.User user, TLRPC.ChatFull info) {
        deleteUserFromChat(chat_id, user, info, false, false);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v2, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v9, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_editBanned} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v4, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v6, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_leaveChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v7, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_deleteChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v8, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v9, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v10, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteUserFromChat(int r17, im.bclpbkiauv.tgnet.TLRPC.User r18, im.bclpbkiauv.tgnet.TLRPC.ChatFull r19, boolean r20, boolean r21) {
        /*
            r16 = this;
            r0 = r16
            r1 = r17
            r2 = r18
            r3 = r19
            if (r2 != 0) goto L_0x000b
            return
        L_0x000b:
            r4 = 0
            r5 = 1
            if (r1 <= 0) goto L_0x00bf
            im.bclpbkiauv.tgnet.TLRPC$InputUser r6 = r0.getInputUser((im.bclpbkiauv.tgnet.TLRPC.User) r2)
            java.lang.Integer r7 = java.lang.Integer.valueOf(r17)
            im.bclpbkiauv.tgnet.TLRPC$Chat r7 = r0.getChat(r7)
            boolean r8 = im.bclpbkiauv.messenger.ChatObject.isChannel(r7)
            if (r8 == 0) goto L_0x008b
            boolean r9 = r6 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_inputUserSelf
            if (r9 == 0) goto L_0x0045
            boolean r5 = r7.creator
            if (r5 == 0) goto L_0x0038
            if (r20 == 0) goto L_0x0038
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_deleteChannel r5 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_deleteChannel
            r5.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r9 = getInputChannel((im.bclpbkiauv.tgnet.TLRPC.Chat) r7)
            r5.channel = r9
            goto L_0x0099
        L_0x0038:
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_leaveChannel r5 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_leaveChannel
            r5.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r9 = getInputChannel((im.bclpbkiauv.tgnet.TLRPC.Chat) r7)
            r5.channel = r9
            goto L_0x0099
        L_0x0045:
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_editBanned r9 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_editBanned
            r9.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r10 = getInputChannel((im.bclpbkiauv.tgnet.TLRPC.Chat) r7)
            r9.channel = r10
            r9.user_id = r6
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = new im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights
            r10.<init>()
            r9.banned_rights = r10
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.view_messages = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.send_media = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.send_messages = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.send_stickers = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.send_gifs = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.send_games = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.send_inline = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.embed_links = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.pin_messages = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.send_polls = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.invite_users = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r10 = r9.banned_rights
            r10.change_info = r5
            r5 = r9
            goto L_0x0099
        L_0x008b:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteChatUser r5 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_deleteChatUser
            r5.<init>()
            r5.chat_id = r1
            im.bclpbkiauv.tgnet.TLRPC$InputUser r9 = r0.getInputUser((im.bclpbkiauv.tgnet.TLRPC.User) r2)
            r5.user_id = r9
            r9 = r5
        L_0x0099:
            int r9 = r2.id
            im.bclpbkiauv.messenger.UserConfig r10 = r16.getUserConfig()
            int r10 = r10.getClientUserId()
            if (r9 != r10) goto L_0x00ad
            int r9 = -r1
            long r9 = (long) r9
            r11 = r21
            r0.deleteDialog(r9, r4, r11)
            goto L_0x00af
        L_0x00ad:
            r11 = r21
        L_0x00af:
            im.bclpbkiauv.tgnet.ConnectionsManager r4 = r16.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$wREsu3JJrFa2qv2IYRj9mfFeFxc r9 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$wREsu3JJrFa2qv2IYRj9mfFeFxc
            r9.<init>(r8, r6, r1)
            r10 = 64
            r4.sendRequest(r5, r9, r10)
            goto L_0x0144
        L_0x00bf:
            r11 = r21
            boolean r6 = r3 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_chatFull
            if (r6 == 0) goto L_0x0144
            java.lang.Integer r6 = java.lang.Integer.valueOf(r17)
            im.bclpbkiauv.tgnet.TLRPC$Chat r6 = r0.getChat(r6)
            int r7 = r6.participants_count
            int r7 = r7 - r5
            r6.participants_count = r7
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            r7.add(r6)
            im.bclpbkiauv.messenger.MessagesStorage r8 = r16.getMessagesStorage()
            r9 = 0
            r8.putUsersAndChats(r9, r7, r5, r5)
            r8 = 0
            r10 = 0
        L_0x00e4:
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipants r12 = r3.participants
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$ChatParticipant> r12 = r12.participants
            int r12 = r12.size()
            if (r10 >= r12) goto L_0x010a
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipants r12 = r3.participants
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$ChatParticipant> r12 = r12.participants
            java.lang.Object r12 = r12.get(r10)
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipant r12 = (im.bclpbkiauv.tgnet.TLRPC.ChatParticipant) r12
            int r13 = r12.user_id
            int r14 = r2.id
            if (r13 != r14) goto L_0x0107
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipants r13 = r3.participants
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$ChatParticipant> r13 = r13.participants
            r13.remove(r10)
            r8 = 1
            goto L_0x010a
        L_0x0107:
            int r10 = r10 + 1
            goto L_0x00e4
        L_0x010a:
            if (r8 == 0) goto L_0x0131
            im.bclpbkiauv.messenger.MessagesStorage r10 = r16.getMessagesStorage()
            r10.updateChatInfo(r3, r5)
            im.bclpbkiauv.messenger.NotificationCenter r10 = r16.getNotificationCenter()
            int r12 = im.bclpbkiauv.messenger.NotificationCenter.chatInfoDidLoad
            r13 = 4
            java.lang.Object[] r13 = new java.lang.Object[r13]
            r13[r4] = r3
            java.lang.Integer r14 = java.lang.Integer.valueOf(r4)
            r13[r5] = r14
            r14 = 2
            java.lang.Boolean r15 = java.lang.Boolean.valueOf(r4)
            r13[r14] = r15
            r14 = 3
            r13[r14] = r9
            r10.postNotificationName(r12, r13)
        L_0x0131:
            im.bclpbkiauv.messenger.NotificationCenter r9 = r16.getNotificationCenter()
            int r10 = im.bclpbkiauv.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r5 = new java.lang.Object[r5]
            r12 = 32
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            r5[r4] = r12
            r9.postNotificationName(r10, r5)
        L_0x0144:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.deleteUserFromChat(int, im.bclpbkiauv.tgnet.TLRPC$User, im.bclpbkiauv.tgnet.TLRPC$ChatFull, boolean, boolean):void");
    }

    public /* synthetic */ void lambda$deleteUserFromChat$204$MessagesController(boolean isChannel, TLRPC.InputUser inputUser, int chat_id, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
            if (isChannel && !(inputUser instanceof TLRPC.TL_inputUserSelf)) {
                AndroidUtilities.runOnUIThread(new Runnable(chat_id) {
                    private final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$203$MessagesController(this.f$1);
                    }
                }, 1000);
            }
        }
    }

    public /* synthetic */ void lambda$null$203$MessagesController(int chat_id) {
        loadFullChat(chat_id, 0, true);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_editTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v7, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatTitle(int r8, java.lang.String r9) {
        /*
            r7 = this;
            if (r8 <= 0) goto L_0x0032
            int r0 = r7.currentAccount
            boolean r0 = im.bclpbkiauv.messenger.ChatObject.isChannel(r8, r0)
            if (r0 == 0) goto L_0x0019
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_editTitle r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_editTitle
            r0.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r1 = r7.getInputChannel((int) r8)
            r0.channel = r1
            r0.title = r9
            goto L_0x0023
        L_0x0019:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatTitle r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatTitle
            r0.<init>()
            r0.chat_id = r8
            r0.title = r9
            r1 = r0
        L_0x0023:
            im.bclpbkiauv.tgnet.ConnectionsManager r1 = r7.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$Ll8Bi--u9Wr1TD5BX3Qo5pFN17Q r2 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$Ll8Bi--u9Wr1TD5BX3Qo5pFN17Q
            r2.<init>()
            r3 = 64
            r1.sendRequest(r0, r2, r3)
            goto L_0x006c
        L_0x0032:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r8)
            im.bclpbkiauv.tgnet.TLRPC$Chat r0 = r7.getChat(r0)
            r0.title = r9
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r1.add(r0)
            im.bclpbkiauv.messenger.MessagesStorage r2 = r7.getMessagesStorage()
            r3 = 0
            r4 = 1
            r2.putUsersAndChats(r3, r1, r4, r4)
            im.bclpbkiauv.messenger.NotificationCenter r2 = r7.getNotificationCenter()
            int r3 = im.bclpbkiauv.messenger.NotificationCenter.dialogsNeedReload
            r5 = 0
            java.lang.Object[] r6 = new java.lang.Object[r5]
            r2.postNotificationName(r3, r6)
            im.bclpbkiauv.messenger.NotificationCenter r2 = r7.getNotificationCenter()
            int r3 = im.bclpbkiauv.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r4 = new java.lang.Object[r4]
            r6 = 16
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            r4[r5] = r6
            r2.postNotificationName(r3, r4)
        L_0x006c:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.changeChatTitle(int, java.lang.String):void");
    }

    public /* synthetic */ void lambda$changeChatTitle$205$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v2, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_editPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v7, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatAvatar(int r5, im.bclpbkiauv.tgnet.TLRPC.InputFile r6, im.bclpbkiauv.tgnet.TLRPC.FileLocation r7, im.bclpbkiauv.tgnet.TLRPC.FileLocation r8) {
        /*
            r4 = this;
            int r0 = r4.currentAccount
            boolean r0 = im.bclpbkiauv.messenger.ChatObject.isChannel(r5, r0)
            if (r0 == 0) goto L_0x002a
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_editPhoto r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_editPhoto
            r0.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r1 = r4.getInputChannel((int) r5)
            r0.channel = r1
            if (r6 == 0) goto L_0x0021
            im.bclpbkiauv.tgnet.TLRPC$TL_inputChatUploadedPhoto r1 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputChatUploadedPhoto
            r1.<init>()
            r0.photo = r1
            im.bclpbkiauv.tgnet.TLRPC$InputChatPhoto r1 = r0.photo
            r1.file = r6
            goto L_0x0028
        L_0x0021:
            im.bclpbkiauv.tgnet.TLRPC$TL_inputChatPhotoEmpty r1 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputChatPhotoEmpty
            r1.<init>()
            r0.photo = r1
        L_0x0028:
            goto L_0x0047
        L_0x002a:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatPhoto r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_editChatPhoto
            r0.<init>()
            r0.chat_id = r5
            if (r6 == 0) goto L_0x003f
            im.bclpbkiauv.tgnet.TLRPC$TL_inputChatUploadedPhoto r1 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputChatUploadedPhoto
            r1.<init>()
            r0.photo = r1
            im.bclpbkiauv.tgnet.TLRPC$InputChatPhoto r1 = r0.photo
            r1.file = r6
            goto L_0x0046
        L_0x003f:
            im.bclpbkiauv.tgnet.TLRPC$TL_inputChatPhotoEmpty r1 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputChatPhotoEmpty
            r1.<init>()
            r0.photo = r1
        L_0x0046:
            r1 = r0
        L_0x0047:
            im.bclpbkiauv.tgnet.ConnectionsManager r1 = r4.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$URQd8JZF3l6JjT6DTTonphOUnJM r2 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$URQd8JZF3l6JjT6DTTonphOUnJM
            r2.<init>(r7, r8)
            r3 = 64
            r1.sendRequest(r0, r2, r3)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.changeChatAvatar(int, im.bclpbkiauv.tgnet.TLRPC$InputFile, im.bclpbkiauv.tgnet.TLRPC$FileLocation, im.bclpbkiauv.tgnet.TLRPC$FileLocation):void");
    }

    public /* synthetic */ void lambda$changeChatAvatar$206$MessagesController(TLRPC.FileLocation smallSize, TLRPC.FileLocation bigSize, TLObject response, TLRPC.TL_error error) {
        TLRPC.FileLocation fileLocation = smallSize;
        TLRPC.FileLocation fileLocation2 = bigSize;
        if (error == null) {
            TLRPC.Updates updates = (TLRPC.Updates) response;
            TLRPC.Photo photo = null;
            int a = 0;
            int N = updates.updates.size();
            while (true) {
                if (a >= N) {
                    break;
                }
                TLRPC.Update update = updates.updates.get(a);
                if (update instanceof TLRPC.TL_updateNewChannelMessage) {
                    TLRPC.Message message = ((TLRPC.TL_updateNewChannelMessage) update).message;
                    if ((message.action instanceof TLRPC.TL_messageActionChatEditPhoto) && (message.action.photo instanceof TLRPC.TL_photo)) {
                        photo = message.action.photo;
                        break;
                    }
                } else if (update instanceof TLRPC.TL_updateNewMessage) {
                    TLRPC.Message message2 = ((TLRPC.TL_updateNewMessage) update).message;
                    if ((message2.action instanceof TLRPC.TL_messageActionChatEditPhoto) && (message2.action.photo instanceof TLRPC.TL_photo)) {
                        photo = message2.action.photo;
                        break;
                    }
                } else {
                    continue;
                }
                a++;
            }
            if (photo != null) {
                TLRPC.PhotoSize small = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 150);
                if (!(small == null || fileLocation == null)) {
                    FileLoader.getPathToAttach(smallSize, true).renameTo(FileLoader.getPathToAttach(small, true));
                    ImageLoader.getInstance().replaceImageInCache(fileLocation.volume_id + "_" + fileLocation.local_id + "@50_50", small.location.volume_id + "_" + small.location.local_id + "@50_50", ImageLocation.getForPhoto(small, photo), true);
                }
                TLRPC.PhotoSize big = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, CodeUtils.DEFAULT_REQ_HEIGHT);
                if (!(big == null || fileLocation2 == null)) {
                    FileLoader.getPathToAttach(fileLocation2, true).renameTo(FileLoader.getPathToAttach(big, true));
                }
            }
            processUpdates(updates, false);
        }
    }

    public void unregistedPush() {
        if (getUserConfig().registeredForPush && SharedConfig.pushString.length() == 0) {
            TLRPC.TL_account_unregisterDevice req = new TLRPC.TL_account_unregisterDevice();
            req.token = SharedConfig.pushString;
            req.token_type = 2;
            for (int a = 0; a < 3; a++) {
                UserConfig userConfig = UserConfig.getInstance(a);
                if (a != this.currentAccount && userConfig.isClientActivated()) {
                    req.other_uids.add(Integer.valueOf(userConfig.getClientUserId()));
                }
            }
            getConnectionsManager().sendRequest(req, $$Lambda$MessagesController$ql7psGU_7ic4jqPdyqupHTFyWE.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$unregistedPush$207(TLObject response, TLRPC.TL_error error) {
    }

    public void generateUpdateMessage() {
        if (!BuildVars.DEBUG_VERSION && SharedConfig.lastUpdateVersion != null && !SharedConfig.lastUpdateVersion.equals(BuildVars.BUILD_VERSION_STRING)) {
            TLRPC.TL_help_getAppChangelog req = new TLRPC.TL_help_getAppChangelog();
            req.prev_app_version = SharedConfig.lastUpdateVersion;
            getConnectionsManager().sendRequest(req, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$generateUpdateMessage$208$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$generateUpdateMessage$208$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            SharedConfig.lastUpdateVersion = BuildVars.BUILD_VERSION_STRING;
            SharedConfig.saveConfig();
        }
        if (response instanceof TLRPC.Updates) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public void performLogout(int type) {
        boolean z = true;
        if (type == 1) {
            unregistedPush();
            getConnectionsManager().sendRequest(new TLRPC.TL_auth_logOut(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$performLogout$209$MessagesController(tLObject, tL_error);
                }
            });
        } else {
            ConnectionsManager connectionsManager = getConnectionsManager();
            if (type != 2) {
                z = false;
            }
            connectionsManager.cleanup(z);
        }
        getUserConfig().clearConfig();
        getNotificationCenter().postNotificationName(NotificationCenter.appDidLogout, new Object[0]);
        getMessagesStorage().cleanup(false);
        cleanup();
        getContactsController().deleteUnknownAppAccounts();
        AndroidUtilities.runOnUIThread($$Lambda$MessagesController$yx9qCU9XmLP0xnwgYtzYpd1Mue8.INSTANCE);
    }

    public /* synthetic */ void lambda$performLogout$209$MessagesController(TLObject response, TLRPC.TL_error error) {
        getConnectionsManager().cleanup(false);
    }

    public void registerForPush(String regid) {
        if (!TextUtils.isEmpty(regid) && !this.registeringForPush && getUserConfig().getClientUserId() != 0) {
            if (!getUserConfig().registeredForPush || !regid.equals(SharedConfig.pushString)) {
                this.registeringForPush = true;
                this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
                if (SharedConfig.pushAuthKey == null) {
                    SharedConfig.pushAuthKey = new byte[256];
                    Utilities.random.nextBytes(SharedConfig.pushAuthKey);
                    SharedConfig.saveConfig();
                }
                TLRPC.TL_account_registerDevice req = new TLRPC.TL_account_registerDevice();
                req.token_type = 2;
                req.token = regid;
                req.no_muted = false;
                req.secret = SharedConfig.pushAuthKey;
                for (int a = 0; a < 3; a++) {
                    UserConfig userConfig = UserConfig.getInstance(a);
                    if (a != this.currentAccount && userConfig.isClientActivated()) {
                        req.other_uids.add(Integer.valueOf(userConfig.getClientUserId()));
                    }
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(regid) {
                    private final /* synthetic */ String f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$registerForPush$212$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$registerForPush$212$MessagesController(String regid, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_boolTrue) {
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = regid;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$null$211$MessagesController();
            }
        });
    }

    public /* synthetic */ void lambda$null$211$MessagesController() {
        this.registeringForPush = false;
    }

    public void registerForUPush(String regid) {
        if (!TextUtils.isEmpty(regid) && !this.registeringForPush && getUserConfig().getClientUserId() != 0) {
            if (!getUserConfig().registeredForPush || !regid.equals(SharedConfig.pushString)) {
                this.registeringForPush = true;
                this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
                if (SharedConfig.pushAuthKey == null) {
                    SharedConfig.pushAuthKey = new byte[256];
                    Utilities.random.nextBytes(SharedConfig.pushAuthKey);
                    SharedConfig.saveConfig();
                }
                TLRPC.TL_account_registerDevice req = new TLRPC.TL_account_registerDevice();
                req.token_type = getPushDeviceType();
                req.token = regid;
                req.no_muted = false;
                req.secret = SharedConfig.pushAuthKey;
                for (int a = 0; a < 3; a++) {
                    UserConfig userConfig = UserConfig.getInstance(a);
                    if (a != this.currentAccount && userConfig.isClientActivated()) {
                        int uid = userConfig.getClientUserId();
                        req.other_uids.add(Integer.valueOf(uid));
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("add other uid = " + uid + " for account " + this.currentAccount);
                        }
                    }
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(regid) {
                    private final /* synthetic */ String f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$registerForUPush$214$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$registerForUPush$214$MessagesController(String regid, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_boolTrue) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("account " + this.currentAccount + " registered for push");
            }
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = regid;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$null$213$MessagesController();
            }
        });
    }

    public /* synthetic */ void lambda$null$213$MessagesController() {
        this.registeringForPush = false;
    }

    private int getPushDeviceType() {
        if (MryDeviceHelper.isHuawei()) {
            return 5;
        }
        if (MryDeviceHelper.isXiaomi()) {
            return 6;
        }
        if (MryDeviceHelper.isOppo()) {
            return 7;
        }
        return 8;
    }

    public void loadCurrentState() {
        if (!this.updatingState) {
            this.updatingState = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_updates_getState(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadCurrentState$215$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadCurrentState$215$MessagesController(TLObject response, TLRPC.TL_error error) {
        this.updatingState = false;
        if (error == null) {
            TLRPC.TL_updates_state res = (TLRPC.TL_updates_state) response;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("loadCurrentState ===> response = " + res.toString());
            }
            getMessagesStorage().setLastDateValue(res.date);
            getMessagesStorage().setLastPtsValue(res.pts);
            getMessagesStorage().setLastSeqValue(res.seq);
            getMessagesStorage().setLastQtsValue(res.qts);
            for (int a = 0; a < 3; a++) {
                processUpdatesQueue(a, 2);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (error.code != 401) {
            loadCurrentState();
        }
    }

    private int getUpdateSeq(TLRPC.Updates updates) {
        if (updates instanceof TLRPC.TL_updatesCombined) {
            return updates.seq_start;
        }
        return updates.seq;
    }

    private void setUpdatesStartTime(int type, long time) {
        if (type == 0) {
            this.updatesStartWaitTimeSeq = time;
        } else if (type == 1) {
            this.updatesStartWaitTimePts = time;
        } else if (type == 2) {
            this.updatesStartWaitTimeQts = time;
        }
    }

    public long getUpdatesStartTime(int type) {
        if (type == 0) {
            return this.updatesStartWaitTimeSeq;
        }
        if (type == 1) {
            return this.updatesStartWaitTimePts;
        }
        if (type == 2) {
            return this.updatesStartWaitTimeQts;
        }
        return 0;
    }

    private int isValidUpdate(TLRPC.Updates updates, int type) {
        if (type == 0) {
            int seq = getUpdateSeq(updates);
            if (getMessagesStorage().getLastSeqValue() + 1 == seq || getMessagesStorage().getLastSeqValue() == seq) {
                return 0;
            }
            return getMessagesStorage().getLastSeqValue() < seq ? 1 : 2;
        } else if (type == 1) {
            if (updates.pts <= getMessagesStorage().getLastPtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastPtsValue() + updates.pts_count == updates.pts ? 0 : 1;
        } else if (type != 2) {
            return 0;
        } else {
            if (updates.pts <= getMessagesStorage().getLastQtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastQtsValue() + updates.updates.size() == updates.pts ? 0 : 1;
        }
    }

    private void processChannelsUpdatesQueue(int channelId, int state) {
        int updateState;
        int i = channelId;
        ArrayList<TLRPC.Updates> updatesQueue = this.updatesQueueChannels.get(i);
        if (updatesQueue != null) {
            int channelPts = this.channelsPts.get(i);
            if (updatesQueue.isEmpty()) {
                int i2 = state;
            } else if (channelPts == 0) {
                int i3 = state;
            } else {
                Collections.sort(updatesQueue, $$Lambda$MessagesController$lKAbhJoiBr4UbdgDiNAK1QkOwAM.INSTANCE);
                boolean anyProceed = false;
                if (state == 2) {
                    this.channelsPts.put(i, updatesQueue.get(0).pts);
                }
                for (int a = 0; a < updatesQueue.size(); a = (a - 1) + 1) {
                    TLRPC.Updates updates = updatesQueue.get(a);
                    if (updates.pts <= channelPts) {
                        updateState = 2;
                    } else if (updates.pts_count + channelPts == updates.pts) {
                        updateState = 0;
                    } else {
                        updateState = 1;
                    }
                    if (updateState == 0) {
                        processUpdates(updates, true);
                        anyProceed = true;
                        updatesQueue.remove(a);
                    } else if (updateState == 1) {
                        long updatesStartWaitTime = this.updatesStartWaitTimeChannels.get(i);
                        if (updatesStartWaitTime == 0 || (!anyProceed && Math.abs(System.currentTimeMillis() - updatesStartWaitTime) > 1500)) {
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("HOLE IN CHANNEL " + i + " UPDATES QUEUE - getChannelDifference ");
                            }
                            this.updatesStartWaitTimeChannels.delete(i);
                            this.updatesQueueChannels.remove(i);
                            getChannelDifference(channelId);
                            return;
                        }
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("HOLE IN CHANNEL " + i + " UPDATES QUEUE - will wait more time");
                        }
                        if (anyProceed) {
                            this.updatesStartWaitTimeChannels.put(i, System.currentTimeMillis());
                            return;
                        }
                        return;
                    } else {
                        updatesQueue.remove(a);
                    }
                }
                this.updatesQueueChannels.remove(i);
                this.updatesStartWaitTimeChannels.delete(i);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("UPDATES CHANNEL " + i + " QUEUE PROCEED - OK");
                    return;
                }
                return;
            }
            this.updatesQueueChannels.remove(i);
        }
    }

    private void processUpdatesQueue(int type, int state) {
        ArrayList<TLRPC.Updates> updatesQueue = null;
        if (type == 0) {
            updatesQueue = this.updatesQueueSeq;
            Collections.sort(updatesQueue, new Comparator() {
                public final int compare(Object obj, Object obj2) {
                    return MessagesController.this.lambda$processUpdatesQueue$217$MessagesController((TLRPC.Updates) obj, (TLRPC.Updates) obj2);
                }
            });
        } else if (type == 1) {
            updatesQueue = this.updatesQueuePts;
            Collections.sort(updatesQueue, $$Lambda$MessagesController$N8tuvw9O0014lDbarpmKZFlhYAY.INSTANCE);
        } else if (type == 2) {
            updatesQueue = this.updatesQueueQts;
            Collections.sort(updatesQueue, $$Lambda$MessagesController$HoAhZcnmry4ytudOGaageDjV5q4.INSTANCE);
        }
        if (updatesQueue != null && !updatesQueue.isEmpty()) {
            boolean anyProceed = false;
            if (state == 2) {
                TLRPC.Updates updates = updatesQueue.get(0);
                if (type == 0) {
                    getMessagesStorage().setLastSeqValue(getUpdateSeq(updates));
                } else if (type == 1) {
                    getMessagesStorage().setLastPtsValue(updates.pts);
                } else {
                    getMessagesStorage().setLastQtsValue(updates.pts);
                }
            }
            for (int a = 0; a < updatesQueue.size(); a = (a - 1) + 1) {
                TLRPC.Updates updates2 = updatesQueue.get(a);
                int updateState = isValidUpdate(updates2, type);
                if (updateState == 0) {
                    processUpdates(updates2, true);
                    anyProceed = true;
                    updatesQueue.remove(a);
                } else if (updateState != 1) {
                    updatesQueue.remove(a);
                } else if (getUpdatesStartTime(type) == 0 || (!anyProceed && Math.abs(System.currentTimeMillis() - getUpdatesStartTime(type)) > 1500)) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - getDifference");
                    }
                    setUpdatesStartTime(type, 0);
                    updatesQueue.clear();
                    getDifference();
                    return;
                } else {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - will wait more time");
                    }
                    if (anyProceed) {
                        setUpdatesStartTime(type, System.currentTimeMillis());
                        return;
                    }
                    return;
                }
            }
            updatesQueue.clear();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES QUEUE PROCEED - OK");
            }
        }
        setUpdatesStartTime(type, 0);
    }

    public /* synthetic */ int lambda$processUpdatesQueue$217$MessagesController(TLRPC.Updates updates, TLRPC.Updates updates2) {
        return AndroidUtilities.compare(getUpdateSeq(updates), getUpdateSeq(updates2));
    }

    /* access modifiers changed from: protected */
    public void loadUnknownChannel(TLRPC.Chat channel, long taskId) {
        long newTaskId;
        if ((channel instanceof TLRPC.TL_channel) && this.gettingUnknownChannels.indexOfKey(channel.id) < 0) {
            if (channel.access_hash != 0) {
                TLRPC.TL_inputPeerChannel inputPeer = new TLRPC.TL_inputPeerChannel();
                inputPeer.channel_id = channel.id;
                inputPeer.access_hash = channel.access_hash;
                this.gettingUnknownChannels.put(channel.id, true);
                TLRPC.TL_messages_getPeerDialogs req = new TLRPC.TL_messages_getPeerDialogs();
                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                inputDialogPeer.peer = inputPeer;
                req.peers.add(inputDialogPeer);
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(channel.getObjectSize() + 4);
                        data.writeInt32(0);
                        channel.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(newTaskId, channel) {
                    private final /* synthetic */ long f$1;
                    private final /* synthetic */ TLRPC.Chat f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$loadUnknownChannel$220$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                    }
                });
            } else if (taskId != 0) {
                getMessagesStorage().removePendingTask(taskId);
            }
        }
    }

    public /* synthetic */ void lambda$loadUnknownChannel$220$MessagesController(long newTaskId, TLRPC.Chat channel, TLObject response, TLRPC.TL_error error) {
        long j = newTaskId;
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            if (!res.dialogs.isEmpty() && !res.chats.isEmpty() && !(res.dialogs.get(0) instanceof TLRPC.TL_dialogFolder)) {
                TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                dialogs.dialogs.addAll(res.dialogs);
                dialogs.messages.addAll(res.messages);
                dialogs.users.addAll(res.users);
                dialogs.chats.addAll(res.chats);
                processLoadedDialogs(dialogs, (ArrayList<TLRPC.EncryptedChat>) null, ((TLRPC.TL_dialog) res.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_CHANNEL, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownChannels.delete(channel.id);
    }

    public void startShortPoll(TLRPC.Chat chat, boolean stop) {
        Utilities.stageQueue.postRunnable(new Runnable(stop, chat) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ TLRPC.Chat f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$startShortPoll$221$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$startShortPoll$221$MessagesController(boolean stop, TLRPC.Chat chat) {
        if (stop) {
            this.needShortPollChannels.delete(chat.id);
            if (chat.megagroup) {
                this.needShortPollOnlines.delete(chat.id);
                return;
            }
            return;
        }
        this.needShortPollChannels.put(chat.id, 0);
        if (this.shortPollChannels.indexOfKey(chat.id) < 0) {
            getChannelDifference(chat.id, 3, 0, (TLRPC.InputChannel) null);
        }
        if (chat.megagroup) {
            this.needShortPollOnlines.put(chat.id, 0);
            if (this.shortPollOnlines.indexOfKey(chat.id) < 0) {
                this.shortPollOnlines.put(chat.id, 0);
            }
        }
    }

    private void getChannelDifference(int channelId) {
        getChannelDifference(channelId, 0, 0, (TLRPC.InputChannel) null);
    }

    public static boolean isSupportUser(TLRPC.User user) {
        return user != null && (user.support || user.id == 777000 || user.id == 333000 || user.id == 4240000 || user.id == 4244000 || user.id == 4245000 || user.id == 4246000 || user.id == 410000 || user.id == 420000 || user.id == 431000 || user.id == 431415000 || user.id == 434000 || user.id == 4243000 || user.id == 439000 || user.id == 449000 || user.id == 450000 || user.id == 452000 || user.id == 454000 || user.id == 4254000 || user.id == 455000 || user.id == 460000 || user.id == 470000 || user.id == 479000 || user.id == 796000 || user.id == 482000 || user.id == 490000 || user.id == 496000 || user.id == 497000 || user.id == 498000 || user.id == 4298000);
    }

    /* access modifiers changed from: protected */
    public void getChannelDifference(int channelId, int newDialogType, long taskId, TLRPC.InputChannel inputChannel) {
        int channelPts;
        int limit;
        TLRPC.InputChannel inputChannel2;
        long newTaskId;
        int i = channelId;
        int i2 = newDialogType;
        long j = taskId;
        if (!this.gettingDifferenceChannels.get(i)) {
            boolean z = true;
            if (i2 != 1) {
                int channelPts2 = this.channelsPts.get(i);
                if (channelPts2 == 0) {
                    channelPts2 = getMessagesStorage().getChannelPtsSync(i);
                    if (channelPts2 != 0) {
                        this.channelsPts.put(i, channelPts2);
                    }
                    if (channelPts2 == 0 && (i2 == 2 || i2 == 3)) {
                        return;
                    }
                }
                if (channelPts2 != 0) {
                    limit = 100;
                    channelPts = channelPts2;
                } else {
                    return;
                }
            } else if (this.channelsPts.get(i) == 0) {
                limit = 1;
                channelPts = 1;
            } else {
                return;
            }
            if (inputChannel == null) {
                TLRPC.Chat chat = getChat(Integer.valueOf(channelId));
                if (chat == null && (chat = getMessagesStorage().getChatSync(i)) != null) {
                    putChat(chat, true);
                }
                inputChannel2 = getInputChannel(chat);
            } else {
                inputChannel2 = inputChannel;
            }
            if (inputChannel2 != null && inputChannel2.access_hash != 0) {
                if (j == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(inputChannel2.getObjectSize() + 12);
                        data.writeInt32(6);
                        data.writeInt32(i);
                        data.writeInt32(i2);
                        inputChannel2.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                this.gettingDifferenceChannels.put(i, true);
                TLRPC.TL_updates_getChannelDifference req = new TLRPC.TL_updates_getChannelDifference();
                req.channel = inputChannel2;
                req.filter = new TLRPC.TL_channelMessagesFilterEmpty();
                req.pts = channelPts;
                req.limit = limit;
                if (i2 == 3) {
                    z = false;
                }
                req.force = z;
                ConnectionsManager connectionsManager = getConnectionsManager();
                $$Lambda$MessagesController$KPmxIVhB6qSZt0vm4mO9Me1nUlM r8 = r1;
                $$Lambda$MessagesController$KPmxIVhB6qSZt0vm4mO9Me1nUlM r1 = new RequestDelegate(channelId, newDialogType, newTaskId) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ long f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$getChannelDifference$230$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tL_error);
                    }
                };
                connectionsManager.sendRequest(req, r8);
            } else if (j != 0) {
                getMessagesStorage().removePendingTask(j);
            }
        }
    }

    public /* synthetic */ void lambda$getChannelDifference$230$MessagesController(int channelId, int newDialogType, long newTaskId, TLObject response, TLRPC.TL_error error) {
        TLRPC.Chat channel;
        int i = channelId;
        long j = newTaskId;
        TLRPC.TL_error tL_error = error;
        if (response != null) {
            TLRPC.updates_ChannelDifference res = (TLRPC.updates_ChannelDifference) response;
            SparseArray<TLRPC.User> usersDict = new SparseArray<>();
            for (int a = 0; a < res.users.size(); a++) {
                TLRPC.User user = res.users.get(a);
                usersDict.put(user.id, user);
            }
            int a2 = 0;
            while (true) {
                if (a2 >= res.chats.size()) {
                    channel = null;
                    break;
                }
                TLRPC.Chat chat = res.chats.get(a2);
                if (chat.id == i) {
                    channel = chat;
                    break;
                }
                a2++;
            }
            TLRPC.Chat channelFinal = channel;
            ArrayList<TLRPC.TL_updateMessageID> msgUpdates = new ArrayList<>();
            if (!res.other_updates.isEmpty()) {
                int a3 = 0;
                while (a3 < res.other_updates.size()) {
                    TLRPC.Update upd = res.other_updates.get(a3);
                    if (upd instanceof TLRPC.TL_updateMessageID) {
                        msgUpdates.add((TLRPC.TL_updateMessageID) upd);
                        res.other_updates.remove(a3);
                        a3--;
                    }
                    a3++;
                }
            }
            getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
            AndroidUtilities.runOnUIThread(new Runnable(res) {
                private final /* synthetic */ TLRPC.updates_ChannelDifference f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$222$MessagesController(this.f$1);
                }
            });
            TLRPC.updates_ChannelDifference updates_channeldifference = res;
            TLRPC.updates_ChannelDifference updates_channeldifference2 = res;
            $$Lambda$MessagesController$2CPNHINlPVTv1Cs3vKWFOQ1G4 r15 = r0;
            DispatchQueue storageQueue = getMessagesStorage().getStorageQueue();
            SparseArray<TLRPC.User> sparseArray = usersDict;
            ArrayList<TLRPC.TL_updateMessageID> arrayList = msgUpdates;
            $$Lambda$MessagesController$2CPNHINlPVTv1Cs3vKWFOQ1G4 r0 = new Runnable(msgUpdates, channelId, updates_channeldifference, channelFinal, usersDict, newDialogType, newTaskId) {
                private final /* synthetic */ ArrayList f$1;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ TLRPC.updates_ChannelDifference f$3;
                private final /* synthetic */ TLRPC.Chat f$4;
                private final /* synthetic */ SparseArray f$5;
                private final /* synthetic */ int f$6;
                private final /* synthetic */ long f$7;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                    this.f$7 = r8;
                }

                public final void run() {
                    MessagesController.this.lambda$null$228$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
                }
            };
            storageQueue.postRunnable(r15);
            long j2 = newTaskId;
        } else if (tL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tL_error, i) {
                private final /* synthetic */ TLRPC.TL_error f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$229$MessagesController(this.f$1, this.f$2);
                }
            });
            this.gettingDifferenceChannels.delete(i);
            long j3 = newTaskId;
            if (j3 != 0) {
                getMessagesStorage().removePendingTask(j3);
            }
        } else {
            long j4 = newTaskId;
        }
    }

    public /* synthetic */ void lambda$null$222$MessagesController(TLRPC.updates_ChannelDifference res) {
        putUsers(res.users, false);
        putChats(res.chats, false);
    }

    public /* synthetic */ void lambda$null$228$MessagesController(ArrayList msgUpdates, int channelId, TLRPC.updates_ChannelDifference res, TLRPC.Chat channelFinal, SparseArray usersDict, int newDialogType, long newTaskId) {
        if (!msgUpdates.isEmpty()) {
            SparseArray<long[]> corrected = new SparseArray<>();
            Iterator it = msgUpdates.iterator();
            while (it.hasNext()) {
                TLRPC.TL_updateMessageID update = (TLRPC.TL_updateMessageID) it.next();
                long[] ids = getMessagesStorage().updateMessageStateAndId(update.random_id, (Integer) null, update.id, 0, false, channelId, -1);
                if (ids != null) {
                    corrected.put(update.id, ids);
                }
            }
            if (corrected.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable(corrected) {
                    private final /* synthetic */ SparseArray f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$223$MessagesController(this.f$1);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable(res, channelId, channelFinal, usersDict, newDialogType, newTaskId) {
            private final /* synthetic */ TLRPC.updates_ChannelDifference f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ TLRPC.Chat f$3;
            private final /* synthetic */ SparseArray f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ long f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$227$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$223$MessagesController(SparseArray corrected) {
        for (int a = 0; a < corrected.size(); a++) {
            int newId = corrected.keyAt(a);
            long[] ids = (long[]) corrected.valueAt(a);
            int oldId = (int) ids[1];
            getSendMessagesHelper().processSentMessage(oldId);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(oldId), Integer.valueOf(newId), null, Long.valueOf(ids[0]), 0L, -1, false);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:105:0x01ac A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:107:? A[RETURN, SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:68:0x0165  */
    /* JADX WARNING: Removed duplicated region for block: B:69:0x016d  */
    /* JADX WARNING: Removed duplicated region for block: B:79:0x01a3  */
    /* JADX WARNING: Removed duplicated region for block: B:89:0x0212  */
    /* JADX WARNING: Removed duplicated region for block: B:92:0x0226  */
    /* JADX WARNING: Removed duplicated region for block: B:95:0x022d  */
    /* JADX WARNING: Removed duplicated region for block: B:98:0x0251  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$227$MessagesController(im.bclpbkiauv.tgnet.TLRPC.updates_ChannelDifference r22, int r23, im.bclpbkiauv.tgnet.TLRPC.Chat r24, android.util.SparseArray r25, int r26, long r27) {
        /*
            r21 = this;
            r6 = r21
            r7 = r22
            r8 = r23
            r9 = r24
            r10 = r27
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updates_channelDifference
            r1 = -2147483648(0xffffffff80000000, float:-0.0)
            r2 = 0
            r12 = 1
            if (r0 != 0) goto L_0x00c6
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updates_channelDifferenceEmpty
            if (r0 == 0) goto L_0x001a
            r13 = r26
            goto L_0x00c8
        L_0x001a:
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updates_channelDifferenceTooLong
            if (r0 == 0) goto L_0x00c0
            int r0 = -r8
            long r3 = (long) r0
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r6.dialogs_read_inbox_max
            java.lang.Long r5 = java.lang.Long.valueOf(r3)
            java.lang.Object r0 = r0.get(r5)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x0043
            im.bclpbkiauv.messenger.MessagesStorage r5 = r21.getMessagesStorage()
            int r5 = r5.getDialogReadMax(r2, r3)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r5)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_inbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r3)
            r5.put(r13, r0)
        L_0x0043:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_outbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r3)
            java.lang.Object r5 = r5.get(r13)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0066
            im.bclpbkiauv.messenger.MessagesStorage r13 = r21.getMessagesStorage()
            int r13 = r13.getDialogReadMax(r12, r3)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r13)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_outbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r3)
            r13.put(r14, r5)
        L_0x0066:
            r13 = 0
        L_0x0067:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r14 = r7.messages
            int r14 = r14.size()
            if (r13 >= r14) goto L_0x00ae
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r14 = r7.messages
            java.lang.Object r14 = r14.get(r13)
            im.bclpbkiauv.tgnet.TLRPC$Message r14 = (im.bclpbkiauv.tgnet.TLRPC.Message) r14
            int r15 = -r8
            r16 = r3
            long r2 = (long) r15
            r14.dialog_id = r2
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r2 = r14.action
            boolean r2 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionChannelCreate
            if (r2 != 0) goto L_0x009a
            if (r9 == 0) goto L_0x0089
            boolean r2 = r9.left
            if (r2 != 0) goto L_0x009a
        L_0x0089:
            boolean r2 = r14.out
            if (r2 == 0) goto L_0x008f
            r2 = r5
            goto L_0x0090
        L_0x008f:
            r2 = r0
        L_0x0090:
            int r2 = r2.intValue()
            int r3 = r14.id
            if (r2 >= r3) goto L_0x009a
            r2 = 1
            goto L_0x009b
        L_0x009a:
            r2 = 0
        L_0x009b:
            r14.unread = r2
            if (r9 == 0) goto L_0x00a8
            boolean r2 = r9.megagroup
            if (r2 == 0) goto L_0x00a8
            int r2 = r14.flags
            r2 = r2 | r1
            r14.flags = r2
        L_0x00a8:
            int r13 = r13 + 1
            r3 = r16
            r2 = 0
            goto L_0x0067
        L_0x00ae:
            r16 = r3
            im.bclpbkiauv.messenger.MessagesStorage r1 = r21.getMessagesStorage()
            r2 = r7
            im.bclpbkiauv.tgnet.TLRPC$TL_updates_channelDifferenceTooLong r2 = (im.bclpbkiauv.tgnet.TLRPC.TL_updates_channelDifferenceTooLong) r2
            r13 = r26
            r1.overwriteChannel(r8, r2, r13)
            r13 = r25
            goto L_0x0200
        L_0x00c0:
            r13 = r26
            r13 = r25
            goto L_0x0200
        L_0x00c6:
            r13 = r26
        L_0x00c8:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r0 = r7.new_messages
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x01dc
            android.util.LongSparseArray r0 = new android.util.LongSparseArray
            r0.<init>()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r2 = r7.new_messages
            im.bclpbkiauv.messenger.ImageLoader.saveMessagesThumbs(r2)
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            int r3 = -r8
            long r3 = (long) r3
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_inbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r3)
            java.lang.Object r5 = r5.get(r14)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0105
            im.bclpbkiauv.messenger.MessagesStorage r14 = r21.getMessagesStorage()
            r15 = 0
            int r14 = r14.getDialogReadMax(r15, r3)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r14)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r14 = r6.dialogs_read_inbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r3)
            r14.put(r15, r5)
        L_0x0105:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r14 = r6.dialogs_read_outbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r3)
            java.lang.Object r14 = r14.get(r15)
            java.lang.Integer r14 = (java.lang.Integer) r14
            if (r14 != 0) goto L_0x0128
            im.bclpbkiauv.messenger.MessagesStorage r15 = r21.getMessagesStorage()
            int r15 = r15.getDialogReadMax(r12, r3)
            java.lang.Integer r14 = java.lang.Integer.valueOf(r15)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r15 = r6.dialogs_read_outbox_max
            java.lang.Long r12 = java.lang.Long.valueOf(r3)
            r15.put(r12, r14)
        L_0x0128:
            r12 = 0
        L_0x0129:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r15 = r7.new_messages
            int r15 = r15.size()
            if (r12 >= r15) goto L_0x01bd
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Message> r15 = r7.new_messages
            java.lang.Object r15 = r15.get(r12)
            im.bclpbkiauv.tgnet.TLRPC$Message r15 = (im.bclpbkiauv.tgnet.TLRPC.Message) r15
            if (r9 == 0) goto L_0x0143
            boolean r1 = r9.left
            if (r1 != 0) goto L_0x0140
            goto L_0x0143
        L_0x0140:
            r18 = r5
            goto L_0x015c
        L_0x0143:
            boolean r1 = r15.out
            if (r1 == 0) goto L_0x0149
            r1 = r14
            goto L_0x014a
        L_0x0149:
            r1 = r5
        L_0x014a:
            int r1 = r1.intValue()
            r18 = r5
            int r5 = r15.id
            if (r1 >= r5) goto L_0x015c
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r1 = r15.action
            boolean r1 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionChannelCreate
            if (r1 != 0) goto L_0x015c
            r1 = 1
            goto L_0x015d
        L_0x015c:
            r1 = 0
        L_0x015d:
            r15.unread = r1
            if (r9 == 0) goto L_0x016d
            boolean r1 = r9.megagroup
            if (r1 == 0) goto L_0x016d
            int r1 = r15.flags
            r5 = -2147483648(0xffffffff80000000, float:-0.0)
            r1 = r1 | r5
            r15.flags = r1
            goto L_0x016f
        L_0x016d:
            r5 = -2147483648(0xffffffff80000000, float:-0.0)
        L_0x016f:
            im.bclpbkiauv.messenger.MessageObject r1 = new im.bclpbkiauv.messenger.MessageObject
            int r5 = r6.currentAccount
            java.util.ArrayList<java.lang.Long> r9 = r6.createdDialogIds
            java.lang.Long r13 = java.lang.Long.valueOf(r3)
            boolean r9 = r9.contains(r13)
            r13 = r25
            r1.<init>((int) r5, (im.bclpbkiauv.tgnet.TLRPC.Message) r15, (android.util.SparseArray<im.bclpbkiauv.tgnet.TLRPC.User>) r13, (boolean) r9)
            boolean r5 = r1.isOut()
            if (r5 == 0) goto L_0x018e
            im.bclpbkiauv.tgnet.TLRPC$Message r5 = r1.messageOwner
            boolean r5 = r5.from_scheduled
            if (r5 == 0) goto L_0x0197
        L_0x018e:
            boolean r5 = r1.isUnread()
            if (r5 == 0) goto L_0x0197
            r2.add(r1)
        L_0x0197:
            int r5 = -r8
            r19 = r3
            long r3 = (long) r5
            java.lang.Object r5 = r0.get(r3)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x01ac
            java.util.ArrayList r9 = new java.util.ArrayList
            r9.<init>()
            r5 = r9
            r0.put(r3, r5)
        L_0x01ac:
            r5.add(r1)
            int r12 = r12 + 1
            r9 = r24
            r13 = r26
            r5 = r18
            r3 = r19
            r1 = -2147483648(0xffffffff80000000, float:-0.0)
            goto L_0x0129
        L_0x01bd:
            r13 = r25
            r19 = r3
            r18 = r5
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$xeGSmK2r3mCVwuUKDv2mgVJv08Y r1 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$xeGSmK2r3mCVwuUKDv2mgVJv08Y
            r1.<init>(r0)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r1)
            im.bclpbkiauv.messenger.MessagesStorage r1 = r21.getMessagesStorage()
            im.bclpbkiauv.messenger.DispatchQueue r1 = r1.getStorageQueue()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$juYVbnX8r-EhveHqlHkyi_hrtd0 r3 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$juYVbnX8r-EhveHqlHkyi_hrtd0
            r3.<init>(r2, r7)
            r1.postRunnable(r3)
            goto L_0x01de
        L_0x01dc:
            r13 = r25
        L_0x01de:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r0 = r7.other_updates
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x01f3
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r7.other_updates
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 1
            r5 = 0
            r0 = r21
            r0.processUpdateArray(r1, r2, r3, r4, r5)
        L_0x01f3:
            r0 = 1
            r6.processChannelsUpdatesQueue(r8, r0)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r21.getMessagesStorage()
            int r1 = r7.pts
            r0.saveChannelPts(r8, r1)
        L_0x0200:
            android.util.SparseBooleanArray r0 = r6.gettingDifferenceChannels
            r0.delete(r8)
            android.util.SparseIntArray r0 = r6.channelsPts
            int r1 = r7.pts
            r0.put(r8, r1)
            int r0 = r7.flags
            r0 = r0 & 2
            if (r0 == 0) goto L_0x0222
            android.util.SparseIntArray r0 = r6.shortPollChannels
            long r1 = java.lang.System.currentTimeMillis()
            r3 = 1000(0x3e8, double:4.94E-321)
            long r1 = r1 / r3
            int r2 = (int) r1
            int r1 = r7.timeout
            int r2 = r2 + r1
            r0.put(r8, r2)
        L_0x0222:
            boolean r0 = r7.isFinal
            if (r0 != 0) goto L_0x0229
            r6.getChannelDifference(r8)
        L_0x0229:
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x024b
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "received channel difference with pts = "
            r0.append(r1)
            int r1 = r7.pts
            r0.append(r1)
            java.lang.String r1 = " channelId = "
            r0.append(r1)
            r0.append(r8)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x024b:
            r0 = 0
            int r2 = (r10 > r0 ? 1 : (r10 == r0 ? 0 : -1))
            if (r2 == 0) goto L_0x0258
            im.bclpbkiauv.messenger.MessagesStorage r0 = r21.getMessagesStorage()
            r0.removePendingTask(r10)
        L_0x0258:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.lambda$null$227$MessagesController(im.bclpbkiauv.tgnet.TLRPC$updates_ChannelDifference, int, im.bclpbkiauv.tgnet.TLRPC$Chat, android.util.SparseArray, int, long):void");
    }

    public /* synthetic */ void lambda$null$224$MessagesController(LongSparseArray messages) {
        for (int a = 0; a < messages.size(); a++) {
            updateInterfaceWithMessages(messages.keyAt(a), (ArrayList) messages.valueAt(a), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$null$226$MessagesController(ArrayList pushMessages, TLRPC.updates_ChannelDifference res) {
        if (!pushMessages.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable(pushMessages) {
                private final /* synthetic */ ArrayList f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$225$MessagesController(this.f$1);
                }
            });
        }
        getMessagesStorage().putMessages(res.new_messages, true, true, false, getDownloadController().getAutodownloadMask(), false);
    }

    public /* synthetic */ void lambda$null$225$MessagesController(ArrayList pushMessages) {
        getNotificationsController().processNewMessages(pushMessages, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$null$229$MessagesController(TLRPC.TL_error error, int channelId) {
        checkChannelError(error.text, channelId);
    }

    /* JADX WARNING: Removed duplicated region for block: B:17:0x0038  */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x006d  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void checkChannelError(java.lang.String r8, int r9) {
        /*
            r7 = this;
            int r0 = r8.hashCode()
            r1 = -1809401834(0xffffffff9426b816, float:-8.417163E-27)
            r2 = 0
            r3 = 2
            r4 = 1
            if (r0 == r1) goto L_0x002b
            r1 = -795226617(0xffffffffd099ce07, float:-2.064333E10)
            if (r0 == r1) goto L_0x0021
            r1 = -471086771(0xffffffffe3ebc94d, float:-8.69898E21)
            if (r0 == r1) goto L_0x0017
        L_0x0016:
            goto L_0x0035
        L_0x0017:
            java.lang.String r0 = "CHANNEL_PUBLIC_GROUP_NA"
            boolean r0 = r8.equals(r0)
            if (r0 == 0) goto L_0x0016
            r0 = 1
            goto L_0x0036
        L_0x0021:
            java.lang.String r0 = "CHANNEL_PRIVATE"
            boolean r0 = r8.equals(r0)
            if (r0 == 0) goto L_0x0016
            r0 = 0
            goto L_0x0036
        L_0x002b:
            java.lang.String r0 = "USER_BANNED_IN_CHANNEL"
            boolean r0 = r8.equals(r0)
            if (r0 == 0) goto L_0x0016
            r0 = 2
            goto L_0x0036
        L_0x0035:
            r0 = -1
        L_0x0036:
            if (r0 == 0) goto L_0x006d
            if (r0 == r4) goto L_0x0055
            if (r0 == r3) goto L_0x003d
            goto L_0x0085
        L_0x003d:
            im.bclpbkiauv.messenger.NotificationCenter r0 = r7.getNotificationCenter()
            int r1 = im.bclpbkiauv.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r5 = new java.lang.Object[r3]
            java.lang.Integer r6 = java.lang.Integer.valueOf(r9)
            r5[r2] = r6
            java.lang.Integer r2 = java.lang.Integer.valueOf(r3)
            r5[r4] = r2
            r0.postNotificationName(r1, r5)
            goto L_0x0085
        L_0x0055:
            im.bclpbkiauv.messenger.NotificationCenter r0 = r7.getNotificationCenter()
            int r1 = im.bclpbkiauv.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.Integer r5 = java.lang.Integer.valueOf(r9)
            r3[r2] = r5
            java.lang.Integer r2 = java.lang.Integer.valueOf(r4)
            r3[r4] = r2
            r0.postNotificationName(r1, r3)
            goto L_0x0085
        L_0x006d:
            im.bclpbkiauv.messenger.NotificationCenter r0 = r7.getNotificationCenter()
            int r1 = im.bclpbkiauv.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.Integer r5 = java.lang.Integer.valueOf(r9)
            r3[r2] = r5
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r3[r4] = r2
            r0.postNotificationName(r1, r3)
        L_0x0085:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.checkChannelError(java.lang.String, int):void");
    }

    public void getDifference() {
        getDifference(getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue(), false);
    }

    public void getDifference(int pts, int date, int qts, boolean slice) {
        registerForPush(SharedConfig.pushString);
        if (getMessagesStorage().getLastPtsValue() == 0) {
            loadCurrentState();
        } else if (slice || !this.gettingDifference) {
            this.gettingDifference = true;
            TLRPC.TL_updates_getDifference req = new TLRPC.TL_updates_getDifference();
            req.pts = pts;
            req.date = date;
            req.qts = qts;
            if (this.getDifferenceFirstSync) {
                req.flags |= 1;
                if (ApplicationLoader.isConnectedOrConnectingToWiFi()) {
                    req.pts_total_limit = 5000;
                } else {
                    req.pts_total_limit = 1000;
                }
                this.getDifferenceFirstSync = false;
            }
            if (req.date == 0) {
                req.date = getConnectionsManager().getCurrentTime();
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("getDiff start ===> act=" + this.currentAccount + " ,date=" + date + " ,pts=" + pts + " ,qts=" + qts);
            }
            getConnectionsManager().setIsUpdating(true);
            int sendRequest = getConnectionsManager().sendRequest(req, new RequestDelegate(date, qts) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$getDifference$239$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getDifference$239$MessagesController(int date, int qts, TLObject response, TLRPC.TL_error error) {
        int i = date;
        if (error == null) {
            TLRPC.updates_Difference res = (TLRPC.updates_Difference) response;
            if (BuildVars.DEBUG_VERSION) {
                FileLog.d("getDiff success ===> act=" + this.currentAccount + " ,date=" + i + " ,res=" + res.toString());
            }
            if (res instanceof TLRPC.TL_updates_differenceTooLong) {
                AndroidUtilities.runOnUIThread(new Runnable(res, i, qts) {
                    private final /* synthetic */ TLRPC.updates_Difference f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ int f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$231$MessagesController(this.f$1, this.f$2, this.f$3);
                    }
                });
                return;
            }
            int i2 = qts;
            if (res instanceof TLRPC.TL_updates_differenceSlice) {
                getDifference(res.intermediate_state.pts, res.intermediate_state.date, res.intermediate_state.qts, true);
            }
            SparseArray<TLRPC.User> usersDict = new SparseArray<>();
            SparseArray<TLRPC.Chat> chatsDict = new SparseArray<>();
            for (int a = 0; a < res.users.size(); a++) {
                TLRPC.User user = res.users.get(a);
                usersDict.put(user.id, user);
            }
            for (int a2 = 0; a2 < res.chats.size(); a2++) {
                TLRPC.Chat chat = res.chats.get(a2);
                chatsDict.put(chat.id, chat);
            }
            ArrayList<TLRPC.TL_updateMessageID> msgUpdates = new ArrayList<>();
            if (!res.other_updates.isEmpty()) {
                int a3 = 0;
                while (a3 < res.other_updates.size()) {
                    TLRPC.Update upd = res.other_updates.get(a3);
                    if (upd instanceof TLRPC.TL_updateMessageID) {
                        msgUpdates.add((TLRPC.TL_updateMessageID) upd);
                        res.other_updates.remove(a3);
                        a3--;
                    } else if (getUpdateType(upd) == 2) {
                        int channelId = getUpdateChannelId(upd);
                        int channelPts = this.channelsPts.get(channelId);
                        if (channelPts == 0 && (channelPts = getMessagesStorage().getChannelPtsSync(channelId)) != 0) {
                            this.channelsPts.put(channelId, channelPts);
                        }
                        if (channelPts != 0 && getUpdatePts(upd) <= channelPts) {
                            res.other_updates.remove(a3);
                            a3--;
                        }
                    }
                    a3++;
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable(res) {
                private final /* synthetic */ TLRPC.updates_Difference f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$232$MessagesController(this.f$1);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(res, msgUpdates, usersDict, chatsDict) {
                private final /* synthetic */ TLRPC.updates_Difference f$1;
                private final /* synthetic */ ArrayList f$2;
                private final /* synthetic */ SparseArray f$3;
                private final /* synthetic */ SparseArray f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$238$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
            return;
        }
        int i3 = qts;
        this.gettingDifference = false;
        getConnectionsManager().setIsUpdating(false);
    }

    public /* synthetic */ void lambda$null$231$MessagesController(TLRPC.updates_Difference res, int date, int qts) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), res.pts, date, qts);
    }

    public /* synthetic */ void lambda$null$232$MessagesController(TLRPC.updates_Difference res) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        putUsers(res.users, false);
        putChats(res.chats, false);
    }

    public /* synthetic */ void lambda$null$238$MessagesController(TLRPC.updates_Difference res, ArrayList msgUpdates, SparseArray usersDict, SparseArray chatsDict) {
        TLRPC.updates_Difference updates_difference = res;
        getMessagesStorage().putUsersAndChats(updates_difference.users, updates_difference.chats, true, false);
        if (!msgUpdates.isEmpty()) {
            SparseArray<long[]> corrected = new SparseArray<>();
            for (int a = 0; a < msgUpdates.size(); a++) {
                TLRPC.TL_updateMessageID update = (TLRPC.TL_updateMessageID) msgUpdates.get(a);
                long[] ids = getMessagesStorage().updateMessageStateAndId(update.random_id, (Integer) null, update.id, 0, false, 0, -1);
                if (ids != null) {
                    corrected.put(update.id, ids);
                }
            }
            ArrayList arrayList = msgUpdates;
            if (corrected.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable(corrected) {
                    private final /* synthetic */ SparseArray f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$233$MessagesController(this.f$1);
                    }
                });
            }
        } else {
            ArrayList arrayList2 = msgUpdates;
        }
        Utilities.stageQueue.postRunnable(new Runnable(updates_difference, usersDict, chatsDict) {
            private final /* synthetic */ TLRPC.updates_Difference f$1;
            private final /* synthetic */ SparseArray f$2;
            private final /* synthetic */ SparseArray f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$237$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$233$MessagesController(SparseArray corrected) {
        for (int a = 0; a < corrected.size(); a++) {
            int newId = corrected.keyAt(a);
            long[] ids = (long[]) corrected.valueAt(a);
            int oldId = (int) ids[1];
            getSendMessagesHelper().processSentMessage(oldId);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(oldId), Integer.valueOf(newId), null, Long.valueOf(ids[0]), 0L, -1, false);
        }
    }

    public /* synthetic */ void lambda$null$237$MessagesController(TLRPC.updates_Difference res, SparseArray usersDict, SparseArray chatsDict) {
        TLRPC.updates_Difference updates_difference = res;
        if (!updates_difference.new_messages.isEmpty() || !updates_difference.new_encrypted_messages.isEmpty()) {
            LongSparseArray<ArrayList<MessageObject>> messages = new LongSparseArray<>();
            for (int b = 0; b < updates_difference.new_encrypted_messages.size(); b++) {
                ArrayList<TLRPC.Message> decryptedMessages = getSecretChatHelper().decryptMessage(updates_difference.new_encrypted_messages.get(b));
                if (decryptedMessages != null && !decryptedMessages.isEmpty()) {
                    updates_difference.new_messages.addAll(decryptedMessages);
                }
            }
            ImageLoader.saveMessagesThumbs(updates_difference.new_messages);
            ArrayList<MessageObject> pushMessages = new ArrayList<>();
            int clientUserId = getUserConfig().getClientUserId();
            for (int a = 0; a < updates_difference.new_messages.size(); a++) {
                TLRPC.Message message = updates_difference.new_messages.get(a);
                if (message.dialog_id == 0) {
                    if (message.to_id.chat_id != 0) {
                        message.dialog_id = (long) (-message.to_id.chat_id);
                    } else {
                        if (message.to_id.user_id == getUserConfig().getClientUserId()) {
                            message.to_id.user_id = message.from_id;
                        }
                        message.dialog_id = (long) message.to_id.user_id;
                    }
                }
                if (((int) message.dialog_id) != 0) {
                    if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
                        TLRPC.User user = (TLRPC.User) usersDict.get(message.action.user_id);
                        if (user != null && user.bot) {
                            message.reply_markup = new TLRPC.TL_replyKeyboardHide();
                            message.flags |= 64;
                        }
                    } else {
                        SparseArray sparseArray = usersDict;
                    }
                    if ((message.action instanceof TLRPC.TL_messageActionChatMigrateTo) || (message.action instanceof TLRPC.TL_messageActionChannelCreate)) {
                        message.unread = false;
                        message.media_unread = false;
                    } else {
                        ConcurrentHashMap<Long, Integer> read_max = message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                        Integer value = read_max.get(Long.valueOf(message.dialog_id));
                        if (value == null) {
                            value = Integer.valueOf(getMessagesStorage().getDialogReadMax(message.out, message.dialog_id));
                            read_max.put(Long.valueOf(message.dialog_id), value);
                        }
                        message.unread = value.intValue() < message.id;
                    }
                } else {
                    SparseArray sparseArray2 = usersDict;
                }
                if (message.dialog_id == ((long) clientUserId)) {
                    message.unread = false;
                    message.media_unread = false;
                    message.out = true;
                }
                MessageObject messageObject = new MessageObject(this.currentAccount, message, (SparseArray<TLRPC.User>) usersDict, (SparseArray<TLRPC.Chat>) chatsDict, this.createdDialogIds.contains(Long.valueOf(message.dialog_id)));
                if ((!messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread()) {
                    pushMessages.add(messageObject);
                }
                ArrayList<MessageObject> arr = messages.get(message.dialog_id);
                if (arr == null) {
                    arr = new ArrayList<>();
                    messages.put(message.dialog_id, arr);
                }
                arr.add(messageObject);
            }
            AndroidUtilities.runOnUIThread(new Runnable(messages) {
                private final /* synthetic */ LongSparseArray f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$234$MessagesController(this.f$1);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(pushMessages, updates_difference) {
                private final /* synthetic */ ArrayList f$1;
                private final /* synthetic */ TLRPC.updates_Difference f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$236$MessagesController(this.f$1, this.f$2);
                }
            });
            getSecretChatHelper().processPendingEncMessages();
        }
        if (!updates_difference.other_updates.isEmpty()) {
            processUpdateArray(updates_difference.other_updates, updates_difference.users, updates_difference.chats, true, 0);
        }
        if (updates_difference instanceof TLRPC.TL_updates_difference) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(updates_difference.state.seq);
            getMessagesStorage().setLastDateValue(updates_difference.state.date);
            getMessagesStorage().setLastPtsValue(updates_difference.state.pts);
            getMessagesStorage().setLastQtsValue(updates_difference.state.qts);
            getConnectionsManager().setIsUpdating(false);
            for (int a2 = 0; a2 < 3; a2++) {
                processUpdatesQueue(a2, 1);
            }
        } else if (updates_difference instanceof TLRPC.TL_updates_differenceSlice) {
            getMessagesStorage().setLastDateValue(updates_difference.intermediate_state.date);
            getMessagesStorage().setLastPtsValue(updates_difference.intermediate_state.pts);
            getMessagesStorage().setLastQtsValue(updates_difference.intermediate_state.qts);
        } else if (updates_difference instanceof TLRPC.TL_updates_differenceEmpty) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(updates_difference.seq);
            getMessagesStorage().setLastDateValue(updates_difference.date);
            getConnectionsManager().setIsUpdating(false);
            for (int a3 = 0; a3 < 3; a3++) {
                processUpdatesQueue(a3, 1);
            }
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("getDiff save last diff value ===> act=" + this.currentAccount + " ,date=" + getMessagesStorage().getLastDateValue() + " ,pts=" + getMessagesStorage().getLastPtsValue() + " ,seq=" + getMessagesStorage().getLastSeqValue() + " ,qts=" + getMessagesStorage().getLastQtsValue());
        }
    }

    public /* synthetic */ void lambda$null$234$MessagesController(LongSparseArray messages) {
        for (int a = 0; a < messages.size(); a++) {
            updateInterfaceWithMessages(messages.keyAt(a), (ArrayList) messages.valueAt(a), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$null$236$MessagesController(ArrayList pushMessages, TLRPC.updates_Difference res) {
        if (!pushMessages.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable(pushMessages, res) {
                private final /* synthetic */ ArrayList f$1;
                private final /* synthetic */ TLRPC.updates_Difference f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$235$MessagesController(this.f$1, this.f$2);
                }
            });
        }
        getMessagesStorage().putMessages(res.new_messages, true, true, false, getDownloadController().getAutodownloadMask(), false);
    }

    public /* synthetic */ void lambda$null$235$MessagesController(ArrayList pushMessages, TLRPC.updates_Difference res) {
        getNotificationsController().processNewMessages(pushMessages, !(res instanceof TLRPC.TL_updates_differenceSlice), false, (CountDownLatch) null);
    }

    public void markDialogAsUnread(long did, TLRPC.InputPeer peer, long taskId) {
        long newTaskId;
        TLRPC.Dialog dialog = this.dialogs_dict.get(did);
        if (dialog != null) {
            dialog.unread_mark = true;
            if (dialog.unread_count == 0) {
                this.dialogsUnreadOnly.add(dialog);
                if (!isDialogMuted(did)) {
                    this.unreadUnmutedDialogs++;
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
            getMessagesStorage().setDialogUnread(did, true);
        }
        int lower_id = (int) did;
        if (lower_id != 0) {
            TLRPC.TL_messages_markDialogUnread req = new TLRPC.TL_messages_markDialogUnread();
            req.unread = true;
            if (peer == null) {
                peer = getInputPeer(lower_id);
            }
            if (!(peer instanceof TLRPC.TL_inputPeerEmpty)) {
                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                inputDialogPeer.peer = peer;
                req.peer = inputDialogPeer;
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(peer.getObjectSize() + 12);
                        data.writeInt32(9);
                        data.writeInt64(did);
                        peer.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(newTaskId) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$markDialogAsUnread$240$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$markDialogAsUnread$240$MessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void loadUnreadDialogs() {
        if (!this.loadingUnreadDialogs && !getUserConfig().unreadDialogsLoaded) {
            this.loadingUnreadDialogs = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_messages_getDialogUnreadMarks(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadUnreadDialogs$242$MessagesController(tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadUnreadDialogs$242$MessagesController(TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(response) {
            private final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$241$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$241$MessagesController(TLObject response) {
        long did;
        if (response != null) {
            TLRPC.Vector vector = (TLRPC.Vector) response;
            int size = vector.objects.size();
            for (int a = 0; a < size; a++) {
                TLRPC.DialogPeer peer = (TLRPC.DialogPeer) vector.objects.get(a);
                if (peer instanceof TLRPC.TL_dialogPeer) {
                    TLRPC.TL_dialogPeer dialogPeer = (TLRPC.TL_dialogPeer) peer;
                    if (dialogPeer.peer.user_id == 0) {
                        did = 0;
                    } else if (dialogPeer.peer.user_id != 0) {
                        did = (long) dialogPeer.peer.user_id;
                    } else if (dialogPeer.peer.chat_id != 0) {
                        did = (long) (-dialogPeer.peer.chat_id);
                    } else {
                        did = (long) (-dialogPeer.peer.channel_id);
                    }
                    getMessagesStorage().setDialogUnread(did, true);
                    TLRPC.Dialog dialog = this.dialogs_dict.get(did);
                    if (dialog != null && !dialog.unread_mark) {
                        dialog.unread_mark = true;
                        if (dialog.unread_count == 0) {
                            this.dialogsUnreadOnly.add(dialog);
                            if (!isDialogMuted(did)) {
                                this.unreadUnmutedDialogs++;
                            }
                        }
                    }
                }
            }
            getUserConfig().unreadDialogsLoaded = true;
            getUserConfig().saveConfig(false);
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
            this.loadingUnreadDialogs = false;
        }
    }

    public void reorderPinnedDialogs(int folderId, ArrayList<TLRPC.InputDialogPeer> order, long taskId) {
        long newTaskId;
        TLRPC.TL_messages_reorderPinnedDialogs req = new TLRPC.TL_messages_reorderPinnedDialogs();
        req.folder_id = folderId;
        req.force = true;
        if (taskId == 0) {
            ArrayList<TLRPC.Dialog> dialogs = getDialogs(folderId);
            if (!dialogs.isEmpty()) {
                int size = 0;
                int N = dialogs.size();
                for (int a = 0; a < N; a++) {
                    TLRPC.Dialog dialog = dialogs.get(a);
                    if (!(dialog instanceof TLRPC.TL_dialogFolder)) {
                        if (!dialog.pinned) {
                            break;
                        }
                        getMessagesStorage().setDialogPinned(dialog.id, dialog.pinnedNum);
                        if (((int) dialog.id) != 0) {
                            TLRPC.InputPeer inputPeer = getInputPeer((int) dialogs.get(a).id);
                            TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                            inputDialogPeer.peer = inputPeer;
                            req.order.add(inputDialogPeer);
                            size += inputDialogPeer.getObjectSize();
                        }
                    }
                }
                NativeByteBuffer data = null;
                try {
                    data = new NativeByteBuffer(size + 12);
                    data.writeInt32(16);
                    data.writeInt32(folderId);
                    data.writeInt32(req.order.size());
                    int N2 = req.order.size();
                    for (int a2 = 0; a2 < N2; a2++) {
                        req.order.get(a2).serializeToStream(data);
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
                newTaskId = getMessagesStorage().createPendingTask(data);
            } else {
                return;
            }
        } else {
            req.order = order;
            newTaskId = taskId;
        }
        getConnectionsManager().sendRequest(req, new RequestDelegate(newTaskId) {
            private final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                MessagesController.this.lambda$reorderPinnedDialogs$243$MessagesController(this.f$1, tLObject, tL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reorderPinnedDialogs$243$MessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public boolean pinDialog(long did, boolean pin, TLRPC.InputPeer peer, long taskId) {
        TLRPC.InputPeer peer2;
        long newTaskId;
        long j = did;
        boolean z = pin;
        int lower_id = (int) j;
        TLRPC.Dialog dialog = this.dialogs_dict.get(j);
        if (dialog != null && dialog.pinned != z) {
            int folderId = dialog.folder_id;
            ArrayList<TLRPC.Dialog> dialogs = getDialogs(folderId);
            dialog.pinned = z;
            if (z) {
                int maxPinnedNum = 0;
                for (int a = 0; a < dialogs.size(); a++) {
                    TLRPC.Dialog d = dialogs.get(a);
                    if (!(d instanceof TLRPC.TL_dialogFolder)) {
                        if (!d.pinned) {
                            break;
                        }
                        maxPinnedNum = Math.max(d.pinnedNum, maxPinnedNum);
                    }
                }
                dialog.pinnedNum = maxPinnedNum + 1;
            } else {
                dialog.pinnedNum = 0;
            }
            sortDialogs((SparseArray<TLRPC.Chat>) null);
            if (!z && dialogs.get(dialogs.size() - 1) == dialog && !this.dialogsEndReached.get(folderId)) {
                dialogs.remove(dialogs.size() - 1);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (lower_id == 0 || taskId == -1) {
            } else {
                TLRPC.TL_messages_toggleDialogPin req = new TLRPC.TL_messages_toggleDialogPin();
                req.pinned = z;
                if (peer == null) {
                    peer2 = getInputPeer(lower_id);
                } else {
                    peer2 = peer;
                }
                if (peer2 instanceof TLRPC.TL_inputPeerEmpty) {
                    return false;
                }
                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                inputDialogPeer.peer = peer2;
                req.peer = inputDialogPeer;
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(peer2.getObjectSize() + 16);
                        data.writeInt32(4);
                        data.writeInt64(j);
                        data.writeBool(z);
                        peer2.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new RequestDelegate(newTaskId) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$pinDialog$244$MessagesController(this.f$1, tLObject, tL_error);
                    }
                });
            }
            getMessagesStorage().setDialogPinned(j, dialog.pinnedNum);
            return true;
        } else if (dialog != null) {
            return true;
        } else {
            return false;
        }
    }

    public /* synthetic */ void lambda$pinDialog$244$MessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void loadPinnedDialogs(int folderId, long newDialogId, ArrayList<Long> arrayList) {
        if (this.loadingPinnedDialogs.indexOfKey(folderId) < 0 && !getUserConfig().isPinnedDialogsLoaded(folderId)) {
            this.loadingPinnedDialogs.put(folderId, 1);
            TLRPC.TL_messages_getPinnedDialogs req = new TLRPC.TL_messages_getPinnedDialogs();
            req.folder_id = folderId;
            getConnectionsManager().sendRequest(req, new RequestDelegate(folderId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$loadPinnedDialogs$247$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadPinnedDialogs$247$MessagesController(int folderId, TLObject response, TLRPC.TL_error error) {
        int N;
        MessageObject mess;
        TLRPC.Chat chat;
        TLRPC.Chat chat2;
        MessagesController messagesController = this;
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            ArrayList<TLRPC.Dialog> newPinnedDialogs = new ArrayList<>(res.dialogs);
            messagesController.fetchFolderInLoadedPinnedDialogs(res);
            TLRPC.TL_messages_dialogs toCache = new TLRPC.TL_messages_dialogs();
            toCache.users.addAll(res.users);
            toCache.chats.addAll(res.chats);
            toCache.dialogs.addAll(res.dialogs);
            toCache.messages.addAll(res.messages);
            LongSparseArray<MessageObject> new_dialogMessage = new LongSparseArray<>();
            SparseArray<TLRPC.User> usersDict = new SparseArray<>();
            SparseArray<TLRPC.Chat> chatsDict = new SparseArray<>();
            for (int a = 0; a < res.users.size(); a++) {
                TLRPC.User u = res.users.get(a);
                usersDict.put(u.id, u);
            }
            for (int a2 = 0; a2 < res.chats.size(); a2++) {
                TLRPC.Chat c = res.chats.get(a2);
                chatsDict.put(c.id, c);
            }
            for (int a3 = 0; a3 < res.messages.size(); a3++) {
                TLRPC.Message message = res.messages.get(a3);
                if (message.to_id.channel_id != 0) {
                    TLRPC.Chat chat3 = chatsDict.get(message.to_id.channel_id);
                    if (chat3 != null && chat3.left) {
                    }
                } else if (!(message.to_id.chat_id == 0 || (chat2 = chatsDict.get(message.to_id.chat_id)) == null || chat2.migrated_to == null)) {
                }
                MessageObject messageObject = new MessageObject(messagesController.currentAccount, message, usersDict, chatsDict, false);
                new_dialogMessage.put(messageObject.getDialogId(), messageObject);
            }
            int i = 0;
            boolean z = true;
            boolean firstIsFolder = newPinnedDialogs.isEmpty() == 0 && (newPinnedDialogs.get(0) instanceof TLRPC.TL_dialogFolder);
            int a4 = 0;
            int N2 = newPinnedDialogs.size();
            while (a4 < N2) {
                TLRPC.Dialog d = newPinnedDialogs.get(a4);
                d.pinned = z;
                DialogObject.initDialog(d);
                if (DialogObject.isChannel(d)) {
                    TLRPC.Chat chat4 = chatsDict.get(-((int) d.id));
                    if (chat4 != null && chat4.left) {
                        N = N2;
                        a4++;
                        N2 = N;
                        i = 0;
                        z = true;
                    }
                } else if (!(((int) d.id) >= 0 || (chat = chatsDict.get(-((int) d.id))) == null || chat.migrated_to == null)) {
                    N = N2;
                    a4++;
                    N2 = N;
                    i = 0;
                    z = true;
                }
                if (d.last_message_date == 0 && (mess = new_dialogMessage.get(d.id)) != null) {
                    d.last_message_date = mess.messageOwner.date;
                }
                N = N2;
                Integer value = messagesController.dialogs_read_inbox_max.get(Long.valueOf(d.id));
                if (value == null) {
                    value = Integer.valueOf(i);
                }
                messagesController.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
                messagesController = this;
                Integer value2 = messagesController.dialogs_read_outbox_max.get(Long.valueOf(d.id));
                if (value2 == null) {
                    value2 = Integer.valueOf(i);
                }
                messagesController.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
                a4++;
                N2 = N;
                i = 0;
                z = true;
            }
            DispatchQueue storageQueue = getMessagesStorage().getStorageQueue();
            $$Lambda$MessagesController$iA7iWjhjgmImr0Bo6TpZEit3SJU r8 = r0;
            $$Lambda$MessagesController$iA7iWjhjgmImr0Bo6TpZEit3SJU r0 = new Runnable(folderId, newPinnedDialogs, firstIsFolder, res, new_dialogMessage, toCache) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ ArrayList f$2;
                private final /* synthetic */ boolean f$3;
                private final /* synthetic */ TLRPC.TL_messages_peerDialogs f$4;
                private final /* synthetic */ LongSparseArray f$5;
                private final /* synthetic */ TLRPC.TL_messages_dialogs f$6;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                }

                public final void run() {
                    MessagesController.this.lambda$null$246$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                }
            };
            storageQueue.postRunnable(r8);
        }
    }

    public /* synthetic */ void lambda$null$246$MessagesController(int folderId, ArrayList newPinnedDialogs, boolean firstIsFolder, TLRPC.TL_messages_peerDialogs res, LongSparseArray new_dialogMessage, TLRPC.TL_messages_dialogs toCache) {
        AndroidUtilities.runOnUIThread(new Runnable(folderId, newPinnedDialogs, firstIsFolder, res, new_dialogMessage, toCache) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ ArrayList f$2;
            private final /* synthetic */ boolean f$3;
            private final /* synthetic */ TLRPC.TL_messages_peerDialogs f$4;
            private final /* synthetic */ LongSparseArray f$5;
            private final /* synthetic */ TLRPC.TL_messages_dialogs f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$245$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$245$MessagesController(int folderId, ArrayList newPinnedDialogs, boolean firstIsFolder, TLRPC.TL_messages_peerDialogs res, LongSparseArray new_dialogMessage, TLRPC.TL_messages_dialogs toCache) {
        int i = folderId;
        ArrayList arrayList = newPinnedDialogs;
        TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = res;
        this.loadingPinnedDialogs.delete(i);
        applyDialogsNotificationsSettings(arrayList);
        boolean changed = false;
        boolean added = false;
        int maxPinnedNum = 0;
        ArrayList<TLRPC.Dialog> dialogs = getDialogs(folderId);
        int pinnedNum = firstIsFolder;
        for (int a = 0; a < dialogs.size(); a++) {
            TLRPC.Dialog dialog = dialogs.get(a);
            if (!(dialog instanceof TLRPC.TL_dialogFolder)) {
                if (((int) dialog.id) == 0) {
                    if (pinnedNum < newPinnedDialogs.size()) {
                        arrayList.add(pinnedNum, dialog);
                    } else {
                        arrayList.add(dialog);
                    }
                    pinnedNum++;
                } else if (!dialog.pinned) {
                    break;
                } else {
                    maxPinnedNum = Math.max(dialog.pinnedNum, maxPinnedNum);
                    dialog.pinned = false;
                    dialog.pinnedNum = 0;
                    changed = true;
                    pinnedNum++;
                }
            }
        }
        ArrayList<Long> pinnedDialogs = new ArrayList<>();
        if (!newPinnedDialogs.isEmpty()) {
            putUsers(tL_messages_peerDialogs.users, false);
            putChats(tL_messages_peerDialogs.chats, false);
            int a2 = 0;
            int N = newPinnedDialogs.size();
            while (a2 < N) {
                TLRPC.Dialog dialog2 = (TLRPC.Dialog) arrayList.get(a2);
                dialog2.pinnedNum = (N - a2) + maxPinnedNum;
                pinnedDialogs.add(Long.valueOf(dialog2.id));
                TLRPC.Dialog d = this.dialogs_dict.get(dialog2.id);
                if (d != null) {
                    d.pinned = true;
                    d.pinnedNum = dialog2.pinnedNum;
                    getMessagesStorage().setDialogPinned(dialog2.id, dialog2.pinnedNum);
                    TLRPC.Dialog dialog3 = d;
                    boolean z = changed;
                } else {
                    added = true;
                    this.dialogs_dict.put(dialog2.id, dialog2);
                    MessageObject messageObject = (MessageObject) new_dialogMessage.get(dialog2.id);
                    TLRPC.Dialog dialog4 = d;
                    this.dialogMessage.put(dialog2.id, messageObject);
                    if (messageObject == null || messageObject.messageOwner.to_id.channel_id != 0) {
                    } else {
                        this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                        if (messageObject.messageOwner.random_id != 0) {
                            boolean z2 = changed;
                            this.dialogMessagesByRandomIds.put(messageObject.messageOwner.random_id, messageObject);
                        }
                    }
                }
                changed = true;
                a2++;
                arrayList = newPinnedDialogs;
                TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs2 = res;
            }
            boolean z3 = changed;
        }
        if (changed) {
            if (added) {
                this.allDialogs.clear();
                int size = this.dialogs_dict.size();
                for (int a3 = 0; a3 < size; a3++) {
                    this.allDialogs.add(this.dialogs_dict.valueAt(a3));
                }
            }
            sortDialogs((SparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getMessagesStorage().unpinAllDialogsExceptNew(pinnedDialogs, i);
        getMessagesStorage().putDialogs(toCache, 1);
        getUserConfig().setPinnedDialogsLoaded(i, true);
        getUserConfig().saveConfig(false);
    }

    public void generateJoinMessage(int chat_id, boolean ignoreLeft) {
        TLRPC.Chat chat = getChat(Integer.valueOf(chat_id));
        if (chat != null && ChatObject.isChannel(chat_id, this.currentAccount)) {
            if ((!chat.left && !chat.kicked) || ignoreLeft) {
                TLRPC.TL_messageService message = new TLRPC.TL_messageService();
                message.flags = 256;
                int newMessageId = getUserConfig().getNewMessageId();
                message.id = newMessageId;
                message.local_id = newMessageId;
                message.date = getConnectionsManager().getCurrentTime();
                message.from_id = getUserConfig().getClientUserId();
                message.to_id = new TLRPC.TL_peerChannel();
                message.to_id.channel_id = chat_id;
                message.dialog_id = (long) (-chat_id);
                message.post = true;
                message.action = new TLRPC.TL_messageActionChatAddUser();
                message.action.users.add(Integer.valueOf(getUserConfig().getClientUserId()));
                if (chat.megagroup) {
                    message.flags |= Integer.MIN_VALUE;
                }
                getUserConfig().saveConfig(false);
                ArrayList<MessageObject> pushMessages = new ArrayList<>();
                ArrayList<TLRPC.Message> messagesArr = new ArrayList<>();
                messagesArr.add(message);
                pushMessages.add(new MessageObject(this.currentAccount, message, true));
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable(pushMessages) {
                    private final /* synthetic */ ArrayList f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$generateJoinMessage$249$MessagesController(this.f$1);
                    }
                });
                getMessagesStorage().putMessages(messagesArr, true, true, false, 0, false);
                AndroidUtilities.runOnUIThread(new Runnable(chat_id, pushMessages) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ ArrayList f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesController.this.lambda$generateJoinMessage$250$MessagesController(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$generateJoinMessage$249$MessagesController(ArrayList pushMessages) {
        AndroidUtilities.runOnUIThread(new Runnable(pushMessages) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$248$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$248$MessagesController(ArrayList pushMessages) {
        getNotificationsController().processNewMessages(pushMessages, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$generateJoinMessage$250$MessagesController(int chat_id, ArrayList pushMessages) {
        updateInterfaceWithMessages((long) (-chat_id), pushMessages, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: protected */
    public void deleteMessagesByPush(long dialogId, ArrayList<Integer> ids, int channelId) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable(ids, channelId, dialogId) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$252$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesByPush$252$MessagesController(ArrayList ids, int channelId, long dialogId) {
        AndroidUtilities.runOnUIThread(new Runnable(ids, channelId) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$251$MessagesController(this.f$1, this.f$2);
            }
        });
        getMessagesStorage().deletePushMessages(dialogId, ids);
        getMessagesStorage().updateDialogsWithDeletedMessages(ids, getMessagesStorage().markMessagesAsDeleted(ids, false, channelId, true, false), false, channelId);
    }

    public /* synthetic */ void lambda$null$251$MessagesController(ArrayList ids, int channelId) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, ids, Integer.valueOf(channelId), false);
        if (channelId == 0) {
            int size2 = ids.size();
            for (int b = 0; b < size2; b++) {
                MessageObject obj = this.dialogMessagesByIds.get(((Integer) ids.get(b)).intValue());
                if (obj != null) {
                    obj.deleted = true;
                }
            }
            return;
        }
        MessageObject obj2 = this.dialogMessage.get((long) (-channelId));
        if (obj2 != null) {
            int size22 = ids.size();
            for (int b2 = 0; b2 < size22; b2++) {
                if (obj2.getId() == ((Integer) ids.get(b2)).intValue()) {
                    obj2.deleted = true;
                    return;
                }
            }
        }
    }

    public void checkChannelInviter(int chat_id) {
        AndroidUtilities.runOnUIThread(new Runnable(chat_id) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$checkChannelInviter$258$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$checkChannelInviter$258$MessagesController(int chat_id) {
        TLRPC.Chat chat = getChat(Integer.valueOf(chat_id));
        if (chat != null && ChatObject.isChannel(chat_id, this.currentAccount) && !chat.creator) {
            TLRPC.TL_channels_getParticipant req = new TLRPC.TL_channels_getParticipant();
            req.channel = getInputChannel(chat_id);
            req.user_id = new TLRPC.TL_inputUserSelf();
            getConnectionsManager().sendRequest(req, new RequestDelegate(chat, chat_id) {
                private final /* synthetic */ TLRPC.Chat f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$null$257$MessagesController(this.f$1, this.f$2, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$257$MessagesController(TLRPC.Chat chat, int chat_id, TLObject response, TLRPC.TL_error error) {
        TLRPC.Chat chat2 = chat;
        int i = chat_id;
        TLRPC.TL_channels_channelParticipant res = (TLRPC.TL_channels_channelParticipant) response;
        if (res != null && (res.participant instanceof TLRPC.TL_channelParticipantSelf) && res.participant.inviter_id != getUserConfig().getClientUserId()) {
            if (!chat2.megagroup || !getMessagesStorage().isMigratedChat(chat2.id)) {
                AndroidUtilities.runOnUIThread(new Runnable(res) {
                    private final /* synthetic */ TLRPC.TL_channels_channelParticipant f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$253$MessagesController(this.f$1);
                    }
                });
                getMessagesStorage().putUsersAndChats(res.users, (ArrayList<TLRPC.Chat>) null, true, true);
                TLRPC.TL_messageService message = new TLRPC.TL_messageService();
                message.media_unread = true;
                message.unread = true;
                message.flags = 256;
                message.post = true;
                if (chat2.megagroup) {
                    message.flags |= Integer.MIN_VALUE;
                }
                int newMessageId = getUserConfig().getNewMessageId();
                message.id = newMessageId;
                message.local_id = newMessageId;
                message.date = res.participant.date;
                message.action = new TLRPC.TL_messageActionChatAddUser();
                message.from_id = res.participant.inviter_id;
                message.action.users.add(Integer.valueOf(getUserConfig().getClientUserId()));
                message.to_id = new TLRPC.TL_peerChannel();
                message.to_id.channel_id = i;
                message.dialog_id = (long) (-i);
                getUserConfig().saveConfig(false);
                ArrayList<MessageObject> pushMessages = new ArrayList<>();
                ArrayList<TLRPC.Message> messagesArr = new ArrayList<>();
                ConcurrentHashMap<Integer, TLRPC.User> usersDict = new ConcurrentHashMap<>();
                for (int a = 0; a < res.users.size(); a++) {
                    TLRPC.User user = res.users.get(a);
                    usersDict.put(Integer.valueOf(user.id), user);
                }
                messagesArr.add(message);
                pushMessages.add(new MessageObject(this.currentAccount, (TLRPC.Message) message, (AbstractMap<Integer, TLRPC.User>) usersDict, true));
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable(pushMessages) {
                    private final /* synthetic */ ArrayList f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$255$MessagesController(this.f$1);
                    }
                });
                getMessagesStorage().putMessages(messagesArr, true, true, false, 0, false);
                AndroidUtilities.runOnUIThread(new Runnable(i, pushMessages) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ ArrayList f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$256$MessagesController(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$null$253$MessagesController(TLRPC.TL_channels_channelParticipant res) {
        putUsers(res.users, false);
    }

    public /* synthetic */ void lambda$null$254$MessagesController(ArrayList pushMessages) {
        getNotificationsController().processNewMessages(pushMessages, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$null$255$MessagesController(ArrayList pushMessages) {
        AndroidUtilities.runOnUIThread(new Runnable(pushMessages) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$254$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$256$MessagesController(int chat_id, ArrayList pushMessages) {
        updateInterfaceWithMessages((long) (-chat_id), pushMessages, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private int getUpdateType(TLRPC.Update update) {
        if ((update instanceof TLRPC.TL_updateNewMessage) || (update instanceof TLRPC.TL_updateReadMessagesContents) || (update instanceof TLRPC.TL_updateReadHistoryInbox) || (update instanceof TLRPC.TL_updateReadHistoryOutbox) || (update instanceof TLRPC.TL_updateDeleteMessages) || (update instanceof TLRPC.TL_updateWebPage) || (update instanceof TLRPC.TL_updateEditMessage) || (update instanceof TLRPC.TL_updateFolderPeers)) {
            return 0;
        }
        if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
            return 1;
        }
        if ((update instanceof TLRPC.TL_updateNewChannelMessage) || (update instanceof TLRPC.TL_updateDeleteChannelMessages) || (update instanceof TLRPC.TL_updateEditChannelMessage) || (update instanceof TLRPC.TL_updateChannelWebPage)) {
            return 2;
        }
        return 3;
    }

    private static int getUpdatePts(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateDeleteMessages) {
            return ((TLRPC.TL_updateDeleteMessages) update).pts;
        }
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryOutbox) {
            return ((TLRPC.TL_updateReadHistoryOutbox) update).pts;
        }
        if (update instanceof TLRPC.TL_updateNewMessage) {
            return ((TLRPC.TL_updateNewMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateEditMessage) {
            return ((TLRPC.TL_updateEditMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateWebPage) {
            return ((TLRPC.TL_updateWebPage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryInbox) {
            return ((TLRPC.TL_updateReadHistoryInbox) update).pts;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).pts;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadMessagesContents) {
            return ((TLRPC.TL_updateReadMessagesContents) update).pts;
        }
        if (update instanceof TLRPC.TL_updateChannelTooLong) {
            return ((TLRPC.TL_updateChannelTooLong) update).pts;
        }
        if (update instanceof TLRPC.TL_updateFolderPeers) {
            return ((TLRPC.TL_updateFolderPeers) update).pts;
        }
        return 0;
    }

    private static int getUpdatePtsCount(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateDeleteMessages) {
            return ((TLRPC.TL_updateDeleteMessages) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryOutbox) {
            return ((TLRPC.TL_updateReadHistoryOutbox) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateNewMessage) {
            return ((TLRPC.TL_updateNewMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateEditMessage) {
            return ((TLRPC.TL_updateEditMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateWebPage) {
            return ((TLRPC.TL_updateWebPage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryInbox) {
            return ((TLRPC.TL_updateReadHistoryInbox) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadMessagesContents) {
            return ((TLRPC.TL_updateReadMessagesContents) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateFolderPeers) {
            return ((TLRPC.TL_updateFolderPeers) update).pts_count;
        }
        return 0;
    }

    private static int getUpdateQts(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
            return ((TLRPC.TL_updateNewEncryptedMessage) update).qts;
        }
        return 0;
    }

    private static int getUpdateChannelId(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).message.to_id.channel_id;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).message.to_id.channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelOutbox) {
            return ((TLRPC.TL_updateReadChannelOutbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelMessageViews) {
            return ((TLRPC.TL_updateChannelMessageViews) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelTooLong) {
            return ((TLRPC.TL_updateChannelTooLong) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelPinnedMessage) {
            return ((TLRPC.TL_updateChannelPinnedMessage) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelReadMessagesContents) {
            return ((TLRPC.TL_updateChannelReadMessagesContents) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelAvailableMessages) {
            return ((TLRPC.TL_updateChannelAvailableMessages) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannel) {
            return ((TLRPC.TL_updateChannel) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelInbox) {
            return ((TLRPC.TL_updateReadChannelInbox) update).channel_id;
        }
        if (!BuildVars.LOGS_ENABLED) {
            return 0;
        }
        FileLog.e("trying to get unknown update channel_id for " + update);
        return 0;
    }

    /* JADX WARNING: Removed duplicated region for block: B:380:0x0894  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void processUpdates(im.bclpbkiauv.tgnet.TLRPC.Updates r34, boolean r35) {
        /*
            r33 = this;
            r6 = r33
            r7 = r34
            r8 = 0
            r9 = 0
            r10 = 0
            r11 = 0
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateShort
            if (r0 == 0) goto L_0x0024
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r13 = r0
            im.bclpbkiauv.tgnet.TLRPC$Update r0 = r7.update
            r13.add(r0)
            r2 = 0
            r3 = 0
            r4 = 0
            int r5 = r7.date
            r0 = r33
            r1 = r13
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            goto L_0x097d
        L_0x0024:
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateShortChatMessage
            java.lang.String r13 = "add to queue"
            r3 = 1
            if (r0 != 0) goto L_0x05d1
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateShortMessage
            if (r0 == 0) goto L_0x0034
            r0 = r10
            r23 = r11
            goto L_0x05d4
        L_0x0034:
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatesCombined
            if (r0 != 0) goto L_0x007c
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updates
            if (r0 == 0) goto L_0x003d
            goto L_0x007c
        L_0x003d:
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatesTooLong
            if (r0 == 0) goto L_0x0044
            r9 = 1
            goto L_0x097d
        L_0x0044:
            boolean r0 = r7 instanceof im.bclpbkiauv.messenger.MessagesController.UserActionUpdatesSeq
            if (r0 == 0) goto L_0x0053
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r7.seq
            r0.setLastSeqValue(r1)
            goto L_0x097d
        L_0x0053:
            boolean r0 = r7 instanceof im.bclpbkiauv.messenger.MessagesController.UserActionUpdatesPts
            if (r0 == 0) goto L_0x097d
            int r0 = r7.chat_id
            if (r0 == 0) goto L_0x0071
            android.util.SparseIntArray r0 = r6.channelsPts
            int r1 = r7.chat_id
            int r2 = r7.pts
            r0.put(r1, r2)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r7.chat_id
            int r2 = r7.pts
            r0.saveChannelPts(r1, r2)
            goto L_0x097d
        L_0x0071:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r7.pts
            r0.setLastPtsValue(r1)
            goto L_0x097d
        L_0x007c:
            r0 = 0
            r1 = 0
            r2 = r0
        L_0x007f:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r0 = r7.chats
            int r0 = r0.size()
            if (r1 >= r0) goto L_0x00cb
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r0 = r7.chats
            java.lang.Object r0 = r0.get(r1)
            im.bclpbkiauv.tgnet.TLRPC$Chat r0 = (im.bclpbkiauv.tgnet.TLRPC.Chat) r0
            boolean r4 = r0 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_channel
            if (r4 == 0) goto L_0x00c8
            boolean r4 = r0.min
            if (r4 == 0) goto L_0x00c8
            int r4 = r0.id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            im.bclpbkiauv.tgnet.TLRPC$Chat r4 = r6.getChat(r4)
            if (r4 == 0) goto L_0x00a7
            boolean r5 = r4.min
            if (r5 == 0) goto L_0x00b5
        L_0x00a7:
            im.bclpbkiauv.messenger.MessagesStorage r5 = r33.getMessagesStorage()
            int r12 = r7.chat_id
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r5.getChatSync(r12)
            r6.putChat(r5, r3)
            r4 = r5
        L_0x00b5:
            if (r4 == 0) goto L_0x00bb
            boolean r5 = r4.min
            if (r5 == 0) goto L_0x00c8
        L_0x00bb:
            if (r2 != 0) goto L_0x00c3
            android.util.SparseArray r5 = new android.util.SparseArray
            r5.<init>()
            r2 = r5
        L_0x00c3:
            int r5 = r0.id
            r2.put(r5, r0)
        L_0x00c8:
            int r1 = r1 + 1
            goto L_0x007f
        L_0x00cb:
            if (r2 == 0) goto L_0x0118
            r0 = 0
        L_0x00ce:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x0118
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$Update r1 = (im.bclpbkiauv.tgnet.TLRPC.Update) r1
            boolean r4 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewChannelMessage
            if (r4 == 0) goto L_0x0115
            r4 = r1
            im.bclpbkiauv.tgnet.TLRPC$TL_updateNewChannelMessage r4 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateNewChannelMessage) r4
            im.bclpbkiauv.tgnet.TLRPC$Message r4 = r4.message
            im.bclpbkiauv.tgnet.TLRPC$Peer r5 = r4.to_id
            int r5 = r5.channel_id
            int r12 = r2.indexOfKey(r5)
            if (r12 < 0) goto L_0x0115
            boolean r12 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r12 == 0) goto L_0x0113
            java.lang.StringBuilder r12 = new java.lang.StringBuilder
            r12.<init>()
            java.lang.String r14 = "need get diff because of min channel="
            r12.append(r14)
            r12.append(r5)
            java.lang.String r14 = " ,act="
            r12.append(r14)
            int r14 = r6.currentAccount
            r12.append(r14)
            java.lang.String r12 = r12.toString()
            im.bclpbkiauv.messenger.FileLog.d(r12)
        L_0x0113:
            r9 = 1
            goto L_0x0118
        L_0x0115:
            int r0 = r0 + 1
            goto L_0x00ce
        L_0x0118:
            if (r9 != 0) goto L_0x05c8
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r1 = r7.users
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r4 = r7.chats
            r0.putUsersAndChats(r1, r4, r3, r3)
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r0 = r7.updates
            java.util.Comparator<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r6.updatesComparator
            java.util.Collections.sort(r0, r1)
            r0 = 0
            r12 = r10
            r10 = r9
            r9 = r8
            r8 = r0
        L_0x0131:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r0 = r7.updates
            int r0 = r0.size()
            if (r8 >= r0) goto L_0x04b2
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r0 = r7.updates
            java.lang.Object r0 = r0.get(r8)
            r14 = r0
            im.bclpbkiauv.tgnet.TLRPC$Update r14 = (im.bclpbkiauv.tgnet.TLRPC.Update) r14
            int r0 = r6.getUpdateType(r14)
            if (r0 != 0) goto L_0x022e
            im.bclpbkiauv.tgnet.TLRPC$TL_updates r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_updates
            r0.<init>()
            r15 = r0
            java.util.ArrayList r0 = r15.updates
            r0.add(r14)
            int r0 = getUpdatePts(r14)
            r15.pts = r0
            int r0 = getUpdatePtsCount(r14)
            r15.pts_count = r0
            int r0 = r8 + 1
        L_0x0161:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x019c
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$Update r1 = (im.bclpbkiauv.tgnet.TLRPC.Update) r1
            int r4 = getUpdatePts(r1)
            int r5 = getUpdatePtsCount(r1)
            int r20 = r6.getUpdateType(r1)
            if (r20 != 0) goto L_0x019c
            int r3 = r15.pts
            int r3 = r3 + r5
            if (r3 != r4) goto L_0x019b
            java.util.ArrayList r3 = r15.updates
            r3.add(r1)
            r15.pts = r4
            int r3 = r15.pts_count
            int r3 = r3 + r5
            r15.pts_count = r3
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r3 = r7.updates
            r3.remove(r0)
            int r0 = r0 + -1
            r3 = 1
            int r0 = r0 + r3
            goto L_0x0161
        L_0x019b:
            r3 = 1
        L_0x019c:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            int r1 = r15.pts_count
            int r0 = r0 + r1
            int r1 = r15.pts
            if (r0 != r1) goto L_0x01db
            java.util.ArrayList r1 = r15.updates
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r4 = r7.users
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r5 = r7.chats
            r20 = 0
            int r0 = r7.date
            r21 = r0
            r0 = r33
            r22 = r2
            r2 = r4
            r4 = 1
            r3 = r5
            r24 = r10
            r23 = r11
            r5 = 1
            r10 = 0
            r4 = r20
            r5 = r21
            boolean r0 = r0.processUpdateArray(r1, r2, r3, r4, r5)
            if (r0 != 0) goto L_0x01d1
            r0 = 1
            goto L_0x022b
        L_0x01d1:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r15.pts
            r0.setLastPtsValue(r1)
            goto L_0x0229
        L_0x01db:
            r22 = r2
            r24 = r10
            r23 = r11
            r10 = 0
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            int r1 = r15.pts
            if (r0 == r1) goto L_0x0229
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0211
            long r0 = r6.updatesStartWaitTimePts
            int r2 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r2 == 0) goto L_0x0211
            int r2 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r2 == 0) goto L_0x020f
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimePts
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x020f
            goto L_0x0211
        L_0x020f:
            r0 = 1
            goto L_0x022b
        L_0x0211:
            long r0 = r6.updatesStartWaitTimePts
            int r2 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r2 != 0) goto L_0x021d
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimePts = r0
        L_0x021d:
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0224
            im.bclpbkiauv.messenger.FileLog.d(r13)
        L_0x0224:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Updates> r0 = r6.updatesQueuePts
            r0.add(r15)
        L_0x0229:
            r0 = r24
        L_0x022b:
            r10 = r0
            goto L_0x049e
        L_0x022e:
            r22 = r2
            r24 = r10
            r23 = r11
            r10 = 0
            int r0 = r6.getUpdateType(r14)
            r15 = 1
            if (r0 != r15) goto L_0x0308
            im.bclpbkiauv.tgnet.TLRPC$TL_updates r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_updates
            r0.<init>()
            r5 = r0
            java.util.ArrayList r0 = r5.updates
            r0.add(r14)
            int r0 = getUpdateQts(r14)
            r5.pts = r0
            int r0 = r8 + 1
        L_0x0250:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x0280
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$Update r1 = (im.bclpbkiauv.tgnet.TLRPC.Update) r1
            int r2 = getUpdateQts(r1)
            int r3 = r6.getUpdateType(r1)
            if (r3 != r15) goto L_0x0280
            int r3 = r5.pts
            int r3 = r3 + r15
            if (r3 != r2) goto L_0x0280
            java.util.ArrayList r3 = r5.updates
            r3.add(r1)
            r5.pts = r2
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r3 = r7.updates
            r3.remove(r0)
            int r0 = r0 + -1
            int r0 = r0 + r15
            goto L_0x0250
        L_0x0280:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r0 = r0.getLastQtsValue()
            if (r0 == 0) goto L_0x02e7
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r0 = r0.getLastQtsValue()
            java.util.ArrayList r1 = r5.updates
            int r1 = r1.size()
            int r0 = r0 + r1
            int r1 = r5.pts
            if (r0 != r1) goto L_0x029e
            goto L_0x02e7
        L_0x029e:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            int r1 = r5.pts
            if (r0 == r1) goto L_0x0304
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x02ce
            long r0 = r6.updatesStartWaitTimeQts
            int r2 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r2 == 0) goto L_0x02ce
            int r2 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r2 == 0) goto L_0x02ca
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimeQts
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x02ca
            goto L_0x02ce
        L_0x02ca:
            r0 = 1
            r24 = r0
            goto L_0x0304
        L_0x02ce:
            long r0 = r6.updatesStartWaitTimeQts
            int r2 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r2 != 0) goto L_0x02da
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimeQts = r0
        L_0x02da:
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x02e1
            im.bclpbkiauv.messenger.FileLog.d(r13)
        L_0x02e1:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Updates> r0 = r6.updatesQueueQts
            r0.add(r5)
            goto L_0x0304
        L_0x02e7:
            java.util.ArrayList r1 = r5.updates
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r0 = r7.date
            r16 = r0
            r0 = r33
            r15 = r5
            r5 = r16
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r15.pts
            r0.setLastQtsValue(r1)
            r12 = 1
        L_0x0304:
            r10 = r24
            goto L_0x049e
        L_0x0308:
            int r0 = r6.getUpdateType(r14)
            r1 = 2
            if (r0 != r1) goto L_0x04af
            int r15 = getUpdateChannelId(r14)
            r0 = 0
            android.util.SparseIntArray r2 = r6.channelsPts
            int r2 = r2.get(r15)
            if (r2 != 0) goto L_0x0350
            im.bclpbkiauv.messenger.MessagesStorage r3 = r33.getMessagesStorage()
            int r2 = r3.getChannelPtsSync(r15)
            if (r2 != 0) goto L_0x0347
            r3 = 0
        L_0x0327:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r4 = r7.chats
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x0343
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r4 = r7.chats
            java.lang.Object r4 = r4.get(r3)
            im.bclpbkiauv.tgnet.TLRPC$Chat r4 = (im.bclpbkiauv.tgnet.TLRPC.Chat) r4
            int r5 = r4.id
            if (r5 != r15) goto L_0x0340
            r6.loadUnknownChannel(r4, r10)
            r0 = 1
            goto L_0x0343
        L_0x0340:
            int r3 = r3 + 1
            goto L_0x0327
        L_0x0343:
            r16 = r0
            r5 = r2
            goto L_0x0353
        L_0x0347:
            android.util.SparseIntArray r3 = r6.channelsPts
            r3.put(r15, r2)
            r16 = r0
            r5 = r2
            goto L_0x0353
        L_0x0350:
            r16 = r0
            r5 = r2
        L_0x0353:
            im.bclpbkiauv.tgnet.TLRPC$TL_updates r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_updates
            r0.<init>()
            r4 = r0
            java.util.ArrayList r0 = r4.updates
            r0.add(r14)
            int r0 = getUpdatePts(r14)
            r4.pts = r0
            int r0 = getUpdatePtsCount(r14)
            r4.pts_count = r0
            int r0 = r8 + 1
        L_0x036c:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r2 = r7.updates
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x03b0
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r2 = r7.updates
            java.lang.Object r2 = r2.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$Update r2 = (im.bclpbkiauv.tgnet.TLRPC.Update) r2
            int r3 = getUpdatePts(r2)
            int r17 = getUpdatePtsCount(r2)
            int r10 = r6.getUpdateType(r2)
            if (r10 != r1) goto L_0x03b0
            int r10 = getUpdateChannelId(r2)
            if (r15 != r10) goto L_0x03b0
            int r10 = r4.pts
            int r10 = r10 + r17
            if (r10 != r3) goto L_0x03b0
            java.util.ArrayList r10 = r4.updates
            r10.add(r2)
            r4.pts = r3
            int r10 = r4.pts_count
            int r10 = r10 + r17
            r4.pts_count = r10
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r10 = r7.updates
            r10.remove(r0)
            int r0 = r0 + -1
            r2 = 1
            int r0 = r0 + r2
            r10 = 0
            goto L_0x036c
        L_0x03b0:
            if (r16 != 0) goto L_0x047e
            int r0 = r4.pts_count
            int r0 = r0 + r5
            int r1 = r4.pts
            if (r0 != r1) goto L_0x0403
            java.util.ArrayList r1 = r4.updates
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r3 = r7.chats
            r10 = 0
            int r11 = r7.date
            r0 = r33
            r17 = r12
            r12 = r4
            r4 = r10
            r10 = r5
            r5 = r11
            boolean r0 = r0.processUpdateArray(r1, r2, r3, r4, r5)
            if (r0 != 0) goto L_0x03f1
            if (r9 != 0) goto L_0x03de
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r9 = r0
            r12 = r17
            r10 = r24
            goto L_0x049e
        L_0x03de:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r15)
            boolean r0 = r9.contains(r0)
            if (r0 != 0) goto L_0x049a
            java.lang.Integer r0 = java.lang.Integer.valueOf(r15)
            r9.add(r0)
            goto L_0x049a
        L_0x03f1:
            android.util.SparseIntArray r0 = r6.channelsPts
            int r1 = r12.pts
            r0.put(r15, r1)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r12.pts
            r0.saveChannelPts(r15, r1)
            goto L_0x049a
        L_0x0403:
            r10 = r5
            r17 = r12
            r12 = r4
            int r0 = r12.pts
            if (r10 == r0) goto L_0x049a
            im.bclpbkiauv.messenger.support.SparseLongArray r0 = r6.updatesStartWaitTimeChannels
            long r0 = r0.get(r15)
            android.util.SparseBooleanArray r2 = r6.gettingDifferenceChannels
            boolean r2 = r2.get(r15)
            if (r2 != 0) goto L_0x044a
            r3 = 0
            int r5 = (r0 > r3 ? 1 : (r0 == r3 ? 0 : -1))
            if (r5 == 0) goto L_0x044a
            long r3 = java.lang.System.currentTimeMillis()
            long r3 = r3 - r0
            long r3 = java.lang.Math.abs(r3)
            r18 = 1500(0x5dc, double:7.41E-321)
            int r5 = (r3 > r18 ? 1 : (r3 == r18 ? 0 : -1))
            if (r5 > 0) goto L_0x042f
            goto L_0x044a
        L_0x042f:
            if (r9 != 0) goto L_0x0438
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r9 = r3
            goto L_0x0479
        L_0x0438:
            java.lang.Integer r3 = java.lang.Integer.valueOf(r15)
            boolean r3 = r9.contains(r3)
            if (r3 != 0) goto L_0x0479
            java.lang.Integer r3 = java.lang.Integer.valueOf(r15)
            r9.add(r3)
            goto L_0x0479
        L_0x044a:
            r3 = 0
            int r5 = (r0 > r3 ? 1 : (r0 == r3 ? 0 : -1))
            if (r5 != 0) goto L_0x0459
            im.bclpbkiauv.messenger.support.SparseLongArray r3 = r6.updatesStartWaitTimeChannels
            long r4 = java.lang.System.currentTimeMillis()
            r3.put(r15, r4)
        L_0x0459:
            boolean r3 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r3 == 0) goto L_0x0460
            im.bclpbkiauv.messenger.FileLog.d(r13)
        L_0x0460:
            android.util.SparseArray<java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Updates>> r3 = r6.updatesQueueChannels
            java.lang.Object r3 = r3.get(r15)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            if (r3 != 0) goto L_0x0475
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r3 = r4
            android.util.SparseArray<java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Updates>> r4 = r6.updatesQueueChannels
            r4.put(r15, r3)
        L_0x0475:
            r3.add(r12)
        L_0x0479:
            r12 = r17
            r10 = r24
            goto L_0x049e
        L_0x047e:
            r10 = r5
            r17 = r12
            r12 = r4
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x049a
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need load unknown channel = "
            r0.append(r1)
            r0.append(r15)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x049a:
            r12 = r17
            r10 = r24
        L_0x049e:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r0 = r7.updates
            r0.remove(r8)
            int r8 = r8 + -1
            r0 = 1
            int r8 = r8 + r0
            r2 = r22
            r11 = r23
            r3 = 1
            goto L_0x0131
        L_0x04af:
            r17 = r12
            goto L_0x04ba
        L_0x04b2:
            r22 = r2
            r24 = r10
            r23 = r11
            r17 = r12
        L_0x04ba:
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatesCombined
            if (r0 == 0) goto L_0x04df
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            r1 = 1
            int r0 = r0 + r1
            int r1 = r7.seq_start
            if (r0 == r1) goto L_0x04db
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            int r1 = r7.seq_start
            if (r0 != r1) goto L_0x04d9
            goto L_0x04db
        L_0x04d9:
            r3 = 0
            goto L_0x04dc
        L_0x04db:
            r3 = 1
        L_0x04dc:
            r0 = r3
            r8 = r0
            goto L_0x0503
        L_0x04df:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            r1 = 1
            int r0 = r0 + r1
            int r1 = r7.seq
            if (r0 == r1) goto L_0x0500
            int r0 = r7.seq
            if (r0 == 0) goto L_0x0500
            int r0 = r7.seq
            im.bclpbkiauv.messenger.MessagesStorage r1 = r33.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            if (r0 != r1) goto L_0x04fe
            goto L_0x0500
        L_0x04fe:
            r3 = 0
            goto L_0x0501
        L_0x0500:
            r3 = 1
        L_0x0501:
            r0 = r3
            r8 = r0
        L_0x0503:
            if (r8 == 0) goto L_0x052f
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Update> r1 = r7.updates
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r5 = r7.date
            r0 = r33
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            int r0 = r7.seq
            if (r0 == 0) goto L_0x05c2
            int r0 = r7.date
            if (r0 == 0) goto L_0x0524
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r7.date
            r0.setLastDateValue(r1)
        L_0x0524:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r7.seq
            r0.setLastSeqValue(r1)
            goto L_0x05c2
        L_0x052f:
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0582
            boolean r0 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatesCombined
            java.lang.String r1 = " ,up.seq_start="
            if (r0 == 0) goto L_0x055e
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "need get diff TL_updatesCombined, seq="
            r0.append(r2)
            im.bclpbkiauv.messenger.MessagesStorage r2 = r33.getMessagesStorage()
            int r2 = r2.getLastSeqValue()
            r0.append(r2)
            r0.append(r1)
            int r1 = r7.seq_start
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
            goto L_0x0582
        L_0x055e:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "need get diff TL_updates, seq="
            r0.append(r2)
            im.bclpbkiauv.messenger.MessagesStorage r2 = r33.getMessagesStorage()
            int r2 = r2.getLastSeqValue()
            r0.append(r2)
            r0.append(r1)
            int r1 = r7.seq
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x0582:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x05a6
            long r0 = r6.updatesStartWaitTimeSeq
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x05a6
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimeSeq
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x05a0
            goto L_0x05a6
        L_0x05a0:
            r0 = 1
            r8 = r9
            r10 = r17
            r9 = r0
            goto L_0x05cd
        L_0x05a6:
            long r0 = r6.updatesStartWaitTimeSeq
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x05b4
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimeSeq = r0
        L_0x05b4:
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x05bd
            java.lang.String r0 = "add TL_updates/Combined to queue"
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x05bd:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Updates> r0 = r6.updatesQueueSeq
            r0.add(r7)
        L_0x05c2:
            r8 = r9
            r10 = r17
            r9 = r24
            goto L_0x05cd
        L_0x05c8:
            r22 = r2
            r0 = r10
            r23 = r11
        L_0x05cd:
            r11 = r23
            goto L_0x097d
        L_0x05d1:
            r0 = r10
            r23 = r11
        L_0x05d4:
            boolean r1 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateShortChatMessage
            if (r1 == 0) goto L_0x05db
            int r1 = r7.from_id
            goto L_0x05dd
        L_0x05db:
            int r1 = r7.user_id
        L_0x05dd:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r1)
            im.bclpbkiauv.tgnet.TLRPC$User r2 = r6.getUser(r2)
            r3 = 0
            r4 = 0
            r5 = 0
            if (r2 == 0) goto L_0x05ee
            boolean r10 = r2.min
            if (r10 == 0) goto L_0x0601
        L_0x05ee:
            im.bclpbkiauv.messenger.MessagesStorage r10 = r33.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$User r2 = r10.getUserSync(r1)
            if (r2 == 0) goto L_0x05fd
            boolean r10 = r2.min
            if (r10 == 0) goto L_0x05fd
            r2 = 0
        L_0x05fd:
            r10 = 1
            r6.putUser(r2, r10)
        L_0x0601:
            r10 = 0
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r11 = r7.fwd_from
            if (r11 == 0) goto L_0x0650
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r11 = r7.fwd_from
            int r11 = r11.from_id
            if (r11 == 0) goto L_0x062b
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r11 = r7.fwd_from
            int r11 = r11.from_id
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            im.bclpbkiauv.tgnet.TLRPC$User r3 = r6.getUser(r11)
            if (r3 != 0) goto L_0x062a
            im.bclpbkiauv.messenger.MessagesStorage r11 = r33.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r12 = r7.fwd_from
            int r12 = r12.from_id
            im.bclpbkiauv.tgnet.TLRPC$User r3 = r11.getUserSync(r12)
            r11 = 1
            r6.putUser(r3, r11)
        L_0x062a:
            r10 = 1
        L_0x062b:
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r11 = r7.fwd_from
            int r11 = r11.channel_id
            if (r11 == 0) goto L_0x0650
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r11 = r7.fwd_from
            int r11 = r11.channel_id
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r6.getChat(r11)
            if (r5 != 0) goto L_0x064f
            im.bclpbkiauv.messenger.MessagesStorage r11 = r33.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r12 = r7.fwd_from
            int r12 = r12.channel_id
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r11.getChatSync(r12)
            r11 = 1
            r6.putChat(r5, r11)
        L_0x064f:
            r10 = 1
        L_0x0650:
            r11 = 0
            int r12 = r7.via_bot_id
            if (r12 == 0) goto L_0x0670
            int r12 = r7.via_bot_id
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            im.bclpbkiauv.tgnet.TLRPC$User r4 = r6.getUser(r12)
            if (r4 != 0) goto L_0x066f
            im.bclpbkiauv.messenger.MessagesStorage r12 = r33.getMessagesStorage()
            int r14 = r7.via_bot_id
            im.bclpbkiauv.tgnet.TLRPC$User r4 = r12.getUserSync(r14)
            r12 = 1
            r6.putUser(r4, r12)
        L_0x066f:
            r11 = 1
        L_0x0670:
            boolean r12 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateShortMessage
            if (r12 == 0) goto L_0x0685
            if (r2 == 0) goto L_0x0683
            if (r10 == 0) goto L_0x067c
            if (r3 != 0) goto L_0x067c
            if (r5 == 0) goto L_0x0683
        L_0x067c:
            if (r11 == 0) goto L_0x0681
            if (r4 != 0) goto L_0x0681
            goto L_0x0683
        L_0x0681:
            r12 = 0
            goto L_0x0684
        L_0x0683:
            r12 = 1
        L_0x0684:
            goto L_0x06b2
        L_0x0685:
            int r12 = r7.chat_id
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            im.bclpbkiauv.tgnet.TLRPC$Chat r12 = r6.getChat(r12)
            if (r12 != 0) goto L_0x069f
            im.bclpbkiauv.messenger.MessagesStorage r14 = r33.getMessagesStorage()
            int r15 = r7.chat_id
            im.bclpbkiauv.tgnet.TLRPC$Chat r12 = r14.getChatSync(r15)
            r14 = 1
            r6.putChat(r12, r14)
        L_0x069f:
            if (r12 == 0) goto L_0x06b0
            if (r2 == 0) goto L_0x06b0
            if (r10 == 0) goto L_0x06a9
            if (r3 != 0) goto L_0x06a9
            if (r5 == 0) goto L_0x06b0
        L_0x06a9:
            if (r11 == 0) goto L_0x06ae
            if (r4 != 0) goto L_0x06ae
            goto L_0x06b0
        L_0x06ae:
            r14 = 0
            goto L_0x06b1
        L_0x06b0:
            r14 = 1
        L_0x06b1:
            r12 = r14
        L_0x06b2:
            if (r12 != 0) goto L_0x0719
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r14 = r7.entities
            boolean r14 = r14.isEmpty()
            if (r14 != 0) goto L_0x0719
            r14 = 0
        L_0x06bd:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r15 = r7.entities
            int r15 = r15.size()
            if (r14 >= r15) goto L_0x0712
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r15 = r7.entities
            java.lang.Object r15 = r15.get(r14)
            im.bclpbkiauv.tgnet.TLRPC$MessageEntity r15 = (im.bclpbkiauv.tgnet.TLRPC.MessageEntity) r15
            r16 = r0
            boolean r0 = r15 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageEntityMentionName
            if (r0 == 0) goto L_0x0705
            r0 = r15
            im.bclpbkiauv.tgnet.TLRPC$TL_messageEntityMentionName r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_messageEntityMentionName) r0
            int r0 = r0.user_id
            r17 = r3
            java.lang.Integer r3 = java.lang.Integer.valueOf(r0)
            im.bclpbkiauv.tgnet.TLRPC$User r3 = r6.getUser(r3)
            if (r3 == 0) goto L_0x06eb
            r21 = r4
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x0709
            goto L_0x06ed
        L_0x06eb:
            r21 = r4
        L_0x06ed:
            im.bclpbkiauv.messenger.MessagesStorage r4 = r33.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$User r3 = r4.getUserSync(r0)
            if (r3 == 0) goto L_0x06fc
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x06fc
            r3 = 0
        L_0x06fc:
            if (r3 != 0) goto L_0x0700
            r12 = 1
            goto L_0x071f
        L_0x0700:
            r4 = 1
            r6.putUser(r2, r4)
            goto L_0x0709
        L_0x0705:
            r17 = r3
            r21 = r4
        L_0x0709:
            int r14 = r14 + 1
            r0 = r16
            r3 = r17
            r4 = r21
            goto L_0x06bd
        L_0x0712:
            r16 = r0
            r17 = r3
            r21 = r4
            goto L_0x071f
        L_0x0719:
            r16 = r0
            r17 = r3
            r21 = r4
        L_0x071f:
            boolean r0 = r7.out
            if (r0 != 0) goto L_0x0755
            if (r2 == 0) goto L_0x0755
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r0 = r2.status
            if (r0 == 0) goto L_0x0755
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r0 = r2.status
            int r0 = r0.expires
            if (r0 > 0) goto L_0x0755
            im.bclpbkiauv.tgnet.ConnectionsManager r0 = r33.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r3 = r7.date
            int r0 = r0 - r3
            int r0 = java.lang.Math.abs(r0)
            r3 = 30
            if (r0 >= r3) goto L_0x0755
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r0 = r6.onlinePrivacy
            int r3 = r2.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            int r4 = r7.date
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r0.put(r3, r4)
            r0 = 1
            goto L_0x0757
        L_0x0755:
            r0 = r23
        L_0x0757:
            if (r12 == 0) goto L_0x0761
            r3 = 1
            r22 = r0
            r9 = r3
            r23 = r8
            goto L_0x0977
        L_0x0761:
            im.bclpbkiauv.messenger.MessagesStorage r3 = r33.getMessagesStorage()
            int r3 = r3.getLastPtsValue()
            int r4 = r7.pts_count
            int r3 = r3 + r4
            int r4 = r7.pts
            if (r3 != r4) goto L_0x08e4
            im.bclpbkiauv.tgnet.TLRPC$TL_message r3 = new im.bclpbkiauv.tgnet.TLRPC$TL_message
            r3.<init>()
            int r4 = r7.id
            r3.id = r4
            im.bclpbkiauv.messenger.UserConfig r4 = r33.getUserConfig()
            int r4 = r4.getClientUserId()
            boolean r13 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateShortMessage
            if (r13 == 0) goto L_0x079d
            boolean r13 = r7.out
            if (r13 == 0) goto L_0x078c
            r3.from_id = r4
            goto L_0x078e
        L_0x078c:
            r3.from_id = r1
        L_0x078e:
            im.bclpbkiauv.tgnet.TLRPC$TL_peerUser r13 = new im.bclpbkiauv.tgnet.TLRPC$TL_peerUser
            r13.<init>()
            r3.to_id = r13
            im.bclpbkiauv.tgnet.TLRPC$Peer r13 = r3.to_id
            r13.user_id = r1
            long r13 = (long) r1
            r3.dialog_id = r13
            goto L_0x07b2
        L_0x079d:
            r3.from_id = r1
            im.bclpbkiauv.tgnet.TLRPC$TL_peerChat r13 = new im.bclpbkiauv.tgnet.TLRPC$TL_peerChat
            r13.<init>()
            r3.to_id = r13
            im.bclpbkiauv.tgnet.TLRPC$Peer r13 = r3.to_id
            int r14 = r7.chat_id
            r13.chat_id = r14
            int r13 = r7.chat_id
            int r13 = -r13
            long r13 = (long) r13
            r3.dialog_id = r13
        L_0x07b2:
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r13 = r7.fwd_from
            r3.fwd_from = r13
            boolean r13 = r7.silent
            r3.silent = r13
            boolean r13 = r7.out
            r3.out = r13
            boolean r13 = r7.mentioned
            r3.mentioned = r13
            boolean r13 = r7.media_unread
            r3.media_unread = r13
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r13 = r7.entities
            r3.entities = r13
            java.lang.String r13 = r7.message
            r3.message = r13
            int r13 = r7.date
            r3.date = r13
            int r13 = r7.via_bot_id
            r3.via_bot_id = r13
            int r13 = r7.flags
            r13 = r13 | 256(0x100, float:3.59E-43)
            r3.flags = r13
            int r13 = r7.reply_to_msg_id
            r3.reply_to_msg_id = r13
            im.bclpbkiauv.tgnet.TLRPC$TL_messageMediaEmpty r13 = new im.bclpbkiauv.tgnet.TLRPC$TL_messageMediaEmpty
            r13.<init>()
            r3.media = r13
            boolean r13 = r3.out
            if (r13 == 0) goto L_0x07ee
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_outbox_max
            goto L_0x07f0
        L_0x07ee:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_inbox_max
        L_0x07f0:
            long r14 = r3.dialog_id
            java.lang.Long r14 = java.lang.Long.valueOf(r14)
            java.lang.Object r14 = r13.get(r14)
            java.lang.Integer r14 = (java.lang.Integer) r14
            if (r14 != 0) goto L_0x081e
            im.bclpbkiauv.messenger.MessagesStorage r15 = r33.getMessagesStorage()
            r22 = r0
            boolean r0 = r3.out
            r23 = r8
            r24 = r9
            long r8 = r3.dialog_id
            int r0 = r15.getDialogReadMax(r0, r8)
            java.lang.Integer r14 = java.lang.Integer.valueOf(r0)
            long r8 = r3.dialog_id
            java.lang.Long r0 = java.lang.Long.valueOf(r8)
            r13.put(r0, r14)
            goto L_0x0824
        L_0x081e:
            r22 = r0
            r23 = r8
            r24 = r9
        L_0x0824:
            int r0 = r14.intValue()
            int r8 = r3.id
            if (r0 >= r8) goto L_0x082e
            r0 = 1
            goto L_0x082f
        L_0x082e:
            r0 = 0
        L_0x082f:
            r3.unread = r0
            long r8 = r3.dialog_id
            r0 = r10
            r15 = r11
            long r10 = (long) r4
            int r18 = (r8 > r10 ? 1 : (r8 == r10 ? 0 : -1))
            if (r18 != 0) goto L_0x0843
            r8 = 0
            r3.unread = r8
            r3.media_unread = r8
            r8 = 1
            r3.out = r8
            goto L_0x0844
        L_0x0843:
            r8 = 1
        L_0x0844:
            im.bclpbkiauv.messenger.MessagesStorage r9 = r33.getMessagesStorage()
            int r10 = r7.pts
            r9.setLastPtsValue(r10)
            im.bclpbkiauv.messenger.MessageObject r9 = new im.bclpbkiauv.messenger.MessageObject
            int r10 = r6.currentAccount
            java.util.ArrayList<java.lang.Long> r11 = r6.createdDialogIds
            r18 = r9
            long r8 = r3.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            boolean r8 = r11.contains(r8)
            r9 = r18
            r9.<init>(r10, r3, r8)
            r8 = r9
            java.util.ArrayList r9 = new java.util.ArrayList
            r9.<init>()
            r9.add(r8)
            java.util.ArrayList r10 = new java.util.ArrayList
            r10.<init>()
            r10.add(r3)
            boolean r11 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateShortMessage
            if (r11 == 0) goto L_0x08a0
            boolean r11 = r7.out
            if (r11 != 0) goto L_0x088c
            int r11 = r7.user_id
            r32 = r2
            r18 = r3
            long r2 = (long) r11
            boolean r2 = r6.updatePrintingUsersWithNewMessages(r2, r9)
            if (r2 == 0) goto L_0x0890
            r3 = 1
            goto L_0x0891
        L_0x088c:
            r32 = r2
            r18 = r3
        L_0x0890:
            r3 = 0
        L_0x0891:
            r2 = r3
            if (r2 == 0) goto L_0x0897
            r33.updatePrintingStrings()
        L_0x0897:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$hwDukX2xmoj6Nb5CaZdh7qn5H0E r3 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$hwDukX2xmoj6Nb5CaZdh7qn5H0E
            r3.<init>(r2, r1, r9)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r3)
            goto L_0x08b9
        L_0x08a0:
            r32 = r2
            r18 = r3
            int r2 = r7.chat_id
            int r2 = -r2
            long r2 = (long) r2
            boolean r2 = r6.updatePrintingUsersWithNewMessages(r2, r9)
            if (r2 == 0) goto L_0x08b1
            r33.updatePrintingStrings()
        L_0x08b1:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$YJwn0rzrdTcHQz2163OSwJxu4Jk r3 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$YJwn0rzrdTcHQz2163OSwJxu4Jk
            r3.<init>(r2, r7, r9)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r3)
        L_0x08b9:
            boolean r2 = r8.isOut()
            if (r2 != 0) goto L_0x08cf
            im.bclpbkiauv.messenger.MessagesStorage r2 = r33.getMessagesStorage()
            im.bclpbkiauv.messenger.DispatchQueue r2 = r2.getStorageQueue()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$YACjRMVoT85tJmzTTAWMBQfKpPI r3 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$YACjRMVoT85tJmzTTAWMBQfKpPI
            r3.<init>(r9)
            r2.postRunnable(r3)
        L_0x08cf:
            im.bclpbkiauv.messenger.MessagesStorage r25 = r33.getMessagesStorage()
            r27 = 0
            r28 = 1
            r29 = 0
            r30 = 0
            r31 = 0
            r26 = r10
            r25.putMessages((java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC.Message>) r26, (boolean) r27, (boolean) r28, (boolean) r29, (int) r30, (boolean) r31)
            goto L_0x0974
        L_0x08e4:
            r22 = r0
            r32 = r2
            r23 = r8
            r24 = r9
            r0 = r10
            r15 = r11
            im.bclpbkiauv.messenger.MessagesStorage r2 = r33.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            int r3 = r7.pts
            if (r2 == r3) goto L_0x0974
            boolean r2 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x0938
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "need get diff short message, act="
            r2.append(r3)
            int r3 = r6.currentAccount
            r2.append(r3)
            java.lang.String r3 = " ,pts: "
            r2.append(r3)
            im.bclpbkiauv.messenger.MessagesStorage r3 = r33.getMessagesStorage()
            int r3 = r3.getLastPtsValue()
            r2.append(r3)
            java.lang.String r3 = " ,up.pts="
            r2.append(r3)
            int r3 = r7.pts
            r2.append(r3)
            java.lang.String r3 = " ,count="
            r2.append(r3)
            int r3 = r7.pts_count
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            im.bclpbkiauv.messenger.FileLog.d(r2)
        L_0x0938:
            boolean r2 = r6.gettingDifference
            if (r2 != 0) goto L_0x0959
            long r2 = r6.updatesStartWaitTimePts
            r8 = 0
            int r4 = (r2 > r8 ? 1 : (r2 == r8 ? 0 : -1))
            if (r4 == 0) goto L_0x0959
            long r2 = java.lang.System.currentTimeMillis()
            long r8 = r6.updatesStartWaitTimePts
            long r2 = r2 - r8
            long r2 = java.lang.Math.abs(r2)
            r8 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r2 > r8 ? 1 : (r2 == r8 ? 0 : -1))
            if (r4 > 0) goto L_0x0956
            goto L_0x0959
        L_0x0956:
            r2 = 1
            r9 = r2
            goto L_0x0977
        L_0x0959:
            long r2 = r6.updatesStartWaitTimePts
            r8 = 0
            int r4 = (r2 > r8 ? 1 : (r2 == r8 ? 0 : -1))
            if (r4 != 0) goto L_0x0967
            long r2 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimePts = r2
        L_0x0967:
            boolean r2 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x096e
            im.bclpbkiauv.messenger.FileLog.d(r13)
        L_0x096e:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Updates> r2 = r6.updatesQueuePts
            r2.add(r7)
            goto L_0x0975
        L_0x0974:
        L_0x0975:
            r9 = r24
        L_0x0977:
            r10 = r16
            r11 = r22
            r8 = r23
        L_0x097d:
            im.bclpbkiauv.messenger.SecretChatHelper r0 = r33.getSecretChatHelper()
            r0.processPendingEncMessages()
            if (r35 != 0) goto L_0x09bd
            r0 = 0
        L_0x0987:
            android.util.SparseArray<java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Updates>> r1 = r6.updatesQueueChannels
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x09ac
            android.util.SparseArray<java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Updates>> r1 = r6.updatesQueueChannels
            int r1 = r1.keyAt(r0)
            if (r8 == 0) goto L_0x09a5
            java.lang.Integer r2 = java.lang.Integer.valueOf(r1)
            boolean r2 = r8.contains(r2)
            if (r2 == 0) goto L_0x09a5
            r6.getChannelDifference(r1)
            goto L_0x09a9
        L_0x09a5:
            r2 = 0
            r6.processChannelsUpdatesQueue(r1, r2)
        L_0x09a9:
            int r0 = r0 + 1
            goto L_0x0987
        L_0x09ac:
            if (r9 == 0) goto L_0x09b2
            r33.getDifference()
            goto L_0x09bd
        L_0x09b2:
            r0 = 0
        L_0x09b3:
            r1 = 3
            if (r0 >= r1) goto L_0x09bd
            r1 = 0
            r6.processUpdatesQueue(r0, r1)
            int r0 = r0 + 1
            goto L_0x09b3
        L_0x09bd:
            if (r10 == 0) goto L_0x09d7
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_receivedQueue r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_receivedQueue
            r0.<init>()
            im.bclpbkiauv.messenger.MessagesStorage r1 = r33.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            r0.max_qts = r1
            im.bclpbkiauv.tgnet.ConnectionsManager r1 = r33.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$w3J7kia4N8bi-0X_hv55hbxCevA r2 = im.bclpbkiauv.messenger.$$Lambda$MessagesController$w3J7kia4N8bi0X_hv55hbxCevA.INSTANCE
            r1.sendRequest(r0, r2)
        L_0x09d7:
            if (r11 == 0) goto L_0x09e1
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$13O0O0jQ21LN42hXpiv4rBwaJUs r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$13O0O0jQ21LN42hXpiv4rBwaJUs
            r0.<init>()
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x09e1:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            im.bclpbkiauv.messenger.MessagesStorage r1 = r33.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            im.bclpbkiauv.messenger.MessagesStorage r2 = r33.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            im.bclpbkiauv.messenger.MessagesStorage r3 = r33.getMessagesStorage()
            int r3 = r3.getLastDateValue()
            im.bclpbkiauv.messenger.MessagesStorage r4 = r33.getMessagesStorage()
            int r4 = r4.getLastQtsValue()
            r0.saveDiffParams(r1, r2, r3, r4)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.processUpdates(im.bclpbkiauv.tgnet.TLRPC$Updates, boolean):void");
    }

    public /* synthetic */ void lambda$processUpdates$259$MessagesController(boolean printUpdate, int user_id, ArrayList objArr) {
        if (printUpdate) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
        }
        updateInterfaceWithMessages((long) user_id, objArr, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdates$260$MessagesController(boolean printUpdate, TLRPC.Updates updates, ArrayList objArr) {
        if (printUpdate) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
        }
        updateInterfaceWithMessages((long) (-updates.chat_id), objArr, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$null$261$MessagesController(ArrayList objArr) {
        getNotificationsController().processNewMessages(objArr, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$processUpdates$262$MessagesController(ArrayList objArr) {
        AndroidUtilities.runOnUIThread(new Runnable(objArr) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$261$MessagesController(this.f$1);
            }
        });
    }

    static /* synthetic */ void lambda$processUpdates$263(TLObject response, TLRPC.TL_error error) {
    }

    public /* synthetic */ void lambda$processUpdates$264$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    public void ensureMessagesLoaded(long dialog_id, boolean isChannel, int messageId, Runnable callback) {
        int messageId2;
        SharedPreferences sharedPreferences = getNotificationsSettings(this.currentAccount);
        if (messageId == 0) {
            messageId2 = sharedPreferences.getInt("diditem" + dialog_id, 0);
        } else {
            long j = dialog_id;
            messageId2 = messageId;
        }
        int classGuid = ConnectionsManager.generateClassGuid();
        final int i = classGuid;
        final long j2 = dialog_id;
        final Runnable runnable = callback;
        getNotificationCenter().addObserver(new NotificationCenter.NotificationCenterDelegate() {
            public void didReceivedNotification(int id, int account, Object... args) {
                if (id == NotificationCenter.messagesDidLoad && args[10].intValue() == i) {
                    boolean isCache = args[3].booleanValue();
                    if (!args[2].isEmpty() || !isCache) {
                        MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.didReceiveNewMessages);
                        runnable.run();
                        return;
                    }
                    MessagesController.this.loadMessages(j2, 20, 3, 0, false, 0, i, 3, 0, false, false, 0);
                }
            }
        }, NotificationCenter.messagesDidLoad);
        SharedPreferences sharedPreferences2 = sharedPreferences;
        loadMessages(dialog_id, 1, messageId2, 0, true, 0, classGuid, 3, 0, false, false, 0);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:686:0x11c8, code lost:
        if (r3.min != false) goto L_0x11cd;
     */
    /* JADX WARNING: Removed duplicated region for block: B:1033:0x19cb  */
    /* JADX WARNING: Removed duplicated region for block: B:1036:0x19de  */
    /* JADX WARNING: Removed duplicated region for block: B:1040:0x1a23  */
    /* JADX WARNING: Removed duplicated region for block: B:1043:0x1a2f  */
    /* JADX WARNING: Removed duplicated region for block: B:1047:0x1a5d  */
    /* JADX WARNING: Removed duplicated region for block: B:1050:0x1a63  */
    /* JADX WARNING: Removed duplicated region for block: B:1054:0x1a92  */
    /* JADX WARNING: Removed duplicated region for block: B:1056:0x1a96  */
    /* JADX WARNING: Removed duplicated region for block: B:1153:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean processUpdateArray(java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC.Update> r62, java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC.User> r63, java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC.Chat> r64, boolean r65, int r66) {
        /*
            r61 = this;
            r14 = r61
            r13 = r62
            r15 = r63
            r2 = r64
            boolean r0 = r62.isEmpty()
            r1 = 1
            if (r0 == 0) goto L_0x001c
            if (r15 != 0) goto L_0x0013
            if (r2 == 0) goto L_0x001b
        L_0x0013:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$8rDKD3DgUqh4a-MEW9j26iyipGY r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$8rDKD3DgUqh4a-MEW9j26iyipGY
            r0.<init>(r15, r2)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x001b:
            return r1
        L_0x001c:
            long r10 = java.lang.System.currentTimeMillis()
            r0 = 0
            r3 = 0
            r4 = 0
            r5 = 0
            r6 = 0
            r7 = 0
            r8 = 0
            r9 = 0
            r12 = 0
            r16 = 0
            r17 = 0
            r18 = 0
            r19 = 0
            r20 = 0
            r21 = 0
            r22 = 0
            r23 = 0
            r24 = 0
            r25 = 0
            r26 = 0
            r27 = 1
            if (r15 == 0) goto L_0x0082
            java.util.concurrent.ConcurrentHashMap r28 = new java.util.concurrent.ConcurrentHashMap
            r28.<init>()
            r29 = r28
            r28 = 0
            int r1 = r63.size()
            r31 = r0
            r0 = r28
        L_0x0054:
            if (r0 >= r1) goto L_0x0078
            java.lang.Object r28 = r15.get(r0)
            r32 = r1
            r1 = r28
            im.bclpbkiauv.tgnet.TLRPC$User r1 = (im.bclpbkiauv.tgnet.TLRPC.User) r1
            r28 = r3
            int r3 = r1.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r33 = r4
            r4 = r29
            r4.put(r3, r1)
            int r0 = r0 + 1
            r3 = r28
            r1 = r32
            r4 = r33
            goto L_0x0054
        L_0x0078:
            r32 = r1
            r28 = r3
            r33 = r4
            r4 = r29
            r1 = r4
            goto L_0x008d
        L_0x0082:
            r31 = r0
            r28 = r3
            r33 = r4
            r27 = 0
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC$User> r0 = r14.users
            r1 = r0
        L_0x008d:
            if (r2 == 0) goto L_0x00bd
            java.util.concurrent.ConcurrentHashMap r0 = new java.util.concurrent.ConcurrentHashMap
            r0.<init>()
            r3 = 0
            int r4 = r64.size()
        L_0x0099:
            if (r3 >= r4) goto L_0x00b7
            java.lang.Object r29 = r2.get(r3)
            r32 = r4
            r4 = r29
            im.bclpbkiauv.tgnet.TLRPC$Chat r4 = (im.bclpbkiauv.tgnet.TLRPC.Chat) r4
            r29 = r5
            int r5 = r4.id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r0.put(r5, r4)
            int r3 = r3 + 1
            r5 = r29
            r4 = r32
            goto L_0x0099
        L_0x00b7:
            r32 = r4
            r29 = r5
            r4 = r0
            goto L_0x00c4
        L_0x00bd:
            r29 = r5
            r27 = 0
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC$Chat> r0 = r14.chats
            r4 = r0
        L_0x00c4:
            if (r65 == 0) goto L_0x00c8
            r27 = 0
        L_0x00c8:
            if (r15 != 0) goto L_0x00cc
            if (r2 == 0) goto L_0x00d4
        L_0x00cc:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$yzqXgbdQEKZ0by0CMOtzwkNFubs r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$yzqXgbdQEKZ0by0CMOtzwkNFubs
            r0.<init>(r15, r2)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x00d4:
            r0 = 0
            java.util.HashMap r3 = new java.util.HashMap
            r3.<init>()
            r5 = r3
            r3 = 0
        L_0x00dc:
            r32 = r0
            int r0 = r62.size()
            if (r3 >= r0) goto L_0x011c
            java.lang.Object r0 = r13.get(r3)
            im.bclpbkiauv.tgnet.TLRPC$Update r0 = (im.bclpbkiauv.tgnet.TLRPC.Update) r0
            boolean r2 = r0 instanceof im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallRequested
            if (r2 == 0) goto L_0x00fd
            r2 = r0
            im.bclpbkiauv.tgnet.TLRPCCall$TL_UpdateMeetCallRequested r2 = (im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallRequested) r2
            r34 = r6
            java.lang.String r6 = r2.id
            r35 = r2
            java.lang.String r2 = "1"
            r5.put(r6, r2)
            goto L_0x00ff
        L_0x00fd:
            r34 = r6
        L_0x00ff:
            boolean r2 = r0 instanceof im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallDiscarded
            if (r2 == 0) goto L_0x0113
            r2 = r0
            im.bclpbkiauv.tgnet.TLRPCCall$TL_UpdateMeetCallDiscarded r2 = (im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallDiscarded) r2
            java.lang.String r6 = r2.id
            java.lang.Object r6 = r5.get(r6)
            if (r6 == 0) goto L_0x0113
            java.lang.String r6 = r2.id
            r5.remove(r6)
        L_0x0113:
            int r3 = r3 + 1
            r2 = r64
            r0 = r32
            r6 = r34
            goto L_0x00dc
        L_0x011c:
            r34 = r6
            r0 = 0
            int r2 = r62.size()
            r3 = r0
            r15 = r16
            r41 = r22
            r42 = r25
            r6 = r28
            r22 = r34
            r16 = r9
            r9 = r21
            r25 = r23
            r23 = r7
            r7 = r32
            r60 = r17
            r17 = r5
            r5 = r18
            r18 = r12
            r12 = r20
            r20 = r19
            r19 = r29
            r28 = r10
            r10 = r26
            r26 = r24
            r24 = r8
            r8 = r60
        L_0x0150:
            if (r3 >= r2) goto L_0x17e3
            java.lang.Object r0 = r13.get(r3)
            r11 = r0
            im.bclpbkiauv.tgnet.TLRPC$Update r11 = (im.bclpbkiauv.tgnet.TLRPC.Update) r11
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewMessage
            r21 = -2147483648(0xffffffff80000000, float:-0.0)
            r32 = r2
            r2 = 0
            if (r0 != 0) goto L_0x143b
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewChannelMessage
            if (r0 != 0) goto L_0x143b
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewScheduledMessage
            if (r0 == 0) goto L_0x017d
            r13 = r1
            r40 = r3
            r45 = r5
            r49 = r9
            r43 = r10
            r5 = r4
            r10 = r7
            r3 = r28
            r28 = r17
            r17 = r8
            goto L_0x144c
        L_0x017d:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateReadMessagesContents
            if (r0 == 0) goto L_0x01cc
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateReadMessagesContents r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateReadMessagesContents) r0
            if (r5 != 0) goto L_0x018c
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r5 = r2
        L_0x018c:
            r2 = 0
            r21 = r2
            java.util.ArrayList<java.lang.Integer> r2 = r0.messages
            int r2 = r2.size()
            r13 = r21
        L_0x0197:
            if (r13 >= r2) goto L_0x01bc
            r21 = r2
            java.util.ArrayList<java.lang.Integer> r2 = r0.messages
            java.lang.Object r2 = r2.get(r13)
            java.lang.Integer r2 = (java.lang.Integer) r2
            int r2 = r2.intValue()
            r40 = r3
            long r2 = (long) r2
            r34 = r0
            java.lang.Long r0 = java.lang.Long.valueOf(r2)
            r5.add(r0)
            int r13 = r13 + 1
            r2 = r21
            r0 = r34
            r3 = r40
            goto L_0x0197
        L_0x01bc:
            r34 = r0
            r21 = r2
            r40 = r3
            r13 = r1
            r45 = r5
            r50 = r28
            r5 = r4
            r28 = r17
            goto L_0x17d3
        L_0x01cc:
            r40 = r3
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelReadMessagesContents
            if (r0 == 0) goto L_0x0228
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChannelReadMessagesContents r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelReadMessagesContents) r0
            if (r5 != 0) goto L_0x01dd
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r5 = r2
        L_0x01dd:
            r2 = 0
            java.util.ArrayList<java.lang.Integer> r13 = r0.messages
            int r13 = r13.size()
        L_0x01e4:
            if (r2 >= r13) goto L_0x0214
            java.util.ArrayList<java.lang.Integer> r3 = r0.messages
            java.lang.Object r3 = r3.get(r2)
            java.lang.Integer r3 = (java.lang.Integer) r3
            int r3 = r3.intValue()
            r43 = r4
            long r3 = (long) r3
            r21 = r13
            int r13 = r0.channel_id
            r34 = r0
            r44 = r1
            long r0 = (long) r13
            r13 = 32
            long r0 = r0 << r13
            long r0 = r0 | r3
            java.lang.Long r3 = java.lang.Long.valueOf(r0)
            r5.add(r3)
            int r2 = r2 + 1
            r13 = r21
            r0 = r34
            r4 = r43
            r1 = r44
            goto L_0x01e4
        L_0x0214:
            r34 = r0
            r44 = r1
            r43 = r4
            r21 = r13
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x0228:
            r44 = r1
            r43 = r4
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateReadHistoryInbox
            if (r0 == 0) goto L_0x02a1
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateReadHistoryInbox r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateReadHistoryInbox) r0
            if (r15 != 0) goto L_0x023b
            im.bclpbkiauv.messenger.support.SparseLongArray r1 = new im.bclpbkiauv.messenger.support.SparseLongArray
            r1.<init>()
            r15 = r1
        L_0x023b:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            if (r1 == 0) goto L_0x0253
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            int r1 = -r1
            int r3 = r0.max_id
            long r3 = (long) r3
            r15.put(r1, r3)
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            int r1 = -r1
            long r3 = (long) r1
            goto L_0x0262
        L_0x0253:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.user_id
            int r3 = r0.max_id
            long r3 = (long) r3
            r15.put(r1, r3)
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.user_id
            long r3 = (long) r1
        L_0x0262:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r14.dialogs_read_inbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r3)
            java.lang.Object r1 = r1.get(r13)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x027c
            im.bclpbkiauv.messenger.MessagesStorage r13 = r61.getMessagesStorage()
            int r2 = r13.getDialogReadMax(r2, r3)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r2)
        L_0x027c:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r14.dialogs_read_inbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r3)
            r34 = r3
            int r3 = r1.intValue()
            int r4 = r0.max_id
            int r3 = java.lang.Math.max(r3, r4)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r2.put(r13, r3)
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x02a1:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateReadHistoryOutbox
            if (r0 == 0) goto L_0x0317
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateReadHistoryOutbox r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateReadHistoryOutbox) r0
            if (r8 != 0) goto L_0x02b0
            im.bclpbkiauv.messenger.support.SparseLongArray r1 = new im.bclpbkiauv.messenger.support.SparseLongArray
            r1.<init>()
            r8 = r1
        L_0x02b0:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            if (r1 == 0) goto L_0x02c8
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            int r1 = -r1
            int r2 = r0.max_id
            long r2 = (long) r2
            r8.put(r1, r2)
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            int r1 = -r1
            long r1 = (long) r1
            goto L_0x02d7
        L_0x02c8:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.user_id
            int r2 = r0.max_id
            long r2 = (long) r2
            r8.put(r1, r2)
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.user_id
            long r1 = (long) r1
        L_0x02d7:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r14.dialogs_read_outbox_max
            java.lang.Long r4 = java.lang.Long.valueOf(r1)
            java.lang.Object r3 = r3.get(r4)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r3 != 0) goto L_0x02f2
            im.bclpbkiauv.messenger.MessagesStorage r4 = r61.getMessagesStorage()
            r13 = 1
            int r4 = r4.getDialogReadMax(r13, r1)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r4)
        L_0x02f2:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r14.dialogs_read_outbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r1)
            r34 = r1
            int r1 = r3.intValue()
            int r2 = r0.max_id
            int r1 = java.lang.Math.max(r1, r2)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r4.put(r13, r1)
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x0317:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDeleteMessages
            if (r0 == 0) goto L_0x0348
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateDeleteMessages r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateDeleteMessages) r0
            if (r12 != 0) goto L_0x0326
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r12 = r1
        L_0x0326:
            java.lang.Object r1 = r12.get(r2)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            if (r1 != 0) goto L_0x0337
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r1 = r3
            r12.put(r2, r1)
        L_0x0337:
            java.util.ArrayList<java.lang.Integer> r2 = r0.messages
            r1.addAll(r2)
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x0348:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDeleteScheduledMessages
            if (r0 == 0) goto L_0x0391
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateDeleteScheduledMessages r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateDeleteScheduledMessages) r0
            if (r9 != 0) goto L_0x0357
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r9 = r1
        L_0x0357:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            boolean r1 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_peerChannel
            if (r1 == 0) goto L_0x0369
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            r2 = r1
            java.lang.Object r1 = r9.get(r1)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            goto L_0x0375
        L_0x0369:
            r1 = r2
            java.lang.Object r2 = r9.get(r2)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            r60 = r2
            r2 = r1
            r1 = r60
        L_0x0375:
            if (r1 != 0) goto L_0x0380
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r1 = r3
            r9.put(r2, r1)
        L_0x0380:
            java.util.ArrayList<java.lang.Integer> r3 = r0.messages
            r1.addAll(r3)
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x0391:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserTyping
            if (r0 != 0) goto L_0x1310
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChatUserTyping
            if (r0 == 0) goto L_0x03ac
            r45 = r5
            r49 = r9
            r50 = r28
            r5 = r43
            r13 = r44
            r43 = r10
            r28 = r17
            r10 = r7
            r17 = r8
            goto L_0x1321
        L_0x03ac:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChatParticipants
            if (r0 == 0) goto L_0x03d5
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChatParticipants r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChatParticipants) r0
            r1 = r7 | 32
            if (r25 != 0) goto L_0x03bf
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r25 = r2
            goto L_0x03c1
        L_0x03bf:
            r2 = r25
        L_0x03c1:
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipants r3 = r0.participants
            r2.add(r3)
            r7 = r1
            r25 = r2
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x03d5:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserStatus
            if (r0 == 0) goto L_0x03f9
            r0 = r7 | 4
            if (r26 != 0) goto L_0x03e5
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r26 = r1
            goto L_0x03e7
        L_0x03e5:
            r1 = r26
        L_0x03e7:
            r1.add(r11)
            r7 = r0
            r26 = r1
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x03f9:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserName
            if (r0 == 0) goto L_0x041d
            r0 = r7 | 1
            if (r26 != 0) goto L_0x0409
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r26 = r1
            goto L_0x040b
        L_0x0409:
            r1 = r26
        L_0x040b:
            r1.add(r11)
            r7 = r0
            r26 = r1
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x041d:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPhoto
            if (r0 == 0) goto L_0x044d
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserPhoto r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPhoto) r0
            r1 = r7 | 2
            im.bclpbkiauv.messenger.MessagesStorage r2 = r61.getMessagesStorage()
            int r3 = r0.user_id
            r2.clearUserPhotos(r3)
            if (r26 != 0) goto L_0x0439
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r26 = r2
            goto L_0x043b
        L_0x0439:
            r2 = r26
        L_0x043b:
            r2.add(r11)
            r7 = r1
            r26 = r2
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x044d:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPhone
            if (r0 == 0) goto L_0x0471
            r0 = r7 | 1024(0x400, float:1.435E-42)
            if (r26 != 0) goto L_0x045d
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r26 = r1
            goto L_0x045f
        L_0x045d:
            r1 = r26
        L_0x045f:
            r1.add(r11)
            r7 = r0
            r26 = r1
            r45 = r5
            r50 = r28
            r5 = r43
            r13 = r44
            r28 = r17
            goto L_0x17d3
        L_0x0471:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePeerSettings
            if (r0 == 0) goto L_0x0512
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updatePeerSettings r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updatePeerSettings) r0
            if (r10 != 0) goto L_0x0480
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r10 = r1
        L_0x0480:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            boolean r1 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_peerUser
            if (r1 == 0) goto L_0x04f5
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r13 = r44
            java.lang.Object r1 = r13.get(r1)
            im.bclpbkiauv.tgnet.TLRPC$User r1 = (im.bclpbkiauv.tgnet.TLRPC.User) r1
            if (r1 == 0) goto L_0x04f7
            boolean r2 = r1.contact
            r3 = -1
            if (r2 == 0) goto L_0x04c9
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r0.peer
            int r2 = r2.user_id
            int r2 = -r2
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            int r2 = r10.indexOf(r2)
            if (r2 == r3) goto L_0x04af
            r10.remove(r2)
        L_0x04af:
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.peer
            int r3 = r3.user_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            boolean r3 = r10.contains(r3)
            if (r3 != 0) goto L_0x04c8
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.peer
            int r3 = r3.user_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r10.add(r3)
        L_0x04c8:
            goto L_0x04f7
        L_0x04c9:
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r0.peer
            int r2 = r2.user_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            int r2 = r10.indexOf(r2)
            if (r2 == r3) goto L_0x04da
            r10.remove(r2)
        L_0x04da:
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.peer
            int r3 = r3.user_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            boolean r3 = r10.contains(r3)
            if (r3 != 0) goto L_0x04f7
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.peer
            int r3 = r3.user_id
            int r3 = -r3
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r10.add(r3)
            goto L_0x04f7
        L_0x04f5:
            r13 = r44
        L_0x04f7:
            if (r26 != 0) goto L_0x0501
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r26 = r1
            goto L_0x0503
        L_0x0501:
            r1 = r26
        L_0x0503:
            r1.add(r11)
            r26 = r1
            r45 = r5
            r50 = r28
            r5 = r43
            r28 = r17
            goto L_0x17d3
        L_0x0512:
            r13 = r44
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewEncryptedMessage
            if (r0 == 0) goto L_0x05dd
            im.bclpbkiauv.messenger.SecretChatHelper r0 = r61.getSecretChatHelper()
            r1 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateNewEncryptedMessage r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateNewEncryptedMessage) r1
            im.bclpbkiauv.tgnet.TLRPC$EncryptedMessage r1 = r1.message
            java.util.ArrayList r0 = r0.decryptMessage(r1)
            if (r0 == 0) goto L_0x05cd
            boolean r1 = r0.isEmpty()
            if (r1 != 0) goto L_0x05cd
            r1 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateNewEncryptedMessage r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateNewEncryptedMessage) r1
            im.bclpbkiauv.tgnet.TLRPC$EncryptedMessage r1 = r1.message
            int r1 = r1.chat_id
            long r2 = (long) r1
            r4 = 32
            long r2 = r2 << r4
            if (r6 != 0) goto L_0x0540
            android.util.LongSparseArray r4 = new android.util.LongSparseArray
            r4.<init>()
            r6 = r4
        L_0x0540:
            java.lang.Object r4 = r6.get(r2)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            if (r4 != 0) goto L_0x0552
            java.util.ArrayList r21 = new java.util.ArrayList
            r21.<init>()
            r4 = r21
            r6.put(r2, r4)
        L_0x0552:
            r21 = 0
            r44 = r1
            int r1 = r0.size()
            r45 = r5
            r5 = r21
        L_0x055e:
            if (r5 >= r1) goto L_0x05c4
            java.lang.Object r21 = r0.get(r5)
            r46 = r0
            r0 = r21
            im.bclpbkiauv.tgnet.TLRPC$Message r0 = (im.bclpbkiauv.tgnet.TLRPC.Message) r0
            im.bclpbkiauv.messenger.ImageLoader.saveMessageThumbs(r0)
            if (r23 != 0) goto L_0x057b
            java.util.ArrayList r21 = new java.util.ArrayList
            r21.<init>()
            r60 = r21
            r21 = r1
            r1 = r60
            goto L_0x057f
        L_0x057b:
            r21 = r1
            r1 = r23
        L_0x057f:
            r1.add(r0)
            im.bclpbkiauv.messenger.MessageObject r23 = new im.bclpbkiauv.messenger.MessageObject
            r47 = r1
            int r1 = r14.currentAccount
            r48 = r6
            java.util.ArrayList<java.lang.Long> r6 = r14.createdDialogIds
            r49 = r9
            java.lang.Long r9 = java.lang.Long.valueOf(r2)
            boolean r39 = r6.contains(r9)
            r34 = r23
            r35 = r1
            r36 = r0
            r37 = r13
            r38 = r43
            r34.<init>((int) r35, (im.bclpbkiauv.tgnet.TLRPC.Message) r36, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.User>) r37, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.Chat>) r38, (boolean) r39)
            r1 = r23
            r4.add(r1)
            if (r22 != 0) goto L_0x05b0
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x05b2
        L_0x05b0:
            r6 = r22
        L_0x05b2:
            r6.add(r1)
            int r5 = r5 + 1
            r22 = r6
            r1 = r21
            r0 = r46
            r23 = r47
            r6 = r48
            r9 = r49
            goto L_0x055e
        L_0x05c4:
            r46 = r0
            r21 = r1
            r48 = r6
            r49 = r9
            goto L_0x05d3
        L_0x05cd:
            r46 = r0
            r45 = r5
            r49 = r9
        L_0x05d3:
            r50 = r28
            r5 = r43
            r9 = r49
            r28 = r17
            goto L_0x17d3
        L_0x05dd:
            r45 = r5
            r49 = r9
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateEncryptedChatTyping
            if (r0 == 0) goto L_0x06a0
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateEncryptedChatTyping r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateEncryptedChatTyping) r0
            int r1 = r0.chat_id
            r2 = 1
            im.bclpbkiauv.tgnet.TLRPC$EncryptedChat r1 = r14.getEncryptedChatDB(r1, r2)
            if (r1 == 0) goto L_0x0690
            int r2 = r0.chat_id
            long r2 = (long) r2
            r4 = 32
            long r2 = r2 << r4
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<im.bclpbkiauv.messenger.MessagesController$PrintingUser>> r4 = r14.printingUsers
            java.lang.Long r5 = java.lang.Long.valueOf(r2)
            java.lang.Object r4 = r4.get(r5)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            if (r4 != 0) goto L_0x0614
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r4 = r5
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<im.bclpbkiauv.messenger.MessagesController$PrintingUser>> r5 = r14.printingUsers
            java.lang.Long r9 = java.lang.Long.valueOf(r2)
            r5.put(r9, r4)
        L_0x0614:
            r5 = 0
            r9 = 0
            r21 = r0
            int r0 = r4.size()
        L_0x061c:
            if (r9 >= r0) goto L_0x064a
            java.lang.Object r35 = r4.get(r9)
            r36 = r0
            r0 = r35
            im.bclpbkiauv.messenger.MessagesController$PrintingUser r0 = (im.bclpbkiauv.messenger.MessagesController.PrintingUser) r0
            r37 = r2
            int r2 = r0.userId
            int r3 = r1.user_id
            if (r2 != r3) goto L_0x0641
            r5 = 1
            r2 = r28
            r0.lastTime = r2
            r28 = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_sendMessageTypingAction r5 = new im.bclpbkiauv.tgnet.TLRPC$TL_sendMessageTypingAction
            r5.<init>()
            r0.action = r5
            r5 = r28
            goto L_0x0650
        L_0x0641:
            r2 = r28
            int r9 = r9 + 1
            r0 = r36
            r2 = r37
            goto L_0x061c
        L_0x064a:
            r36 = r0
            r37 = r2
            r2 = r28
        L_0x0650:
            if (r5 != 0) goto L_0x0669
            im.bclpbkiauv.messenger.MessagesController$PrintingUser r0 = new im.bclpbkiauv.messenger.MessagesController$PrintingUser
            r0.<init>()
            int r9 = r1.user_id
            r0.userId = r9
            r0.lastTime = r2
            im.bclpbkiauv.tgnet.TLRPC$TL_sendMessageTypingAction r9 = new im.bclpbkiauv.tgnet.TLRPC$TL_sendMessageTypingAction
            r9.<init>()
            r0.action = r9
            r4.add(r0)
            r31 = 1
        L_0x0669:
            im.bclpbkiauv.tgnet.ConnectionsManager r0 = r61.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 - r66
            int r0 = java.lang.Math.abs(r0)
            r9 = 30
            if (r0 >= r9) goto L_0x068d
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r0 = r14.onlinePrivacy
            int r9 = r1.user_id
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            r28 = r1
            java.lang.Integer r1 = java.lang.Integer.valueOf(r66)
            r0.put(r9, r1)
            goto L_0x0696
        L_0x068d:
            r28 = r1
            goto L_0x0696
        L_0x0690:
            r21 = r0
            r2 = r28
            r28 = r1
        L_0x0696:
            r50 = r2
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x06a0:
            r50 = r28
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateEncryptedMessagesRead
            if (r0 == 0) goto L_0x06da
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateEncryptedMessagesRead r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateEncryptedMessagesRead) r0
            if (r20 != 0) goto L_0x06b2
            android.util.SparseIntArray r1 = new android.util.SparseIntArray
            r1.<init>()
            r9 = r1
            goto L_0x06b4
        L_0x06b2:
            r9 = r20
        L_0x06b4:
            int r1 = r0.chat_id
            int r2 = r0.max_date
            r9.put(r1, r2)
            r1 = r42
            if (r1 != 0) goto L_0x06c8
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r42 = r2
            r1 = r42
        L_0x06c8:
            r2 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateEncryptedMessagesRead r2 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateEncryptedMessagesRead) r2
            r1.add(r2)
            r42 = r1
            r20 = r9
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x06da:
            r1 = r42
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChatParticipantAdd
            if (r0 == 0) goto L_0x0709
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChatParticipantAdd r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChatParticipantAdd) r0
            im.bclpbkiauv.messenger.MessagesStorage r34 = r61.getMessagesStorage()
            int r2 = r0.chat_id
            int r3 = r0.user_id
            r37 = 0
            int r4 = r0.inviter_id
            int r5 = r0.version
            r35 = r2
            r36 = r3
            r38 = r4
            r39 = r5
            r34.updateChatInfo(r35, r36, r37, r38, r39)
            r42 = r1
            r28 = r17
            r5 = r43
            r17 = r8
            r43 = r10
            r10 = r7
            goto L_0x1307
        L_0x0709:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChatParticipantDelete
            if (r0 == 0) goto L_0x0734
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChatParticipantDelete r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChatParticipantDelete) r0
            im.bclpbkiauv.messenger.MessagesStorage r34 = r61.getMessagesStorage()
            int r2 = r0.chat_id
            int r3 = r0.user_id
            r37 = 1
            r38 = 0
            int r4 = r0.version
            r35 = r2
            r36 = r3
            r39 = r4
            r34.updateChatInfo(r35, r36, r37, r38, r39)
            r42 = r1
            r28 = r17
            r5 = r43
            r17 = r8
            r43 = r10
            r10 = r7
            goto L_0x1307
        L_0x0734:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDcOptions
            if (r0 != 0) goto L_0x12f5
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateConfig
            if (r0 == 0) goto L_0x0749
            r42 = r1
            r28 = r17
            r5 = r43
            r17 = r8
            r43 = r10
            r10 = r7
            goto L_0x1300
        L_0x0749:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateEncryption
            if (r0 == 0) goto L_0x0764
            im.bclpbkiauv.messenger.SecretChatHelper r0 = r61.getSecretChatHelper()
            r2 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateEncryption r2 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateEncryption) r2
            r0.processUpdateEncryption(r2, r13)
            r42 = r1
            r28 = r17
            r5 = r43
            r17 = r8
            r43 = r10
            r10 = r7
            goto L_0x1307
        L_0x0764:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserBlocked
            if (r0 == 0) goto L_0x0788
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserBlocked r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserBlocked) r0
            im.bclpbkiauv.messenger.MessagesStorage r2 = r61.getMessagesStorage()
            im.bclpbkiauv.messenger.DispatchQueue r2 = r2.getStorageQueue()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$G4lJspf2dsC7LMAzqSPeUMzFrCs r3 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$G4lJspf2dsC7LMAzqSPeUMzFrCs
            r3.<init>(r0)
            r2.postRunnable(r3)
            r42 = r1
            r28 = r17
            r5 = r43
            r17 = r8
            r43 = r10
            r10 = r7
            goto L_0x1307
        L_0x0788:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNotifySettings
            if (r0 == 0) goto L_0x07a7
            if (r26 != 0) goto L_0x0796
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0798
        L_0x0796:
            r0 = r26
        L_0x0798:
            r0.add(r11)
            r26 = r0
            r42 = r1
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x07a7:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateServiceNotification
            r28 = 1000(0x3e8, double:4.94E-321)
            if (r0 == 0) goto L_0x08b7
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateServiceNotification r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateServiceNotification) r0
            boolean r3 = r0.popup
            if (r3 == 0) goto L_0x07c8
            java.lang.String r3 = r0.message
            if (r3 == 0) goto L_0x07c8
            java.lang.String r3 = r0.message
            int r3 = r3.length()
            if (r3 <= 0) goto L_0x07c8
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$ZipUf_JUaiaLquOQbWbi1GKC7eI r3 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$ZipUf_JUaiaLquOQbWbi1GKC7eI
            r3.<init>(r0)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r3)
        L_0x07c8:
            int r3 = r0.flags
            r4 = 2
            r3 = r3 & r4
            if (r3 == 0) goto L_0x08ab
            java.lang.String r3 = r0.message
            java.lang.String r4 = "ErrorSendMessageTooFreq"
            boolean r3 = r3.equals(r4)
            if (r3 != 0) goto L_0x08ab
            im.bclpbkiauv.tgnet.TLRPC$TL_message r3 = new im.bclpbkiauv.tgnet.TLRPC$TL_message
            r3.<init>()
            im.bclpbkiauv.messenger.UserConfig r4 = r61.getUserConfig()
            int r4 = r4.getNewMessageId()
            r3.id = r4
            r3.local_id = r4
            im.bclpbkiauv.messenger.UserConfig r4 = r61.getUserConfig()
            r4.saveConfig(r2)
            r2 = 1
            r3.unread = r2
            r2 = 256(0x100, float:3.59E-43)
            r3.flags = r2
            int r2 = r0.inbox_date
            if (r2 == 0) goto L_0x0800
            int r2 = r0.inbox_date
            r3.date = r2
            goto L_0x0809
        L_0x0800:
            long r4 = java.lang.System.currentTimeMillis()
            long r4 = r4 / r28
            int r2 = (int) r4
            r3.date = r2
        L_0x0809:
            r2 = 777000(0xbdb28, float:1.088809E-39)
            r3.from_id = r2
            im.bclpbkiauv.tgnet.TLRPC$TL_peerUser r2 = new im.bclpbkiauv.tgnet.TLRPC$TL_peerUser
            r2.<init>()
            r3.to_id = r2
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r3.to_id
            im.bclpbkiauv.messenger.UserConfig r4 = r61.getUserConfig()
            int r4 = r4.getClientUserId()
            r2.user_id = r4
            r4 = 777000(0xbdb28, double:3.83889E-318)
            r3.dialog_id = r4
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r2 = r0.media
            if (r2 == 0) goto L_0x0834
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r2 = r0.media
            r3.media = r2
            int r2 = r3.flags
            r2 = r2 | 512(0x200, float:7.175E-43)
            r3.flags = r2
        L_0x0834:
            java.lang.String r2 = r0.message
            r3.message = r2
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r2 = r0.entities
            if (r2 == 0) goto L_0x0846
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r2 = r0.entities
            r3.entities = r2
            int r2 = r3.flags
            r2 = r2 | 128(0x80, float:1.794E-43)
            r3.flags = r2
        L_0x0846:
            if (r23 != 0) goto L_0x0850
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r23 = r2
            goto L_0x0852
        L_0x0850:
            r2 = r23
        L_0x0852:
            r2.add(r3)
            im.bclpbkiauv.messenger.MessageObject r4 = new im.bclpbkiauv.messenger.MessageObject
            int r5 = r14.currentAccount
            java.util.ArrayList<java.lang.Long> r9 = r14.createdDialogIds
            r21 = r0
            r42 = r1
            long r0 = r3.dialog_id
            java.lang.Long r0 = java.lang.Long.valueOf(r0)
            boolean r39 = r9.contains(r0)
            r34 = r4
            r35 = r5
            r36 = r3
            r37 = r13
            r38 = r43
            r34.<init>((int) r35, (im.bclpbkiauv.tgnet.TLRPC.Message) r36, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.User>) r37, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.Chat>) r38, (boolean) r39)
            r0 = r4
            if (r6 != 0) goto L_0x087f
            android.util.LongSparseArray r1 = new android.util.LongSparseArray
            r1.<init>()
            r6 = r1
        L_0x087f:
            long r4 = r3.dialog_id
            java.lang.Object r1 = r6.get(r4)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            if (r1 != 0) goto L_0x0894
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r1 = r4
            long r4 = r3.dialog_id
            r6.put(r4, r1)
        L_0x0894:
            r1.add(r0)
            if (r22 != 0) goto L_0x08a1
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r22 = r4
            goto L_0x08a3
        L_0x08a1:
            r4 = r22
        L_0x08a3:
            r4.add(r0)
            r23 = r2
            r22 = r4
            goto L_0x08af
        L_0x08ab:
            r21 = r0
            r42 = r1
        L_0x08af:
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x08b7:
            r42 = r1
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDialogPinned
            if (r0 == 0) goto L_0x08d6
            if (r26 != 0) goto L_0x08c7
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x08c9
        L_0x08c7:
            r0 = r26
        L_0x08c9:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x08d6:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePinnedDialogs
            if (r0 == 0) goto L_0x08f3
            if (r26 != 0) goto L_0x08e4
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x08e6
        L_0x08e4:
            r0 = r26
        L_0x08e6:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x08f3:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateFolderPeers
            if (r0 == 0) goto L_0x0924
            if (r26 != 0) goto L_0x0901
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0903
        L_0x0901:
            r0 = r26
        L_0x0903:
            r0.add(r11)
            r1 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateFolderPeers r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateFolderPeers) r1
            im.bclpbkiauv.messenger.MessagesStorage r34 = r61.getMessagesStorage()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$TL_folderPeer> r2 = r1.folder_peers
            r36 = 0
            r37 = 0
            r39 = 0
            r35 = r2
            r34.setDialogsFolderId(r35, r36, r37, r39)
            r26 = r0
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0924:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePrivacy
            if (r0 == 0) goto L_0x0941
            if (r26 != 0) goto L_0x0932
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0934
        L_0x0932:
            r0 = r26
        L_0x0934:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0941:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateWebPage
            if (r0 == 0) goto L_0x0965
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateWebPage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateWebPage) r0
            if (r19 != 0) goto L_0x0950
            android.util.LongSparseArray r1 = new android.util.LongSparseArray
            r1.<init>()
            goto L_0x0952
        L_0x0950:
            r1 = r19
        L_0x0952:
            im.bclpbkiauv.tgnet.TLRPC$WebPage r2 = r0.webpage
            long r2 = r2.id
            im.bclpbkiauv.tgnet.TLRPC$WebPage r4 = r0.webpage
            r1.put(r2, r4)
            r19 = r1
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0965:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelWebPage
            if (r0 == 0) goto L_0x0989
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChannelWebPage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelWebPage) r0
            if (r19 != 0) goto L_0x0974
            android.util.LongSparseArray r1 = new android.util.LongSparseArray
            r1.<init>()
            goto L_0x0976
        L_0x0974:
            r1 = r19
        L_0x0976:
            im.bclpbkiauv.tgnet.TLRPC$WebPage r2 = r0.webpage
            long r2 = r2.id
            im.bclpbkiauv.tgnet.TLRPC$WebPage r4 = r0.webpage
            r1.put(r2, r4)
            r19 = r1
            r28 = r17
            r5 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0989:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelTooLong
            java.lang.String r1 = " channelId = "
            if (r0 == 0) goto L_0x0a2d
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChannelTooLong r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelTooLong) r0
            boolean r2 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x09ad
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r11)
            r2.append(r1)
            int r1 = r0.channel_id
            r2.append(r1)
            java.lang.String r1 = r2.toString()
            im.bclpbkiauv.messenger.FileLog.d(r1)
        L_0x09ad:
            android.util.SparseIntArray r1 = r14.channelsPts
            int r2 = r0.channel_id
            int r1 = r1.get(r2)
            if (r1 != 0) goto L_0x0a0b
            im.bclpbkiauv.messenger.MessagesStorage r2 = r61.getMessagesStorage()
            int r5 = r0.channel_id
            int r1 = r2.getChannelPtsSync(r5)
            if (r1 != 0) goto L_0x0a01
            int r2 = r0.channel_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r5 = r43
            java.lang.Object r2 = r5.get(r2)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = (im.bclpbkiauv.tgnet.TLRPC.Chat) r2
            if (r2 == 0) goto L_0x09d7
            boolean r9 = r2.min
            if (r9 == 0) goto L_0x09e1
        L_0x09d7:
            int r9 = r0.channel_id
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = r14.getChat(r9)
        L_0x09e1:
            if (r2 == 0) goto L_0x09e7
            boolean r9 = r2.min
            if (r9 == 0) goto L_0x09f5
        L_0x09e7:
            im.bclpbkiauv.messenger.MessagesStorage r9 = r61.getMessagesStorage()
            int r3 = r0.channel_id
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = r9.getChatSync(r3)
            r3 = 1
            r14.putChat(r2, r3)
        L_0x09f5:
            if (r2 == 0) goto L_0x0a00
            boolean r3 = r2.min
            if (r3 != 0) goto L_0x0a00
            r3 = 0
            r14.loadUnknownChannel(r2, r3)
        L_0x0a00:
            goto L_0x0a0d
        L_0x0a01:
            r5 = r43
            android.util.SparseIntArray r2 = r14.channelsPts
            int r3 = r0.channel_id
            r2.put(r3, r1)
            goto L_0x0a0d
        L_0x0a0b:
            r5 = r43
        L_0x0a0d:
            if (r1 == 0) goto L_0x0a24
            int r2 = r0.flags
            r3 = 1
            r2 = r2 & r3
            if (r2 == 0) goto L_0x0a1f
            int r2 = r0.pts
            if (r2 <= r1) goto L_0x0a24
            int r2 = r0.channel_id
            r14.getChannelDifference(r2)
            goto L_0x0a24
        L_0x0a1f:
            int r2 = r0.channel_id
            r14.getChannelDifference(r2)
        L_0x0a24:
            r43 = r10
            r28 = r17
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x0a2d:
            r5 = r43
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateReadChannelInbox
            if (r0 == 0) goto L_0x0a97
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateReadChannelInbox r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateReadChannelInbox) r0
            int r1 = r0.max_id
            long r3 = (long) r1
            int r1 = r0.channel_id
            r43 = r10
            long r9 = (long) r1
            r1 = 32
            long r9 = r9 << r1
            long r3 = r3 | r9
            int r1 = r0.channel_id
            int r1 = -r1
            long r9 = (long) r1
            if (r15 != 0) goto L_0x0a4e
            im.bclpbkiauv.messenger.support.SparseLongArray r1 = new im.bclpbkiauv.messenger.support.SparseLongArray
            r1.<init>()
            r15 = r1
        L_0x0a4e:
            int r1 = r0.channel_id
            int r1 = -r1
            r15.put(r1, r3)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r14.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r9)
            java.lang.Object r1 = r1.get(r2)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x0a72
            im.bclpbkiauv.messenger.MessagesStorage r2 = r61.getMessagesStorage()
            r21 = r1
            r1 = 0
            int r1 = r2.getDialogReadMax(r1, r9)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            goto L_0x0a74
        L_0x0a72:
            r21 = r1
        L_0x0a74:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r14.dialogs_read_inbox_max
            r28 = r3
            java.lang.Long r3 = java.lang.Long.valueOf(r9)
            int r4 = r1.intValue()
            r21 = r1
            int r1 = r0.max_id
            int r1 = java.lang.Math.max(r4, r1)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r2.put(r3, r1)
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0a97:
            r43 = r10
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateReadChannelOutbox
            if (r0 == 0) goto L_0x0afd
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateReadChannelOutbox r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateReadChannelOutbox) r0
            int r1 = r0.max_id
            long r1 = (long) r1
            int r3 = r0.channel_id
            long r3 = (long) r3
            r9 = 32
            long r3 = r3 << r9
            long r1 = r1 | r3
            int r3 = r0.channel_id
            int r3 = -r3
            long r3 = (long) r3
            if (r8 != 0) goto L_0x0ab6
            im.bclpbkiauv.messenger.support.SparseLongArray r9 = new im.bclpbkiauv.messenger.support.SparseLongArray
            r9.<init>()
            r8 = r9
        L_0x0ab6:
            int r9 = r0.channel_id
            int r9 = -r9
            r8.put(r9, r1)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r9 = r14.dialogs_read_outbox_max
            java.lang.Long r10 = java.lang.Long.valueOf(r3)
            java.lang.Object r9 = r9.get(r10)
            java.lang.Integer r9 = (java.lang.Integer) r9
            if (r9 != 0) goto L_0x0ada
            im.bclpbkiauv.messenger.MessagesStorage r10 = r61.getMessagesStorage()
            r28 = r1
            r1 = 1
            int r2 = r10.getDialogReadMax(r1, r3)
            java.lang.Integer r9 = java.lang.Integer.valueOf(r2)
            goto L_0x0adc
        L_0x0ada:
            r28 = r1
        L_0x0adc:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r14.dialogs_read_outbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r3)
            int r10 = r9.intValue()
            r34 = r3
            int r3 = r0.max_id
            int r3 = java.lang.Math.max(r10, r3)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r1.put(r2, r3)
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0afd:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDeleteChannelMessages
            if (r0 == 0) goto L_0x0b49
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateDeleteChannelMessages r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateDeleteChannelMessages) r0
            boolean r2 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x0b1f
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r11)
            r2.append(r1)
            int r1 = r0.channel_id
            r2.append(r1)
            java.lang.String r1 = r2.toString()
            im.bclpbkiauv.messenger.FileLog.d(r1)
        L_0x0b1f:
            if (r12 != 0) goto L_0x0b27
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r12 = r1
        L_0x0b27:
            int r1 = r0.channel_id
            java.lang.Object r1 = r12.get(r1)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            if (r1 != 0) goto L_0x0b3c
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r1 = r2
            int r2 = r0.channel_id
            r12.put(r2, r1)
        L_0x0b3c:
            java.util.ArrayList<java.lang.Integer> r2 = r0.messages
            r1.addAll(r2)
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0b49:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChannel
            if (r0 == 0) goto L_0x0b84
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0b6b
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChannel r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChannel) r0
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r11)
            r2.append(r1)
            int r1 = r0.channel_id
            r2.append(r1)
            java.lang.String r1 = r2.toString()
            im.bclpbkiauv.messenger.FileLog.d(r1)
        L_0x0b6b:
            if (r26 != 0) goto L_0x0b75
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0b77
        L_0x0b75:
            r0 = r26
        L_0x0b77:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0b84:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelMessageViews
            if (r0 == 0) goto L_0x0bd7
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChannelMessageViews r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelMessageViews) r0
            boolean r2 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x0ba6
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r11)
            r2.append(r1)
            int r1 = r0.channel_id
            r2.append(r1)
            java.lang.String r1 = r2.toString()
            im.bclpbkiauv.messenger.FileLog.d(r1)
        L_0x0ba6:
            if (r18 != 0) goto L_0x0baf
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            r9 = r1
            goto L_0x0bb1
        L_0x0baf:
            r9 = r18
        L_0x0bb1:
            int r1 = r0.channel_id
            java.lang.Object r1 = r9.get(r1)
            android.util.SparseIntArray r1 = (android.util.SparseIntArray) r1
            if (r1 != 0) goto L_0x0bc6
            android.util.SparseIntArray r2 = new android.util.SparseIntArray
            r2.<init>()
            r1 = r2
            int r2 = r0.channel_id
            r9.put(r2, r1)
        L_0x0bc6:
            int r2 = r0.id
            int r3 = r0.views
            r1.put(r2, r3)
            r18 = r9
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0bd7:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChatParticipantAdmin
            if (r0 == 0) goto L_0x0bfe
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChatParticipantAdmin r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChatParticipantAdmin) r0
            im.bclpbkiauv.messenger.MessagesStorage r34 = r61.getMessagesStorage()
            int r1 = r0.chat_id
            int r2 = r0.user_id
            r37 = 2
            boolean r3 = r0.is_admin
            int r4 = r0.version
            r35 = r1
            r36 = r2
            r38 = r3
            r39 = r4
            r34.updateChatInfo(r35, r36, r37, r38, r39)
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0bfe:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChatDefaultBannedRights
            if (r0 == 0) goto L_0x0c38
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChatDefaultBannedRights r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChatDefaultBannedRights) r0
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            if (r1 == 0) goto L_0x0c10
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            goto L_0x0c14
        L_0x0c10:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
        L_0x0c14:
            im.bclpbkiauv.messenger.MessagesStorage r2 = r61.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r3 = r0.default_banned_rights
            int r4 = r0.version
            r2.updateChatDefaultBannedRights(r1, r3, r4)
            if (r26 != 0) goto L_0x0c29
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r26 = r2
            goto L_0x0c2b
        L_0x0c29:
            r2 = r26
        L_0x0c2b:
            r2.add(r11)
            r26 = r2
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0c38:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateStickerSets
            if (r0 == 0) goto L_0x0c55
            if (r26 != 0) goto L_0x0c46
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0c48
        L_0x0c46:
            r0 = r26
        L_0x0c48:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0c55:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateStickerSetsOrder
            if (r0 == 0) goto L_0x0c72
            if (r26 != 0) goto L_0x0c63
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0c65
        L_0x0c63:
            r0 = r26
        L_0x0c65:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0c72:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewStickerSet
            if (r0 == 0) goto L_0x0c8f
            if (r26 != 0) goto L_0x0c80
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0c82
        L_0x0c80:
            r0 = r26
        L_0x0c82:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0c8f:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDraftMessage
            if (r0 == 0) goto L_0x0cac
            if (r26 != 0) goto L_0x0c9d
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0c9f
        L_0x0c9d:
            r0 = r26
        L_0x0c9f:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0cac:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateSavedGifs
            if (r0 == 0) goto L_0x0cc9
            if (r26 != 0) goto L_0x0cba
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0cbc
        L_0x0cba:
            r0 = r26
        L_0x0cbc:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0cc9:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateEditChannelMessage
            if (r0 != 0) goto L_0x1117
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateEditMessage
            if (r0 == 0) goto L_0x0cd5
            r4 = r17
            goto L_0x1119
        L_0x0cd5:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelPinnedMessage
            if (r0 == 0) goto L_0x0d09
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChannelPinnedMessage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelPinnedMessage) r0
            boolean r2 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x0cf7
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r11)
            r2.append(r1)
            int r1 = r0.channel_id
            r2.append(r1)
            java.lang.String r1 = r2.toString()
            im.bclpbkiauv.messenger.FileLog.d(r1)
        L_0x0cf7:
            im.bclpbkiauv.messenger.MessagesStorage r1 = r61.getMessagesStorage()
            int r2 = r0.channel_id
            int r3 = r0.id
            r1.updateChatPinnedMessage(r2, r3)
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0d09:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChatPinnedMessage
            if (r0 == 0) goto L_0x0d22
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChatPinnedMessage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChatPinnedMessage) r0
            im.bclpbkiauv.messenger.MessagesStorage r1 = r61.getMessagesStorage()
            int r2 = r0.chat_id
            int r3 = r0.id
            r1.updateChatPinnedMessage(r2, r3)
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0d22:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPinnedMessage
            if (r0 == 0) goto L_0x0d3b
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserPinnedMessage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPinnedMessage) r0
            im.bclpbkiauv.messenger.MessagesStorage r1 = r61.getMessagesStorage()
            int r2 = r0.user_id
            int r3 = r0.id
            r1.updateUserPinnedMessage(r2, r3)
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0d3b:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateReadFeaturedStickers
            if (r0 == 0) goto L_0x0d58
            if (r26 != 0) goto L_0x0d49
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0d4b
        L_0x0d49:
            r0 = r26
        L_0x0d4b:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0d58:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePhoneCall
            if (r0 == 0) goto L_0x0d75
            if (r26 != 0) goto L_0x0d66
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0d68
        L_0x0d66:
            r0 = r26
        L_0x0d68:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0d75:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateLangPack
            if (r0 == 0) goto L_0x0d8b
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateLangPack r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateLangPack) r0
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$5wAHrXwcBkykvg70fhk-6fHimkU r1 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$5wAHrXwcBkykvg70fhk-6fHimkU
            r1.<init>(r0)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r1)
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0d8b:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateLangPackTooLong
            if (r0 == 0) goto L_0x0da4
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateLangPackTooLong r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateLangPackTooLong) r0
            im.bclpbkiauv.messenger.LocaleController r1 = im.bclpbkiauv.messenger.LocaleController.getInstance()
            int r2 = r14.currentAccount
            java.lang.String r3 = r0.lang_code
            r1.reloadCurrentRemoteLocale(r2, r3)
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0da4:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateFavedStickers
            if (r0 == 0) goto L_0x0dc1
            if (r26 != 0) goto L_0x0db2
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0db4
        L_0x0db2:
            r0 = r26
        L_0x0db4:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0dc1:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateContactsReset
            if (r0 == 0) goto L_0x0dde
            if (r26 != 0) goto L_0x0dcf
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0dd1
        L_0x0dcf:
            r0 = r26
        L_0x0dd1:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0dde:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelAvailableMessages
            if (r0 == 0) goto L_0x0e0f
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChannelAvailableMessages r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChannelAvailableMessages) r0
            r2 = r41
            if (r2 != 0) goto L_0x0df2
            android.util.SparseIntArray r1 = new android.util.SparseIntArray
            r1.<init>()
            r41 = r1
            r2 = r41
        L_0x0df2:
            int r1 = r0.channel_id
            int r1 = r2.get(r1)
            if (r1 == 0) goto L_0x0dfe
            int r3 = r0.available_min_id
            if (r1 >= r3) goto L_0x0e05
        L_0x0dfe:
            int r3 = r0.channel_id
            int r4 = r0.available_min_id
            r2.put(r3, r4)
        L_0x0e05:
            r41 = r2
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0e0f:
            r2 = r41
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDialogUnreadMark
            if (r0 == 0) goto L_0x0e30
            if (r26 != 0) goto L_0x0e1f
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0e21
        L_0x0e1f:
            r0 = r26
        L_0x0e21:
            r0.add(r11)
            r26 = r0
            r41 = r2
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0e30:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateMessagePoll
            if (r0 == 0) goto L_0x0e83
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateMessagePoll r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateMessagePoll) r0
            im.bclpbkiauv.messenger.SendMessagesHelper r1 = r61.getSendMessagesHelper()
            long r3 = r0.poll_id
            long r3 = r1.getVoteSendTime(r3)
            long r9 = android.os.SystemClock.uptimeMillis()
            long r9 = r9 - r3
            long r9 = java.lang.Math.abs(r9)
            r28 = 600(0x258, double:2.964E-321)
            int r1 = (r9 > r28 ? 1 : (r9 == r28 ? 0 : -1))
            if (r1 >= 0) goto L_0x0e59
            r41 = r2
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0e59:
            im.bclpbkiauv.messenger.MessagesStorage r1 = r61.getMessagesStorage()
            long r9 = r0.poll_id
            r41 = r2
            im.bclpbkiauv.tgnet.TLRPC$TL_poll r2 = r0.poll
            r28 = r3
            im.bclpbkiauv.tgnet.TLRPC$TL_pollResults r3 = r0.results
            r1.updateMessagePollResults(r9, r2, r3)
            if (r26 != 0) goto L_0x0e74
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r26 = r1
            goto L_0x0e76
        L_0x0e74:
            r1 = r26
        L_0x0e76:
            r1.add(r11)
            r26 = r1
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0e83:
            r41 = r2
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateMessageReactions
            if (r0 == 0) goto L_0x0edb
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateMessageReactions r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateMessageReactions) r0
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            if (r1 == 0) goto L_0x0e99
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            int r1 = -r1
            long r1 = (long) r1
            goto L_0x0eab
        L_0x0e99:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            if (r1 == 0) goto L_0x0ea6
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            int r1 = -r1
            long r1 = (long) r1
            goto L_0x0eab
        L_0x0ea6:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.user_id
            long r1 = (long) r1
        L_0x0eab:
            im.bclpbkiauv.messenger.MessagesStorage r34 = r61.getMessagesStorage()
            int r3 = r0.msg_id
            im.bclpbkiauv.tgnet.TLRPC$Peer r4 = r0.peer
            int r4 = r4.channel_id
            im.bclpbkiauv.tgnet.TLRPC$TL_messageReactions r9 = r0.reactions
            r35 = r1
            r37 = r3
            r38 = r4
            r39 = r9
            r34.updateMessageReactions(r35, r37, r38, r39)
            if (r26 != 0) goto L_0x0ecc
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r26 = r3
            goto L_0x0ece
        L_0x0ecc:
            r3 = r26
        L_0x0ece:
            r3.add(r11)
            r26 = r3
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0edb:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePeerLocated
            if (r0 == 0) goto L_0x0ef8
            if (r26 != 0) goto L_0x0ee9
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0eeb
        L_0x0ee9:
            r0 = r26
        L_0x0eeb:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0ef8:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateTheme
            if (r0 == 0) goto L_0x0f15
            if (r26 != 0) goto L_0x0f06
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r26 = r0
            goto L_0x0f08
        L_0x0f06:
            r0 = r26
        L_0x0f08:
            r0.add(r11)
            r26 = r0
            r28 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x0f15:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCContacts.UpdateContactApplyRequested
            if (r0 == 0) goto L_0x0f20
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0f20:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserMomentStateV1
            if (r0 == 0) goto L_0x0f40
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserMomentStateV1 r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserMomentStateV1) r0
            if (r0 == 0) goto L_0x0f39
            int r1 = r0.user_id
            if (r1 == 0) goto L_0x0f39
            int r1 = r0.type
            if (r1 == 0) goto L_0x0f39
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$z7oSQXyjKn9auBVK-xK1G1dPw6k r1 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$z7oSQXyjKn9auBVK-xK1G1dPw6k
            r1.<init>(r0)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x0f39:
            r10 = r7
            r28 = r17
            r17 = r8
            goto L_0x1307
        L_0x0f40:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallRequested
            if (r0 == 0) goto L_0x1026
            r1 = r11
            im.bclpbkiauv.tgnet.TLRPCCall$TL_UpdateMeetCallRequested r1 = (im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallRequested) r1
            if (r1 == 0) goto L_0x101d
            int r0 = r1.admin_id
            im.bclpbkiauv.messenger.UserConfig r2 = r61.getUserConfig()
            int r2 = r2.getClientUserId()
            if (r0 == r2) goto L_0x101d
            long r2 = java.lang.System.currentTimeMillis()
            long r2 = r2 / r28
            int r0 = r1.date
            long r9 = (long) r0
            long r2 = r2 - r9
            r9 = 35
            int r0 = (r2 > r9 ? 1 : (r2 == r9 ? 0 : -1))
            if (r0 >= 0) goto L_0x101d
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0f7f
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "MessagesController call ===> receive video call , id = "
            r0.append(r2)
            java.lang.String r2 = r1.id
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x0f7f:
            r0 = 0
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$InputPeer> r2 = r1.participant_id
            if (r2 == 0) goto L_0x0fae
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$InputPeer> r2 = r1.participant_id
            java.util.Iterator r2 = r2.iterator()
        L_0x0f8a:
            boolean r3 = r2.hasNext()
            if (r3 == 0) goto L_0x0fae
            java.lang.Object r3 = r2.next()
            im.bclpbkiauv.tgnet.TLRPC$InputPeer r3 = (im.bclpbkiauv.tgnet.TLRPC.InputPeer) r3
            int r4 = r3.user_id
            int r9 = im.bclpbkiauv.messenger.UserConfig.selectedAccount
            im.bclpbkiauv.messenger.AccountInstance r9 = im.bclpbkiauv.messenger.AccountInstance.getInstance(r9)
            im.bclpbkiauv.messenger.UserConfig r9 = r9.getUserConfig()
            im.bclpbkiauv.tgnet.TLRPC$User r9 = r9.getCurrentUser()
            int r9 = r9.id
            if (r4 != r9) goto L_0x0fad
            r0 = 1
            r2 = r0
            goto L_0x0faf
        L_0x0fad:
            goto L_0x0f8a
        L_0x0fae:
            r2 = r0
        L_0x0faf:
            java.lang.String r0 = r1.id
            r4 = r17
            java.lang.Object r0 = r4.get(r0)
            if (r0 == 0) goto L_0x101f
            if (r2 == 0) goto L_0x101f
            int r0 = r1.flags
            r3 = 32
            r0 = r0 & r3
            if (r0 == 0) goto L_0x0fc5
            r37 = 1
            goto L_0x0fc7
        L_0x0fc5:
            r37 = 0
        L_0x0fc7:
            r3 = r37
            android.content.Intent r0 = new android.content.Intent
            android.content.Context r9 = im.bclpbkiauv.messenger.ApplicationLoader.applicationContext
            java.lang.Class<im.bclpbkiauv.ui.hui.visualcall.VisualCallReceiveService> r10 = im.bclpbkiauv.ui.hui.visualcall.VisualCallReceiveService.class
            r0.<init>(r9, r10)
            r9 = r0
            java.lang.String r0 = "video"
            r9.putExtra(r0, r3)
            java.lang.String r0 = r1.id
            java.lang.String r10 = "id"
            r9.putExtra(r10, r0)
            int r0 = r1.admin_id
            java.lang.String r10 = "admin_id"
            r9.putExtra(r10, r0)
            java.lang.String r0 = r1.appid
            java.lang.String r10 = "app_id"
            r9.putExtra(r10, r0)
            java.lang.String r0 = r1.token
            java.lang.String r10 = "token"
            r9.putExtra(r10, r0)
            java.util.ArrayList<java.lang.String> r0 = r1.gslb
            java.lang.String r10 = "gslb"
            r9.putStringArrayListExtra(r10, r0)
            im.bclpbkiauv.tgnet.TLRPC$TL_dataJSON r0 = r1.data
            java.lang.String r0 = r0.data
            java.lang.String r10 = "json"
            r9.putExtra(r10, r0)
            int r0 = android.os.Build.VERSION.SDK_INT     // Catch:{ all -> 0x1018 }
            r10 = 26
            if (r0 < r10) goto L_0x1012
            android.content.Context r0 = im.bclpbkiauv.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x1018 }
            r0.startForegroundService(r9)     // Catch:{ all -> 0x1018 }
            goto L_0x1017
        L_0x1012:
            android.content.Context r0 = im.bclpbkiauv.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x1018 }
            r0.startService(r9)     // Catch:{ all -> 0x1018 }
        L_0x1017:
            goto L_0x101f
        L_0x1018:
            r0 = move-exception
            im.bclpbkiauv.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x101f
        L_0x101d:
            r4 = r17
        L_0x101f:
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x1026:
            r4 = r17
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallAccepted
            if (r0 == 0) goto L_0x1044
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x1035
            java.lang.String r0 = "MessagesController call ===> 对方已接受请求"
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x1035:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$617px-4BEtrL-5sMnLXnXGO0UAE r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$617px-4BEtrL-5sMnLXnXGO0UAE
            r0.<init>()
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x1044:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallDiscarded
            if (r0 == 0) goto L_0x107e
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPCCall$TL_UpdateMeetCallDiscarded r0 = (im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallDiscarded) r0
            boolean r1 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x106f
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "MessagesController call ===> 收到挂断反馈 , d.id = "
            r1.append(r2)
            java.lang.String r2 = r0.id
            r1.append(r2)
            java.lang.String r2 = " d.duration = "
            r1.append(r2)
            int r2 = r0.duration
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            im.bclpbkiauv.messenger.FileLog.d(r1)
        L_0x106f:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$R8HKm5bWJXb5RjWbzp1EzZBhluw r1 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$R8HKm5bWJXb5RjWbzp1EzZBhluw
            r1.<init>()
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r1)
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x107e:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCall
            if (r0 == 0) goto L_0x109a
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x108b
            java.lang.String r0 = "MessagesController call ===> 准备进入视频通道"
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x108b:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$VNiKzGmY4Ms7w8CTWRUkui1VBpI r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$VNiKzGmY4Ms7w8CTWRUkui1VBpI
            r0.<init>()
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x109a:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCContacts.UpdateResetContactsApplyUnread
            if (r0 == 0) goto L_0x10b1
            r0 = 0
            r14.handleUpdatesContactsApply(r0)
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$8FMqgiaMcuR3DVrBy141CUq7cPA r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$8FMqgiaMcuR3DVrBy141CUq7cPA
            r0.<init>()
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x10b1:
            r0 = 0
            boolean r1 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCContacts.UpdateRegetContactsApplies
            if (r1 == 0) goto L_0x10c1
            r1 = 1
            r14.getContactsApplyDifferenceV2(r1, r0)
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x10c1:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetCallWaiting
            if (r0 == 0) goto L_0x10d6
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$TR0CDkJV8l3jKBe9wks9mlpr8vM r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$TR0CDkJV8l3jKBe9wks9mlpr8vM
            r0.<init>()
            r1 = 2000(0x7d0, double:9.88E-321)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0, r1)
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x10d6:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCCall.TL_UpdateMeetChangeCall
            if (r0 == 0) goto L_0x10f2
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x10e3
            java.lang.String r0 = "MessagesController call ===> 对方切换到语音"
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x10e3:
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$XN40wRMd5WE0yYfyBEOehf5n2U4 r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$XN40wRMd5WE0yYfyBEOehf5n2U4
            r0.<init>()
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x10f2:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCContacts.CL_user_updateUserFull
            if (r0 == 0) goto L_0x10fd
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x10fd:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPCContacts.TL_updateContactGroups
            if (r0 == 0) goto L_0x1110
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$T-5sMVWtitZB6eCa-M1Sx605naw r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$T-5sMVWtitZB6eCa-M1Sx605naw
            r0.<init>()
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x1110:
            r28 = r4
            r10 = r7
            r17 = r8
            goto L_0x1307
        L_0x1117:
            r4 = r17
        L_0x1119:
            im.bclpbkiauv.messenger.UserConfig r0 = r61.getUserConfig()
            int r0 = r0.getClientUserId()
            boolean r1 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateEditChannelMessage
            if (r1 == 0) goto L_0x1173
            r1 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateEditChannelMessage r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateEditChannelMessage) r1
            im.bclpbkiauv.tgnet.TLRPC$Message r1 = r1.message
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r2 = r1.media
            boolean r2 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageMediaShare
            if (r2 == 0) goto L_0x1138
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$c0rcRHExsIiPhT0OHTWglQFTGbs r2 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$c0rcRHExsIiPhT0OHTWglQFTGbs
            r2.<init>(r1)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r2)
        L_0x1138:
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.to_id
            int r2 = r2.channel_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            java.lang.Object r2 = r5.get(r2)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = (im.bclpbkiauv.tgnet.TLRPC.Chat) r2
            if (r2 != 0) goto L_0x1154
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r1.to_id
            int r3 = r3.channel_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = r14.getChat(r3)
        L_0x1154:
            if (r2 != 0) goto L_0x1166
            im.bclpbkiauv.messenger.MessagesStorage r3 = r61.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$Peer r9 = r1.to_id
            int r9 = r9.channel_id
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = r3.getChatSync(r9)
            r3 = 1
            r14.putChat(r2, r3)
        L_0x1166:
            if (r2 == 0) goto L_0x1172
            boolean r3 = r2.megagroup
            if (r3 == 0) goto L_0x1172
            int r3 = r1.flags
            r3 = r3 | r21
            r1.flags = r3
        L_0x1172:
            goto L_0x1187
        L_0x1173:
            r1 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateEditMessage r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateEditMessage) r1
            im.bclpbkiauv.tgnet.TLRPC$Message r1 = r1.message
            long r2 = r1.dialog_id
            long r9 = (long) r0
            int r17 = (r2 > r9 ? 1 : (r2 == r9 ? 0 : -1))
            if (r17 != 0) goto L_0x1187
            r2 = 0
            r1.unread = r2
            r1.media_unread = r2
            r2 = 1
            r1.out = r2
        L_0x1187:
            boolean r2 = r1.out
            if (r2 != 0) goto L_0x119a
            int r2 = r1.from_id
            im.bclpbkiauv.messenger.UserConfig r3 = r61.getUserConfig()
            int r3 = r3.getClientUserId()
            if (r2 != r3) goto L_0x119a
            r2 = 1
            r1.out = r2
        L_0x119a:
            if (r65 != 0) goto L_0x1202
            r2 = 0
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r3 = r1.entities
            int r3 = r3.size()
        L_0x11a3:
            if (r2 >= r3) goto L_0x11fd
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r9 = r1.entities
            java.lang.Object r9 = r9.get(r2)
            im.bclpbkiauv.tgnet.TLRPC$MessageEntity r9 = (im.bclpbkiauv.tgnet.TLRPC.MessageEntity) r9
            boolean r10 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageEntityMentionName
            if (r10 == 0) goto L_0x11f2
            r10 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_messageEntityMentionName r10 = (im.bclpbkiauv.tgnet.TLRPC.TL_messageEntityMentionName) r10
            int r10 = r10.user_id
            r17 = r3
            java.lang.Integer r3 = java.lang.Integer.valueOf(r10)
            java.lang.Object r3 = r13.get(r3)
            im.bclpbkiauv.tgnet.TLRPC$User r3 = (im.bclpbkiauv.tgnet.TLRPC.User) r3
            if (r3 == 0) goto L_0x11cb
            r28 = r4
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x11d5
            goto L_0x11cd
        L_0x11cb:
            r28 = r4
        L_0x11cd:
            java.lang.Integer r4 = java.lang.Integer.valueOf(r10)
            im.bclpbkiauv.tgnet.TLRPC$User r3 = r14.getUser(r4)
        L_0x11d5:
            if (r3 == 0) goto L_0x11db
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x11ee
        L_0x11db:
            im.bclpbkiauv.messenger.MessagesStorage r4 = r61.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$User r3 = r4.getUserSync(r10)
            if (r3 == 0) goto L_0x11ea
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x11ea
            r3 = 0
        L_0x11ea:
            r4 = 1
            r14.putUser(r3, r4)
        L_0x11ee:
            if (r3 != 0) goto L_0x11f6
            r4 = 0
            return r4
        L_0x11f2:
            r17 = r3
            r28 = r4
        L_0x11f6:
            int r2 = r2 + 1
            r3 = r17
            r4 = r28
            goto L_0x11a3
        L_0x11fd:
            r17 = r3
            r28 = r4
            goto L_0x1204
        L_0x1202:
            r28 = r4
        L_0x1204:
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.to_id
            int r2 = r2.chat_id
            if (r2 == 0) goto L_0x1213
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.to_id
            int r2 = r2.chat_id
            int r2 = -r2
            long r2 = (long) r2
            r1.dialog_id = r2
            goto L_0x123d
        L_0x1213:
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.to_id
            int r2 = r2.channel_id
            if (r2 == 0) goto L_0x1222
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.to_id
            int r2 = r2.channel_id
            int r2 = -r2
            long r2 = (long) r2
            r1.dialog_id = r2
            goto L_0x123d
        L_0x1222:
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.to_id
            int r2 = r2.user_id
            im.bclpbkiauv.messenger.UserConfig r3 = r61.getUserConfig()
            int r3 = r3.getClientUserId()
            if (r2 != r3) goto L_0x1236
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.to_id
            int r3 = r1.from_id
            r2.user_id = r3
        L_0x1236:
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.to_id
            int r2 = r2.user_id
            long r2 = (long) r2
            r1.dialog_id = r2
        L_0x123d:
            boolean r2 = r1.out
            if (r2 == 0) goto L_0x1244
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r14.dialogs_read_outbox_max
            goto L_0x1246
        L_0x1244:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r14.dialogs_read_inbox_max
        L_0x1246:
            long r3 = r1.dialog_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            java.lang.Object r3 = r2.get(r3)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r3 != 0) goto L_0x1271
            im.bclpbkiauv.messenger.MessagesStorage r4 = r61.getMessagesStorage()
            boolean r9 = r1.out
            r10 = r7
            r17 = r8
            long r7 = r1.dialog_id
            int r4 = r4.getDialogReadMax(r9, r7)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r4)
            long r7 = r1.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r7)
            r2.put(r4, r3)
            goto L_0x1274
        L_0x1271:
            r10 = r7
            r17 = r8
        L_0x1274:
            int r4 = r3.intValue()
            int r7 = r1.id
            if (r4 >= r7) goto L_0x127e
            r4 = 1
            goto L_0x127f
        L_0x127e:
            r4 = 0
        L_0x127f:
            r1.unread = r4
            long r7 = r1.dialog_id
            r4 = r2
            r9 = r3
            long r2 = (long) r0
            int r21 = (r7 > r2 ? 1 : (r7 == r2 ? 0 : -1))
            if (r21 != 0) goto L_0x1292
            r2 = 1
            r1.out = r2
            r2 = 0
            r1.unread = r2
            r1.media_unread = r2
        L_0x1292:
            boolean r2 = r1.out
            if (r2 == 0) goto L_0x12a0
            java.lang.String r2 = r1.message
            if (r2 != 0) goto L_0x12a0
            java.lang.String r2 = ""
            r1.message = r2
            r1.attachPath = r2
        L_0x12a0:
            im.bclpbkiauv.messenger.ImageLoader.saveMessageThumbs(r1)
            im.bclpbkiauv.messenger.MessageObject r2 = new im.bclpbkiauv.messenger.MessageObject
            int r3 = r14.currentAccount
            java.util.ArrayList<java.lang.Long> r7 = r14.createdDialogIds
            r21 = r9
            long r8 = r1.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            boolean r39 = r7.contains(r8)
            r34 = r2
            r35 = r3
            r36 = r1
            r37 = r13
            r38 = r5
            r34.<init>((int) r35, (im.bclpbkiauv.tgnet.TLRPC.Message) r36, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.User>) r37, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.Chat>) r38, (boolean) r39)
            if (r16 != 0) goto L_0x12cb
            android.util.LongSparseArray r3 = new android.util.LongSparseArray
            r3.<init>()
            r8 = r3
            goto L_0x12cd
        L_0x12cb:
            r8 = r16
        L_0x12cd:
            r3 = r8
            r9 = r8
            long r7 = r1.dialog_id
            java.lang.Object r7 = r3.get(r7)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            if (r7 != 0) goto L_0x12e7
            java.util.ArrayList r8 = new java.util.ArrayList
            r8.<init>()
            r7 = r8
            r16 = r9
            long r8 = r1.dialog_id
            r3.put(r8, r7)
            goto L_0x12e9
        L_0x12e7:
            r16 = r9
        L_0x12e9:
            r7.add(r2)
            r7 = r10
            r8 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x12f5:
            r42 = r1
            r28 = r17
            r5 = r43
            r17 = r8
            r43 = r10
            r10 = r7
        L_0x1300:
            im.bclpbkiauv.tgnet.ConnectionsManager r0 = r61.getConnectionsManager()
            r0.updateDcSettings()
        L_0x1307:
            r7 = r10
            r8 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x1310:
            r45 = r5
            r49 = r9
            r50 = r28
            r5 = r43
            r13 = r44
            r43 = r10
            r28 = r17
            r10 = r7
            r17 = r8
        L_0x1321:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserTyping
            if (r0 == 0) goto L_0x132e
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserTyping r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserTyping) r0
            int r1 = r0.user_id
            im.bclpbkiauv.tgnet.TLRPC$SendMessageAction r2 = r0.action
            r0 = 0
            goto L_0x133a
        L_0x132e:
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChatUserTyping r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChatUserTyping) r0
            int r1 = r0.chat_id
            int r2 = r0.user_id
            im.bclpbkiauv.tgnet.TLRPC$SendMessageAction r3 = r0.action
            r0 = r1
            r1 = r2
            r2 = r3
        L_0x133a:
            im.bclpbkiauv.messenger.UserConfig r3 = r61.getUserConfig()
            int r3 = r3.getClientUserId()
            if (r1 == r3) goto L_0x142c
            int r3 = -r0
            long r3 = (long) r3
            r7 = 0
            int r9 = (r3 > r7 ? 1 : (r3 == r7 ? 0 : -1))
            if (r9 != 0) goto L_0x134d
            long r3 = (long) r1
        L_0x134d:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<im.bclpbkiauv.messenger.MessagesController$PrintingUser>> r7 = r14.printingUsers
            java.lang.Long r8 = java.lang.Long.valueOf(r3)
            java.lang.Object r7 = r7.get(r8)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            boolean r8 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_sendMessageCancelAction
            if (r8 == 0) goto L_0x13a4
            if (r7 == 0) goto L_0x139c
            r8 = 0
            int r9 = r7.size()
        L_0x1364:
            if (r8 >= r9) goto L_0x1383
            java.lang.Object r21 = r7.get(r8)
            r29 = r0
            r0 = r21
            im.bclpbkiauv.messenger.MessagesController$PrintingUser r0 = (im.bclpbkiauv.messenger.MessagesController.PrintingUser) r0
            r21 = r9
            int r9 = r0.userId
            if (r9 != r1) goto L_0x137c
            r7.remove(r8)
            r31 = 1
            goto L_0x1387
        L_0x137c:
            int r8 = r8 + 1
            r9 = r21
            r0 = r29
            goto L_0x1364
        L_0x1383:
            r29 = r0
            r21 = r9
        L_0x1387:
            boolean r0 = r7.isEmpty()
            if (r0 == 0) goto L_0x1396
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<im.bclpbkiauv.messenger.MessagesController$PrintingUser>> r0 = r14.printingUsers
            java.lang.Long r8 = java.lang.Long.valueOf(r3)
            r0.remove(r8)
        L_0x1396:
            r35 = r3
            r3 = r50
            goto L_0x140c
        L_0x139c:
            r29 = r0
            r35 = r3
            r3 = r50
            goto L_0x140c
        L_0x13a4:
            r29 = r0
            if (r7 != 0) goto L_0x13b7
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r7 = r0
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<im.bclpbkiauv.messenger.MessagesController$PrintingUser>> r0 = r14.printingUsers
            java.lang.Long r8 = java.lang.Long.valueOf(r3)
            r0.put(r8, r7)
        L_0x13b7:
            r0 = 0
            java.util.Iterator r8 = r7.iterator()
        L_0x13bc:
            boolean r9 = r8.hasNext()
            if (r9 == 0) goto L_0x13f4
            java.lang.Object r9 = r8.next()
            im.bclpbkiauv.messenger.MessagesController$PrintingUser r9 = (im.bclpbkiauv.messenger.MessagesController.PrintingUser) r9
            r21 = r0
            int r0 = r9.userId
            if (r0 != r1) goto L_0x13eb
            r0 = 1
            r35 = r3
            r3 = r50
            r9.lastTime = r3
            im.bclpbkiauv.tgnet.TLRPC$SendMessageAction r8 = r9.action
            java.lang.Class r8 = r8.getClass()
            r21 = r0
            java.lang.Class r0 = r2.getClass()
            if (r8 == r0) goto L_0x13e6
            r0 = 1
            r31 = r0
        L_0x13e6:
            r9.action = r2
            r0 = r21
            goto L_0x13fa
        L_0x13eb:
            r35 = r3
            r3 = r50
            r0 = r21
            r3 = r35
            goto L_0x13bc
        L_0x13f4:
            r21 = r0
            r35 = r3
            r3 = r50
        L_0x13fa:
            if (r0 != 0) goto L_0x140c
            im.bclpbkiauv.messenger.MessagesController$PrintingUser r8 = new im.bclpbkiauv.messenger.MessagesController$PrintingUser
            r8.<init>()
            r8.userId = r1
            r8.lastTime = r3
            r8.action = r2
            r7.add(r8)
            r31 = 1
        L_0x140c:
            im.bclpbkiauv.tgnet.ConnectionsManager r0 = r61.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 - r66
            int r0 = java.lang.Math.abs(r0)
            r8 = 30
            if (r0 >= r8) goto L_0x1430
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r0 = r14.onlinePrivacy
            java.lang.Integer r8 = java.lang.Integer.valueOf(r1)
            java.lang.Integer r9 = java.lang.Integer.valueOf(r66)
            r0.put(r8, r9)
            goto L_0x1430
        L_0x142c:
            r29 = r0
            r3 = r50
        L_0x1430:
            r50 = r3
            r7 = r10
            r8 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x143b:
            r13 = r1
            r40 = r3
            r45 = r5
            r49 = r9
            r43 = r10
            r5 = r4
            r10 = r7
            r3 = r28
            r28 = r17
            r17 = r8
        L_0x144c:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewMessage
            if (r0 == 0) goto L_0x1456
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateNewMessage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateNewMessage) r0
            im.bclpbkiauv.tgnet.TLRPC$Message r0 = r0.message
            goto L_0x1478
        L_0x1456:
            boolean r0 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewScheduledMessage
            if (r0 == 0) goto L_0x1460
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateNewScheduledMessage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateNewScheduledMessage) r0
            im.bclpbkiauv.tgnet.TLRPC$Message r0 = r0.message
            goto L_0x1478
        L_0x1460:
            r0 = r11
            im.bclpbkiauv.tgnet.TLRPC$TL_updateNewChannelMessage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateNewChannelMessage) r0
            im.bclpbkiauv.tgnet.TLRPC$Message r0 = r0.message
            boolean r1 = r0.out
            if (r1 != 0) goto L_0x1478
            int r1 = r0.from_id
            im.bclpbkiauv.messenger.UserConfig r2 = r61.getUserConfig()
            int r2 = r2.getClientUserId()
            if (r1 != r2) goto L_0x1478
            r1 = 1
            r0.out = r1
        L_0x1478:
            r1 = 0
            r2 = 0
            r7 = 0
            im.bclpbkiauv.tgnet.TLRPC$Peer r8 = r0.to_id
            int r8 = r8.channel_id
            if (r8 == 0) goto L_0x1486
            im.bclpbkiauv.tgnet.TLRPC$Peer r8 = r0.to_id
            int r2 = r8.channel_id
            goto L_0x149b
        L_0x1486:
            im.bclpbkiauv.tgnet.TLRPC$Peer r8 = r0.to_id
            int r8 = r8.chat_id
            if (r8 == 0) goto L_0x1491
            im.bclpbkiauv.tgnet.TLRPC$Peer r8 = r0.to_id
            int r2 = r8.chat_id
            goto L_0x149b
        L_0x1491:
            im.bclpbkiauv.tgnet.TLRPC$Peer r8 = r0.to_id
            int r8 = r8.user_id
            if (r8 == 0) goto L_0x149b
            im.bclpbkiauv.tgnet.TLRPC$Peer r8 = r0.to_id
            int r7 = r8.user_id
        L_0x149b:
            if (r2 == 0) goto L_0x14c0
            java.lang.Integer r8 = java.lang.Integer.valueOf(r2)
            java.lang.Object r8 = r5.get(r8)
            r1 = r8
            im.bclpbkiauv.tgnet.TLRPC$Chat r1 = (im.bclpbkiauv.tgnet.TLRPC.Chat) r1
            if (r1 != 0) goto L_0x14b2
            java.lang.Integer r8 = java.lang.Integer.valueOf(r2)
            im.bclpbkiauv.tgnet.TLRPC$Chat r1 = r14.getChat(r8)
        L_0x14b2:
            if (r1 != 0) goto L_0x14c0
            im.bclpbkiauv.messenger.MessagesStorage r8 = r61.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$Chat r1 = r8.getChatSync(r2)
            r8 = 1
            r14.putChat(r1, r8)
        L_0x14c0:
            if (r27 == 0) goto L_0x15cd
            if (r2 == 0) goto L_0x14e0
            if (r1 != 0) goto L_0x14e0
            boolean r8 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r8 == 0) goto L_0x14de
            java.lang.StringBuilder r8 = new java.lang.StringBuilder
            r8.<init>()
            java.lang.String r9 = "not found chat "
            r8.append(r9)
            r8.append(r2)
            java.lang.String r8 = r8.toString()
            im.bclpbkiauv.messenger.FileLog.d(r8)
        L_0x14de:
            r8 = 0
            return r8
        L_0x14e0:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r8 = r0.entities
            int r8 = r8.size()
            int r8 = r8 + 3
            r9 = 0
        L_0x14e9:
            if (r9 >= r8) goto L_0x15c8
            r29 = 0
            if (r9 == 0) goto L_0x152c
            r44 = r2
            r2 = 1
            if (r9 != r2) goto L_0x1502
            int r7 = r0.from_id
            boolean r2 = r0.post
            if (r2 == 0) goto L_0x14ff
            r29 = 1
            r50 = r3
            goto L_0x1530
        L_0x14ff:
            r50 = r3
            goto L_0x1530
        L_0x1502:
            r2 = 2
            if (r9 != r2) goto L_0x1513
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r2 = r0.fwd_from
            if (r2 == 0) goto L_0x150e
            im.bclpbkiauv.tgnet.TLRPC$MessageFwdHeader r2 = r0.fwd_from
            int r2 = r2.from_id
            goto L_0x150f
        L_0x150e:
            r2 = 0
        L_0x150f:
            r7 = r2
            r50 = r3
            goto L_0x1530
        L_0x1513:
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$MessageEntity> r2 = r0.entities
            r50 = r3
            int r3 = r9 + -3
            java.lang.Object r2 = r2.get(r3)
            im.bclpbkiauv.tgnet.TLRPC$MessageEntity r2 = (im.bclpbkiauv.tgnet.TLRPC.MessageEntity) r2
            boolean r3 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageEntityMentionName
            if (r3 == 0) goto L_0x1529
            r3 = r2
            im.bclpbkiauv.tgnet.TLRPC$TL_messageEntityMentionName r3 = (im.bclpbkiauv.tgnet.TLRPC.TL_messageEntityMentionName) r3
            int r3 = r3.user_id
            goto L_0x152a
        L_0x1529:
            r3 = 0
        L_0x152a:
            r7 = r3
            goto L_0x1530
        L_0x152c:
            r44 = r2
            r50 = r3
        L_0x1530:
            if (r7 <= 0) goto L_0x15c0
            java.lang.Integer r2 = java.lang.Integer.valueOf(r7)
            java.lang.Object r2 = r13.get(r2)
            im.bclpbkiauv.tgnet.TLRPC$User r2 = (im.bclpbkiauv.tgnet.TLRPC.User) r2
            if (r2 == 0) goto L_0x1544
            if (r29 != 0) goto L_0x154c
            boolean r3 = r2.min
            if (r3 == 0) goto L_0x154c
        L_0x1544:
            java.lang.Integer r3 = java.lang.Integer.valueOf(r7)
            im.bclpbkiauv.tgnet.TLRPC$User r2 = r14.getUser(r3)
        L_0x154c:
            if (r2 == 0) goto L_0x1554
            if (r29 != 0) goto L_0x1569
            boolean r3 = r2.min
            if (r3 == 0) goto L_0x1569
        L_0x1554:
            im.bclpbkiauv.messenger.MessagesStorage r3 = r61.getMessagesStorage()
            im.bclpbkiauv.tgnet.TLRPC$User r2 = r3.getUserSync(r7)
            if (r2 == 0) goto L_0x1565
            if (r29 != 0) goto L_0x1565
            boolean r3 = r2.min
            if (r3 == 0) goto L_0x1565
            r2 = 0
        L_0x1565:
            r3 = 1
            r14.putUser(r2, r3)
        L_0x1569:
            if (r2 != 0) goto L_0x1585
            boolean r3 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r3 == 0) goto L_0x1583
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            java.lang.String r4 = "not found user "
            r3.append(r4)
            r3.append(r7)
            java.lang.String r3 = r3.toString()
            im.bclpbkiauv.messenger.FileLog.d(r3)
        L_0x1583:
            r3 = 0
            return r3
        L_0x1585:
            boolean r3 = r0.out
            if (r3 != 0) goto L_0x15be
            r3 = 1
            if (r9 != r3) goto L_0x15be
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r3 = r2.status
            if (r3 == 0) goto L_0x15be
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r3 = r2.status
            int r3 = r3.expires
            if (r3 > 0) goto L_0x15be
            im.bclpbkiauv.tgnet.ConnectionsManager r3 = r61.getConnectionsManager()
            int r3 = r3.getCurrentTime()
            int r4 = r0.date
            int r3 = r3 - r4
            int r3 = java.lang.Math.abs(r3)
            r4 = 30
            if (r3 >= r4) goto L_0x15be
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r3 = r14.onlinePrivacy
            java.lang.Integer r4 = java.lang.Integer.valueOf(r7)
            r36 = r2
            int r2 = r0.date
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r3.put(r4, r2)
            r2 = r10 | 4
            r10 = r2
            goto L_0x15c0
        L_0x15be:
            r36 = r2
        L_0x15c0:
            int r9 = r9 + 1
            r2 = r44
            r3 = r50
            goto L_0x14e9
        L_0x15c8:
            r44 = r2
            r50 = r3
            goto L_0x15d1
        L_0x15cd:
            r44 = r2
            r50 = r3
        L_0x15d1:
            if (r1 == 0) goto L_0x15dd
            boolean r2 = r1.megagroup
            if (r2 == 0) goto L_0x15dd
            int r2 = r0.flags
            r2 = r2 | r21
            r0.flags = r2
        L_0x15dd:
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r2 = r0.action
            boolean r2 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionChatDeleteUser
            if (r2 == 0) goto L_0x1628
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r2 = r0.action
            int r2 = r2.user_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            java.lang.Object r2 = r13.get(r2)
            im.bclpbkiauv.tgnet.TLRPC$User r2 = (im.bclpbkiauv.tgnet.TLRPC.User) r2
            if (r2 == 0) goto L_0x1605
            boolean r3 = r2.bot
            if (r3 == 0) goto L_0x1605
            im.bclpbkiauv.tgnet.TLRPC$TL_replyKeyboardHide r3 = new im.bclpbkiauv.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r0.reply_markup = r3
            int r3 = r0.flags
            r3 = r3 | 64
            r0.flags = r3
            goto L_0x1628
        L_0x1605:
            int r3 = r0.from_id
            im.bclpbkiauv.messenger.UserConfig r4 = r61.getUserConfig()
            int r4 = r4.getClientUserId()
            if (r3 != r4) goto L_0x1628
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r3 = r0.action
            int r3 = r3.user_id
            im.bclpbkiauv.messenger.UserConfig r4 = r61.getUserConfig()
            int r4 = r4.getClientUserId()
            if (r3 != r4) goto L_0x1628
            r7 = r10
            r8 = r17
            r10 = r43
            r9 = r49
            goto L_0x17d3
        L_0x1628:
            im.bclpbkiauv.messenger.ImageLoader.saveMessageThumbs(r0)
            im.bclpbkiauv.messenger.UserConfig r2 = r61.getUserConfig()
            int r2 = r2.getClientUserId()
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.to_id
            int r3 = r3.chat_id
            if (r3 == 0) goto L_0x1642
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.to_id
            int r3 = r3.chat_id
            int r3 = -r3
            long r3 = (long) r3
            r0.dialog_id = r3
            goto L_0x166c
        L_0x1642:
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.to_id
            int r3 = r3.channel_id
            if (r3 == 0) goto L_0x1651
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.to_id
            int r3 = r3.channel_id
            int r3 = -r3
            long r3 = (long) r3
            r0.dialog_id = r3
            goto L_0x166c
        L_0x1651:
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.to_id
            int r3 = r3.user_id
            if (r3 != r2) goto L_0x165d
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.to_id
            int r4 = r0.from_id
            r3.user_id = r4
        L_0x165d:
            if (r2 != 0) goto L_0x1665
            int r3 = r0.from_id
            long r3 = (long) r3
            r0.dialog_id = r3
            goto L_0x166c
        L_0x1665:
            im.bclpbkiauv.tgnet.TLRPC$Peer r3 = r0.to_id
            int r3 = r3.user_id
            long r3 = (long) r3
            r0.dialog_id = r3
        L_0x166c:
            boolean r3 = r11 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewScheduledMessage
            if (r3 == 0) goto L_0x16cd
            if (r24 != 0) goto L_0x167a
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r24 = r3
            goto L_0x167c
        L_0x167a:
            r3 = r24
        L_0x167c:
            r3.add(r0)
            im.bclpbkiauv.messenger.MessageObject r4 = new im.bclpbkiauv.messenger.MessageObject
            int r8 = r14.currentAccount
            java.util.ArrayList<java.lang.Long> r9 = r14.createdScheduledDialogIds
            r21 = r11
            r29 = r12
            long r11 = r0.dialog_id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            boolean r39 = r9.contains(r11)
            r34 = r4
            r35 = r8
            r36 = r0
            r37 = r13
            r38 = r5
            r34.<init>((int) r35, (im.bclpbkiauv.tgnet.TLRPC.Message) r36, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.User>) r37, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.Chat>) r38, (boolean) r39)
            r8 = 1
            r4.scheduled = r8
            if (r33 != 0) goto L_0x16ad
            android.util.LongSparseArray r8 = new android.util.LongSparseArray
            r8.<init>()
            r33 = r8
            goto L_0x16af
        L_0x16ad:
            r8 = r33
        L_0x16af:
            long r11 = r0.dialog_id
            java.lang.Object r9 = r8.get(r11)
            java.util.ArrayList r9 = (java.util.ArrayList) r9
            if (r9 != 0) goto L_0x16c4
            java.util.ArrayList r11 = new java.util.ArrayList
            r11.<init>()
            r9 = r11
            long r11 = r0.dialog_id
            r8.put(r11, r9)
        L_0x16c4:
            r9.add(r4)
            r24 = r3
            r33 = r8
            goto L_0x17ca
        L_0x16cd:
            r21 = r11
            r29 = r12
            if (r23 != 0) goto L_0x16db
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r23 = r3
            goto L_0x16dd
        L_0x16db:
            r3 = r23
        L_0x16dd:
            r3.add(r0)
            boolean r4 = r0.out
            if (r4 == 0) goto L_0x16e7
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r14.dialogs_read_outbox_max
            goto L_0x16e9
        L_0x16e7:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r14.dialogs_read_inbox_max
        L_0x16e9:
            long r8 = r0.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            java.lang.Object r8 = r4.get(r8)
            java.lang.Integer r8 = (java.lang.Integer) r8
            if (r8 != 0) goto L_0x1715
            im.bclpbkiauv.messenger.MessagesStorage r9 = r61.getMessagesStorage()
            boolean r11 = r0.out
            r12 = r7
            r23 = r8
            long r7 = r0.dialog_id
            int r7 = r9.getDialogReadMax(r11, r7)
            java.lang.Integer r8 = java.lang.Integer.valueOf(r7)
            r7 = r12
            long r11 = r0.dialog_id
            java.lang.Long r9 = java.lang.Long.valueOf(r11)
            r4.put(r9, r8)
            goto L_0x1717
        L_0x1715:
            r23 = r8
        L_0x1717:
            int r9 = r8.intValue()
            int r11 = r0.id
            if (r9 >= r11) goto L_0x1735
            if (r1 == 0) goto L_0x1727
            boolean r9 = im.bclpbkiauv.messenger.ChatObject.isNotInChat(r1)
            if (r9 != 0) goto L_0x1735
        L_0x1727:
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r9 = r0.action
            boolean r9 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionChatMigrateTo
            if (r9 != 0) goto L_0x1735
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r9 = r0.action
            boolean r9 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionChannelCreate
            if (r9 != 0) goto L_0x1735
            r9 = 1
            goto L_0x1736
        L_0x1735:
            r9 = 0
        L_0x1736:
            r0.unread = r9
            long r11 = r0.dialog_id
            r9 = r3
            r23 = r4
            long r3 = (long) r2
            int r34 = (r11 > r3 ? 1 : (r11 == r3 ? 0 : -1))
            if (r34 != 0) goto L_0x1750
            boolean r3 = r0.from_scheduled
            if (r3 != 0) goto L_0x174a
            r3 = 0
            r0.unread = r3
            goto L_0x174b
        L_0x174a:
            r3 = 0
        L_0x174b:
            r0.media_unread = r3
            r3 = 1
            r0.out = r3
        L_0x1750:
            im.bclpbkiauv.messenger.MessageObject r3 = new im.bclpbkiauv.messenger.MessageObject
            int r4 = r14.currentAccount
            java.util.ArrayList<java.lang.Long> r11 = r14.createdDialogIds
            r12 = r1
            r46 = r2
            long r1 = r0.dialog_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            boolean r39 = r11.contains(r1)
            r34 = r3
            r35 = r4
            r36 = r0
            r37 = r13
            r38 = r5
            r34.<init>((int) r35, (im.bclpbkiauv.tgnet.TLRPC.Message) r36, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.User>) r37, (java.util.AbstractMap<java.lang.Integer, im.bclpbkiauv.tgnet.TLRPC.Chat>) r38, (boolean) r39)
            r1 = r3
            int r2 = r1.type
            r3 = 11
            if (r2 != r3) goto L_0x177a
            r10 = r10 | 8
            goto L_0x1782
        L_0x177a:
            int r2 = r1.type
            r3 = 10
            if (r2 != r3) goto L_0x1782
            r10 = r10 | 16
        L_0x1782:
            if (r6 != 0) goto L_0x178a
            android.util.LongSparseArray r2 = new android.util.LongSparseArray
            r2.<init>()
            r6 = r2
        L_0x178a:
            long r2 = r0.dialog_id
            java.lang.Object r2 = r6.get(r2)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 != 0) goto L_0x179f
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r2 = r3
            long r3 = r0.dialog_id
            r6.put(r3, r2)
        L_0x179f:
            r2.add(r1)
            boolean r3 = r1.isOut()
            if (r3 == 0) goto L_0x17ae
            im.bclpbkiauv.tgnet.TLRPC$Message r3 = r1.messageOwner
            boolean r3 = r3.from_scheduled
            if (r3 == 0) goto L_0x17c8
        L_0x17ae:
            boolean r3 = r1.isUnread()
            if (r3 == 0) goto L_0x17c8
            if (r22 != 0) goto L_0x17be
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r22 = r3
            goto L_0x17c0
        L_0x17be:
            r3 = r22
        L_0x17c0:
            r3.add(r1)
            r22 = r3
            r23 = r9
            goto L_0x17ca
        L_0x17c8:
            r23 = r9
        L_0x17ca:
            r7 = r10
            r8 = r17
            r12 = r29
            r10 = r43
            r9 = r49
        L_0x17d3:
            int r3 = r40 + 1
            r4 = r5
            r1 = r13
            r17 = r28
            r2 = r32
            r5 = r45
            r28 = r50
            r13 = r62
            goto L_0x0150
        L_0x17e3:
            r13 = r1
            r32 = r2
            r40 = r3
            r45 = r5
            r49 = r9
            r43 = r10
            r50 = r28
            r5 = r4
            r10 = r7
            r29 = r12
            r28 = r17
            r17 = r8
            if (r6 == 0) goto L_0x1816
            r0 = 0
            int r1 = r6.size()
        L_0x17ff:
            if (r0 >= r1) goto L_0x1816
            long r2 = r6.keyAt(r0)
            java.lang.Object r4 = r6.valueAt(r0)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            boolean r7 = r14.updatePrintingUsersWithNewMessages(r2, r4)
            if (r7 == 0) goto L_0x1813
            r31 = 1
        L_0x1813:
            int r0 = r0 + 1
            goto L_0x17ff
        L_0x1816:
            if (r31 == 0) goto L_0x181b
            r61.updatePrintingStrings()
        L_0x181b:
            r1 = r50
            r3 = r10
            r4 = r18
            r11 = r20
            r7 = r49
            r9 = r31
            if (r43 == 0) goto L_0x1832
            im.bclpbkiauv.messenger.ContactsController r0 = r61.getContactsController()
            r12 = r43
            r0.processContactsUpdates(r12, r13)
            goto L_0x1834
        L_0x1832:
            r12 = r43
        L_0x1834:
            if (r22 == 0) goto L_0x184b
            r0 = r22
            im.bclpbkiauv.messenger.MessagesStorage r8 = r61.getMessagesStorage()
            im.bclpbkiauv.messenger.DispatchQueue r8 = r8.getStorageQueue()
            r50 = r1
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$mRjNcfCIT9CA1mOmV86HRyE3A-8 r1 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$mRjNcfCIT9CA1mOmV86HRyE3A-8
            r1.<init>(r0)
            r8.postRunnable(r1)
            goto L_0x184d
        L_0x184b:
            r50 = r1
        L_0x184d:
            if (r24 == 0) goto L_0x1868
            im.bclpbkiauv.messenger.MessagesStorage r34 = r61.getMessagesStorage()
            r36 = 1
            r37 = 1
            r38 = 0
            im.bclpbkiauv.messenger.DownloadController r0 = r61.getDownloadController()
            int r39 = r0.getAutodownloadMask()
            r40 = 1
            r35 = r24
            r34.putMessages((java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC.Message>) r35, (boolean) r36, (boolean) r37, (boolean) r38, (int) r39, (boolean) r40)
        L_0x1868:
            if (r23 == 0) goto L_0x1893
            im.bclpbkiauv.messenger.StatsController r0 = r61.getStatsController()
            int r1 = im.bclpbkiauv.messenger.ApplicationLoader.getCurrentNetworkType()
            int r2 = r23.size()
            r8 = 1
            r0.incrementReceivedItemsCount(r1, r8, r2)
            im.bclpbkiauv.messenger.MessagesStorage r34 = r61.getMessagesStorage()
            r36 = 1
            r37 = 1
            r38 = 0
            im.bclpbkiauv.messenger.DownloadController r0 = r61.getDownloadController()
            int r39 = r0.getAutodownloadMask()
            r40 = 0
            r35 = r23
            r34.putMessages((java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC.Message>) r35, (boolean) r36, (boolean) r37, (boolean) r38, (int) r39, (boolean) r40)
        L_0x1893:
            if (r16 == 0) goto L_0x1902
            r0 = 0
            int r1 = r16.size()
        L_0x189a:
            if (r0 >= r1) goto L_0x18f9
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_messages r2 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_messages
            r2.<init>()
            r8 = r16
            java.lang.Object r16 = r8.valueAt(r0)
            r18 = r1
            r1 = r16
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            r16 = 0
            r43 = r5
            int r5 = r1.size()
            r20 = r6
            r6 = r16
        L_0x18b9:
            if (r6 >= r5) goto L_0x18d5
            r16 = r5
            java.util.ArrayList r5 = r2.messages
            java.lang.Object r21 = r1.get(r6)
            r32 = r1
            r1 = r21
            im.bclpbkiauv.messenger.MessageObject r1 = (im.bclpbkiauv.messenger.MessageObject) r1
            im.bclpbkiauv.tgnet.TLRPC$Message r1 = r1.messageOwner
            r5.add(r1)
            int r6 = r6 + 1
            r5 = r16
            r1 = r32
            goto L_0x18b9
        L_0x18d5:
            r32 = r1
            r16 = r5
            im.bclpbkiauv.messenger.MessagesStorage r52 = r61.getMessagesStorage()
            long r54 = r8.keyAt(r0)
            r56 = -2
            r57 = 0
            r58 = 0
            r59 = 0
            r53 = r2
            r52.putMessages((im.bclpbkiauv.tgnet.TLRPC.messages_Messages) r53, (long) r54, (int) r56, (int) r57, (boolean) r58, (boolean) r59)
            int r0 = r0 + 1
            r16 = r8
            r1 = r18
            r6 = r20
            r5 = r43
            goto L_0x189a
        L_0x18f9:
            r18 = r1
            r43 = r5
            r20 = r6
            r8 = r16
            goto L_0x1908
        L_0x1902:
            r43 = r5
            r20 = r6
            r8 = r16
        L_0x1908:
            if (r4 == 0) goto L_0x1913
            im.bclpbkiauv.messenger.MessagesStorage r0 = r61.getMessagesStorage()
            r1 = 1
            r0.putChannelViews(r4, r1)
            goto L_0x1914
        L_0x1913:
            r1 = 1
        L_0x1914:
            r30 = r8
            r2 = r17
            r16 = r12
            r5 = r19
            r6 = r29
            r12 = r4
            r29 = r5
            r17 = r43
            r34 = r6
            r32 = r20
            r6 = r32
            r35 = r10
            r10 = r7
            r7 = r33
            r38 = r11
            r36 = r50
            r11 = r25
            r49 = r10
            r39 = r16
            r10 = r39
            r43 = r4
            r40 = r17
            r4 = r26
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$TYCrge6HjdZ7qrpve4hmi5ThJT8 r0 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$TYCrge6HjdZ7qrpve4hmi5ThJT8
            r60 = r42
            r42 = r13
            r13 = r60
            r1 = r0
            r44 = r41
            r41 = r2
            r2 = r61
            r1.<init>(r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r0)
            r1 = r15
            r16 = r41
            r18 = r45
            r17 = r38
            r19 = r34
            r20 = r49
            r21 = r44
            im.bclpbkiauv.messenger.MessagesStorage r0 = r61.getMessagesStorage()
            im.bclpbkiauv.messenger.DispatchQueue r0 = r0.getStorageQueue()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$EFYi2V1pjiBYjZ4tZSgNntRdJIs r2 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$EFYi2V1pjiBYjZ4tZSgNntRdJIs
            r46 = r3
            r3 = r13
            r13 = r2
            r47 = r4
            r4 = r14
            r14 = r61
            r13.<init>(r15, r16, r17, r18, r19, r20, r21)
            r0.postRunnable(r2)
            r2 = r29
            if (r2 == 0) goto L_0x1986
            im.bclpbkiauv.messenger.MessagesStorage r0 = r61.getMessagesStorage()
            r0.putWebPages(r2)
        L_0x1986:
            if (r1 != 0) goto L_0x19a7
            r13 = r41
            if (r13 != 0) goto L_0x19a0
            r14 = r38
            if (r14 != 0) goto L_0x199b
            r29 = r2
            r2 = r45
            if (r2 == 0) goto L_0x1997
            goto L_0x19af
        L_0x1997:
            r38 = r5
            r5 = 1
            goto L_0x19c9
        L_0x199b:
            r29 = r2
            r2 = r45
            goto L_0x19af
        L_0x19a0:
            r29 = r2
            r14 = r38
            r2 = r45
            goto L_0x19af
        L_0x19a7:
            r29 = r2
            r14 = r38
            r13 = r41
            r2 = r45
        L_0x19af:
            if (r1 != 0) goto L_0x19b8
            if (r2 == 0) goto L_0x19b4
            goto L_0x19b8
        L_0x19b4:
            r38 = r5
            r5 = 1
            goto L_0x19c2
        L_0x19b8:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r61.getMessagesStorage()
            r38 = r5
            r5 = 1
            r0.updateDialogsWithReadMessages(r1, r13, r2, r5)
        L_0x19c2:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r61.getMessagesStorage()
            r0.markMessagesAsRead(r1, r13, r14, r5)
        L_0x19c9:
            if (r2 == 0) goto L_0x19da
            im.bclpbkiauv.messenger.MessagesStorage r0 = r61.getMessagesStorage()
            im.bclpbkiauv.tgnet.ConnectionsManager r41 = r61.getConnectionsManager()
            int r5 = r41.getCurrentTime()
            r0.markMessagesContentAsRead(r2, r5)
        L_0x19da:
            r5 = r34
            if (r5 == 0) goto L_0x1a23
            r0 = 0
            r34 = r0
            int r0 = r5.size()
            r41 = r1
            r1 = r34
        L_0x19e9:
            if (r1 >= r0) goto L_0x1a1a
            r34 = r0
            int r0 = r5.keyAt(r1)
            java.lang.Object r45 = r5.valueAt(r1)
            r48 = r2
            r2 = r45
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            im.bclpbkiauv.messenger.MessagesStorage r45 = r61.getMessagesStorage()
            r50 = r5
            im.bclpbkiauv.messenger.DispatchQueue r5 = r45.getStorageQueue()
            r45 = r6
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$zmMbdyHa1AOB1AooD3TRroLBROw r6 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$zmMbdyHa1AOB1AooD3TRroLBROw
            r6.<init>(r2, r0)
            r5.postRunnable(r6)
            int r1 = r1 + 1
            r0 = r34
            r6 = r45
            r2 = r48
            r5 = r50
            goto L_0x19e9
        L_0x1a1a:
            r34 = r0
            r48 = r2
            r50 = r5
            r45 = r6
            goto L_0x1a2b
        L_0x1a23:
            r41 = r1
            r48 = r2
            r50 = r5
            r45 = r6
        L_0x1a2b:
            r1 = r49
            if (r1 == 0) goto L_0x1a5d
            r0 = 0
            int r2 = r1.size()
        L_0x1a34:
            if (r0 >= r2) goto L_0x1a5a
            int r5 = r1.keyAt(r0)
            java.lang.Object r6 = r1.valueAt(r0)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            r49 = r1
            int r1 = r4.currentAccount
            im.bclpbkiauv.messenger.MessagesStorage r51 = im.bclpbkiauv.messenger.MessagesStorage.getInstance(r1)
            r53 = 1
            r55 = 0
            r56 = 1
            r52 = r6
            r54 = r5
            r51.markMessagesAsDeleted(r52, r53, r54, r55, r56)
            int r0 = r0 + 1
            r1 = r49
            goto L_0x1a34
        L_0x1a5a:
            r49 = r1
            goto L_0x1a5f
        L_0x1a5d:
            r49 = r1
        L_0x1a5f:
            r1 = r44
            if (r1 == 0) goto L_0x1a92
            r0 = 0
            int r2 = r1.size()
        L_0x1a68:
            if (r0 >= r2) goto L_0x1a8d
            int r5 = r1.keyAt(r0)
            int r6 = r1.valueAt(r0)
            im.bclpbkiauv.messenger.MessagesStorage r34 = r61.getMessagesStorage()
            r44 = r1
            im.bclpbkiauv.messenger.DispatchQueue r1 = r34.getStorageQueue()
            r34 = r2
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$GmrMVnrn3b0lCINFfKeLVlm9Tec r2 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$GmrMVnrn3b0lCINFfKeLVlm9Tec
            r2.<init>(r5, r6)
            r1.postRunnable(r2)
            int r0 = r0 + 1
            r2 = r34
            r1 = r44
            goto L_0x1a68
        L_0x1a8d:
            r44 = r1
            r34 = r2
            goto L_0x1a94
        L_0x1a92:
            r44 = r1
        L_0x1a94:
            if (r3 == 0) goto L_0x1ac3
            r0 = 0
            int r1 = r3.size()
        L_0x1a9b:
            if (r0 >= r1) goto L_0x1ac1
            java.lang.Object r2 = r3.get(r0)
            im.bclpbkiauv.tgnet.TLRPC$TL_updateEncryptedMessagesRead r2 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateEncryptedMessagesRead) r2
            im.bclpbkiauv.messenger.MessagesStorage r51 = r61.getMessagesStorage()
            int r5 = r2.chat_id
            int r6 = r2.max_date
            r34 = r1
            int r1 = r2.date
            r55 = 1
            r56 = 0
            r52 = r5
            r53 = r6
            r54 = r1
            r51.createTaskForSecretChat(r52, r53, r54, r55, r56)
            int r0 = r0 + 1
            r1 = r34
            goto L_0x1a9b
        L_0x1ac1:
            r34 = r1
        L_0x1ac3:
            r1 = 1
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.processUpdateArray(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, boolean, int):boolean");
    }

    public /* synthetic */ void lambda$processUpdateArray$265$MessagesController(ArrayList usersArr, ArrayList chatsArr) {
        putUsers(usersArr, false);
        putChats(chatsArr, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$266$MessagesController(ArrayList usersArr, ArrayList chatsArr) {
        putUsers(usersArr, false);
        putChats(chatsArr, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$268$MessagesController(TLRPC.TL_updateUserBlocked finalUpdate) {
        AndroidUtilities.runOnUIThread(new Runnable(finalUpdate) {
            private final /* synthetic */ TLRPC.TL_updateUserBlocked f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$267$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$267$MessagesController(TLRPC.TL_updateUserBlocked finalUpdate) {
        if (!finalUpdate.blocked) {
            this.blockedUsers.delete(finalUpdate.user_id);
        } else if (this.blockedUsers.indexOfKey(finalUpdate.user_id) < 0) {
            this.blockedUsers.put(finalUpdate.user_id, 1);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdateArray$269$MessagesController(TLRPC.TL_updateServiceNotification update) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 2, update.message, update.type);
    }

    public /* synthetic */ void lambda$processUpdateArray$270$MessagesController(TLRPC.Message message) {
        getNotificationCenter().postNotificationName(NotificationCenter.livestatechange, message.media);
    }

    public /* synthetic */ void lambda$processUpdateArray$271$MessagesController(TLRPC.TL_updateLangPack update) {
        LocaleController.getInstance().saveRemoteLocaleStringsForCurrentLocale(update.difference, this.currentAccount);
    }

    public /* synthetic */ void lambda$processUpdateArray$272$MessagesController(TLRPC.TL_updateUserMomentStateV1 userMomentStateV1) {
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.userFriendsCircleUpdate, userMomentStateV1);
    }

    public /* synthetic */ void lambda$processUpdateArray$276$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.contactApplyUpdateCount, 0);
    }

    public /* synthetic */ void lambda$processUpdateArray$279$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.groupingChanged, new Object[0]);
    }

    public /* synthetic */ void lambda$null$280$MessagesController(ArrayList pushMessagesFinal) {
        getNotificationsController().processNewMessages(pushMessagesFinal, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$processUpdateArray$281$MessagesController(ArrayList pushMessagesFinal) {
        AndroidUtilities.runOnUIThread(new Runnable(pushMessagesFinal) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$280$MessagesController(this.f$1);
            }
        });
    }

    /* JADX WARNING: Removed duplicated region for block: B:405:0x0a07  */
    /* JADX WARNING: Removed duplicated region for block: B:410:0x0a40  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processUpdateArray$286$MessagesController(int r32, java.util.ArrayList r33, android.util.LongSparseArray r34, android.util.LongSparseArray r35, android.util.LongSparseArray r36, android.util.LongSparseArray r37, boolean r38, java.util.ArrayList r39, java.util.ArrayList r40, android.util.SparseArray r41) {
        /*
            r31 = this;
            r8 = r31
            r9 = r33
            r10 = r34
            r11 = r35
            r12 = r36
            r13 = r37
            r14 = r40
            r0 = r32
            r1 = 0
            r5 = 0
            if (r9 == 0) goto L_0x096c
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r16 = 0
            r17 = 0
            int r6 = r33.size()
            r15 = r17
            r17 = r16
            r16 = r1
            r1 = r0
        L_0x002d:
            if (r15 >= r6) goto L_0x093e
            java.lang.Object r0 = r9.get(r15)
            r19 = r6
            r6 = r0
            im.bclpbkiauv.tgnet.TLRPC$Update r6 = (im.bclpbkiauv.tgnet.TLRPC.Update) r6
            boolean r0 = r6 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePrivacy
            if (r0 == 0) goto L_0x00e3
            r0 = r6
            im.bclpbkiauv.tgnet.TLRPC$TL_updatePrivacy r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updatePrivacy) r0
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r7 = r0.key
            boolean r7 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyStatusTimestamp
            if (r7 == 0) goto L_0x0050
            im.bclpbkiauv.messenger.ContactsController r7 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r4 = r0.rules
            r7.setPrivacyRules(r4, r5)
            goto L_0x00db
        L_0x0050:
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r4 = r0.key
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyChatInvite
            if (r4 == 0) goto L_0x0062
            im.bclpbkiauv.messenger.ContactsController r4 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r7 = r0.rules
            r5 = 1
            r4.setPrivacyRules(r7, r5)
            goto L_0x00db
        L_0x0062:
            r5 = 1
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r4 = r0.key
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyMoment
            if (r4 == 0) goto L_0x0075
            im.bclpbkiauv.messenger.ContactsController r4 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r7 = r0.rules
            r5 = 8
            r4.setPrivacyRules(r7, r5)
            goto L_0x00db
        L_0x0075:
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r4 = r0.key
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyPhoneCall
            if (r4 == 0) goto L_0x0086
            im.bclpbkiauv.messenger.ContactsController r4 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r5 = r0.rules
            r7 = 2
            r4.setPrivacyRules(r5, r7)
            goto L_0x00db
        L_0x0086:
            r7 = 2
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r4 = r0.key
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyPhoneP2P
            if (r4 == 0) goto L_0x0098
            im.bclpbkiauv.messenger.ContactsController r4 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r5 = r0.rules
            r7 = 3
            r4.setPrivacyRules(r5, r7)
            goto L_0x00db
        L_0x0098:
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r4 = r0.key
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyProfilePhoto
            if (r4 == 0) goto L_0x00a9
            im.bclpbkiauv.messenger.ContactsController r4 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r5 = r0.rules
            r7 = 4
            r4.setPrivacyRules(r5, r7)
            goto L_0x00db
        L_0x00a9:
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r4 = r0.key
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyForwards
            if (r4 == 0) goto L_0x00ba
            im.bclpbkiauv.messenger.ContactsController r4 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r5 = r0.rules
            r7 = 5
            r4.setPrivacyRules(r5, r7)
            goto L_0x00db
        L_0x00ba:
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r4 = r0.key
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyPhoneNumber
            if (r4 == 0) goto L_0x00cb
            im.bclpbkiauv.messenger.ContactsController r4 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r5 = r0.rules
            r7 = 6
            r4.setPrivacyRules(r5, r7)
            goto L_0x00db
        L_0x00cb:
            im.bclpbkiauv.tgnet.TLRPC$PrivacyKey r4 = r0.key
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_privacyKeyAddedByPhone
            if (r4 == 0) goto L_0x00db
            im.bclpbkiauv.messenger.ContactsController r4 = r31.getContactsController()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$PrivacyRule> r5 = r0.rules
            r7 = 7
            r4.setPrivacyRules(r5, r7)
        L_0x00db:
            r4 = r1
            r28 = r3
            r18 = r19
            r3 = r2
            goto L_0x092b
        L_0x00e3:
            boolean r0 = r6 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserStatus
            if (r0 == 0) goto L_0x0156
            r0 = r6
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserStatus r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserStatus) r0
            int r4 = r0.user_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            im.bclpbkiauv.tgnet.TLRPC$User r4 = r8.getUser(r4)
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r5 = r0.status
            boolean r5 = r5 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_userStatusRecently
            if (r5 == 0) goto L_0x0101
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r5 = r0.status
            r7 = -100
            r5.expires = r7
            goto L_0x011a
        L_0x0101:
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r5 = r0.status
            boolean r5 = r5 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_userStatusLastWeek
            if (r5 == 0) goto L_0x010e
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r5 = r0.status
            r7 = -101(0xffffffffffffff9b, float:NaN)
            r5.expires = r7
            goto L_0x011a
        L_0x010e:
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r5 = r0.status
            boolean r5 = r5 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_userStatusLastMonth
            if (r5 == 0) goto L_0x011a
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r5 = r0.status
            r7 = -102(0xffffffffffffff9a, float:NaN)
            r5.expires = r7
        L_0x011a:
            if (r4 == 0) goto L_0x0124
            int r5 = r0.user_id
            r4.id = r5
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r5 = r0.status
            r4.status = r5
        L_0x0124:
            im.bclpbkiauv.tgnet.TLRPC$TL_user r5 = new im.bclpbkiauv.tgnet.TLRPC$TL_user
            r5.<init>()
            int r7 = r0.user_id
            r5.id = r7
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r7 = r0.status
            r5.status = r7
            r3.add(r5)
            int r7 = r0.user_id
            im.bclpbkiauv.messenger.UserConfig r21 = r31.getUserConfig()
            r23 = r1
            int r1 = r21.getClientUserId()
            if (r7 != r1) goto L_0x014d
            im.bclpbkiauv.messenger.NotificationsController r1 = r31.getNotificationsController()
            im.bclpbkiauv.tgnet.TLRPC$UserStatus r7 = r0.status
            int r7 = r7.expires
            r1.setLastOnlineFromOtherDevice(r7)
        L_0x014d:
            r28 = r3
            r18 = r19
            r4 = r23
            r3 = r2
            goto L_0x092b
        L_0x0156:
            r23 = r1
            boolean r0 = r6 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserName
            if (r0 == 0) goto L_0x01bc
            r0 = r6
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserName r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserName) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            im.bclpbkiauv.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x019b
            boolean r4 = im.bclpbkiauv.messenger.UserObject.isContact(r1)
            if (r4 != 0) goto L_0x0179
            java.lang.String r4 = r0.first_name
            r1.first_name = r4
            java.lang.String r4 = r0.last_name
            r1.last_name = r4
        L_0x0179:
            java.lang.String r4 = r1.username
            boolean r4 = android.text.TextUtils.isEmpty(r4)
            if (r4 != 0) goto L_0x0188
            java.util.concurrent.ConcurrentHashMap<java.lang.String, im.bclpbkiauv.tgnet.TLObject> r4 = r8.objectsByUsernames
            java.lang.String r5 = r1.username
            r4.remove(r5)
        L_0x0188:
            java.lang.String r4 = r0.username
            boolean r4 = android.text.TextUtils.isEmpty(r4)
            if (r4 == 0) goto L_0x0197
            java.util.concurrent.ConcurrentHashMap<java.lang.String, im.bclpbkiauv.tgnet.TLObject> r4 = r8.objectsByUsernames
            java.lang.String r5 = r0.username
            r4.put(r5, r1)
        L_0x0197:
            java.lang.String r4 = r0.username
            r1.username = r4
        L_0x019b:
            im.bclpbkiauv.tgnet.TLRPC$TL_user r4 = new im.bclpbkiauv.tgnet.TLRPC$TL_user
            r4.<init>()
            int r5 = r0.user_id
            r4.id = r5
            java.lang.String r5 = r0.first_name
            r4.first_name = r5
            java.lang.String r5 = r0.last_name
            r4.last_name = r5
            java.lang.String r5 = r0.username
            r4.username = r5
            r2.add(r4)
            r28 = r3
            r18 = r19
            r4 = r23
            r3 = r2
            goto L_0x092b
        L_0x01bc:
            boolean r0 = r6 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDialogPinned
            if (r0 == 0) goto L_0x0214
            r0 = r6
            im.bclpbkiauv.tgnet.TLRPC$TL_updateDialogPinned r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateDialogPinned) r0
            im.bclpbkiauv.tgnet.TLRPC$DialogPeer r1 = r0.peer
            boolean r1 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_dialogPeer
            if (r1 == 0) goto L_0x01d4
            im.bclpbkiauv.tgnet.TLRPC$DialogPeer r1 = r0.peer
            im.bclpbkiauv.tgnet.TLRPC$TL_dialogPeer r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_dialogPeer) r1
            im.bclpbkiauv.tgnet.TLRPC$Peer r4 = r1.peer
            long r4 = im.bclpbkiauv.messenger.DialogObject.getPeerDialogId((im.bclpbkiauv.tgnet.TLRPC.Peer) r4)
            goto L_0x01d6
        L_0x01d4:
            r4 = 0
        L_0x01d6:
            boolean r7 = r0.pinned
            r21 = 0
            r24 = -1
            r26 = r23
            r1 = r31
            r27 = r2
            r28 = r3
            r2 = r4
            r13 = r4
            r5 = 1
            r4 = r7
            r7 = 0
            r9 = 1
            r5 = r21
            r9 = r6
            r18 = r19
            r12 = 0
            r6 = r24
            boolean r1 = r1.pinDialog(r2, r4, r5, r6)
            if (r1 != 0) goto L_0x020e
            im.bclpbkiauv.messenger.UserConfig r1 = r31.getUserConfig()
            int r2 = r0.folder_id
            r1.setPinnedDialogsLoaded(r2, r12)
            im.bclpbkiauv.messenger.UserConfig r1 = r31.getUserConfig()
            r1.saveConfig(r12)
            int r1 = r0.folder_id
            r2 = 0
            r8.loadPinnedDialogs(r1, r13, r2)
        L_0x020e:
            r4 = r26
            r3 = r27
            goto L_0x092b
        L_0x0214:
            r27 = r2
            r28 = r3
            r9 = r6
            r18 = r19
            r26 = r23
            r12 = 0
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePinnedDialogs
            if (r0 == 0) goto L_0x0289
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updatePinnedDialogs r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updatePinnedDialogs) r0
            im.bclpbkiauv.messenger.UserConfig r3 = r31.getUserConfig()
            int r4 = r0.folder_id
            r3.setPinnedDialogsLoaded(r4, r12)
            im.bclpbkiauv.messenger.UserConfig r3 = r31.getUserConfig()
            r3.saveConfig(r12)
            int r3 = r0.flags
            r4 = 1
            r3 = r3 & r4
            if (r3 == 0) goto L_0x027b
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$DialogPeer> r4 = r0.order
            r5 = 0
            int r6 = r4.size()
        L_0x0247:
            if (r5 >= r6) goto L_0x027a
            java.lang.Object r7 = r4.get(r5)
            im.bclpbkiauv.tgnet.TLRPC$DialogPeer r7 = (im.bclpbkiauv.tgnet.TLRPC.DialogPeer) r7
            boolean r13 = r7 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_dialogPeer
            if (r13 == 0) goto L_0x026e
            r13 = r7
            im.bclpbkiauv.tgnet.TLRPC$TL_dialogPeer r13 = (im.bclpbkiauv.tgnet.TLRPC.TL_dialogPeer) r13
            im.bclpbkiauv.tgnet.TLRPC$Peer r13 = r13.peer
            int r14 = r13.user_id
            if (r14 == 0) goto L_0x0260
            int r14 = r13.user_id
            long r1 = (long) r14
            goto L_0x026d
        L_0x0260:
            int r1 = r13.chat_id
            if (r1 == 0) goto L_0x0269
            int r1 = r13.chat_id
            int r1 = -r1
            long r1 = (long) r1
            goto L_0x026d
        L_0x0269:
            int r1 = r13.channel_id
            int r1 = -r1
            long r1 = (long) r1
        L_0x026d:
            goto L_0x0270
        L_0x026e:
            r1 = 0
        L_0x0270:
            java.lang.Long r13 = java.lang.Long.valueOf(r1)
            r3.add(r13)
            int r5 = r5 + 1
            goto L_0x0247
        L_0x027a:
            goto L_0x027c
        L_0x027b:
            r3 = 0
        L_0x027c:
            int r1 = r0.folder_id
            r4 = 0
            r8.loadPinnedDialogs(r1, r4, r3)
            r4 = r26
            r3 = r27
            goto L_0x092b
        L_0x0289:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateFolderPeers
            if (r0 == 0) goto L_0x02d1
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateFolderPeers r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateFolderPeers) r0
            r1 = 0
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$TL_folderPeer> r2 = r0.folder_peers
            int r2 = r2.size()
        L_0x0297:
            if (r1 >= r2) goto L_0x02c9
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$TL_folderPeer> r3 = r0.folder_peers
            java.lang.Object r3 = r3.get(r1)
            im.bclpbkiauv.tgnet.TLRPC$TL_folderPeer r3 = (im.bclpbkiauv.tgnet.TLRPC.TL_folderPeer) r3
            im.bclpbkiauv.tgnet.TLRPC$Peer r4 = r3.peer
            long r4 = im.bclpbkiauv.messenger.DialogObject.getPeerDialogId((im.bclpbkiauv.tgnet.TLRPC.Peer) r4)
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r6 = r8.dialogs_dict
            java.lang.Object r6 = r6.get(r4)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r6 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r6
            if (r6 != 0) goto L_0x02b2
            goto L_0x02c6
        L_0x02b2:
            int r7 = r6.folder_id
            int r13 = r3.folder_id
            if (r7 == r13) goto L_0x02c6
            r6.pinned = r12
            r6.pinnedNum = r12
            int r7 = r3.folder_id
            r6.folder_id = r7
            int r7 = r3.folder_id
            r13 = 0
            r8.ensureFolderDialogExists(r7, r13)
        L_0x02c6:
            int r1 = r1 + 1
            goto L_0x0297
        L_0x02c9:
            r16 = 1
            r1 = r26
            r3 = r27
            goto L_0x092c
        L_0x02d1:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPhoto
            if (r0 == 0) goto L_0x02fe
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserPhoto r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPhoto) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            im.bclpbkiauv.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x02e8
            im.bclpbkiauv.tgnet.TLRPC$UserProfilePhoto r2 = r0.photo
            r1.photo = r2
        L_0x02e8:
            im.bclpbkiauv.tgnet.TLRPC$TL_user r2 = new im.bclpbkiauv.tgnet.TLRPC$TL_user
            r2.<init>()
            int r3 = r0.user_id
            r2.id = r3
            im.bclpbkiauv.tgnet.TLRPC$UserProfilePhoto r3 = r0.photo
            r2.photo = r3
            r3 = r27
            r3.add(r2)
            r4 = r26
            goto L_0x092b
        L_0x02fe:
            r3 = r27
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPhone
            if (r0 == 0) goto L_0x0346
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateUserPhone r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateUserPhone) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            im.bclpbkiauv.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x0332
            java.lang.String r2 = r0.phone
            r1.phone = r2
            im.bclpbkiauv.messenger.DispatchQueue r2 = im.bclpbkiauv.messenger.Utilities.phoneBookQueue
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$Vdmi9G_jgPSCrp8qLtZq3FWw9Ig r4 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$Vdmi9G_jgPSCrp8qLtZq3FWw9Ig
            r4.<init>(r1)
            r2.postRunnable(r4)
            boolean r2 = im.bclpbkiauv.messenger.UserObject.isUserSelf(r1)
            if (r2 == 0) goto L_0x0332
            im.bclpbkiauv.messenger.NotificationCenter r2 = r31.getNotificationCenter()
            int r4 = im.bclpbkiauv.messenger.NotificationCenter.mainUserInfoChanged
            java.lang.Object[] r5 = new java.lang.Object[r12]
            r2.postNotificationName(r4, r5)
        L_0x0332:
            im.bclpbkiauv.tgnet.TLRPC$TL_user r2 = new im.bclpbkiauv.tgnet.TLRPC$TL_user
            r2.<init>()
            int r4 = r0.user_id
            r2.id = r4
            java.lang.String r4 = r0.phone
            r2.phone = r4
            r3.add(r2)
            r4 = r26
            goto L_0x092b
        L_0x0346:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNotifySettings
            if (r0 == 0) goto L_0x0533
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateNotifySettings r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateNotifySettings) r0
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            boolean r1 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_peerNotifySettings
            if (r1 == 0) goto L_0x052f
            if (r17 != 0) goto L_0x035e
            android.content.SharedPreferences r1 = r8.notificationsPreferences
            android.content.SharedPreferences$Editor r17 = r1.edit()
            r1 = r17
            goto L_0x0360
        L_0x035e:
            r1 = r17
        L_0x0360:
            im.bclpbkiauv.tgnet.ConnectionsManager r2 = r31.getConnectionsManager()
            int r2 = r2.getCurrentTime()
            im.bclpbkiauv.tgnet.TLRPC$NotifyPeer r4 = r0.peer
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_notifyPeer
            if (r4 == 0) goto L_0x04a7
            im.bclpbkiauv.tgnet.TLRPC$NotifyPeer r4 = r0.peer
            im.bclpbkiauv.tgnet.TLRPC$TL_notifyPeer r4 = (im.bclpbkiauv.tgnet.TLRPC.TL_notifyPeer) r4
            im.bclpbkiauv.tgnet.TLRPC$Peer r5 = r4.peer
            int r5 = r5.user_id
            if (r5 == 0) goto L_0x037e
            im.bclpbkiauv.tgnet.TLRPC$Peer r5 = r4.peer
            int r5 = r5.user_id
            long r5 = (long) r5
            goto L_0x0391
        L_0x037e:
            im.bclpbkiauv.tgnet.TLRPC$Peer r5 = r4.peer
            int r5 = r5.chat_id
            if (r5 == 0) goto L_0x038b
            im.bclpbkiauv.tgnet.TLRPC$Peer r5 = r4.peer
            int r5 = r5.chat_id
            int r5 = -r5
            long r5 = (long) r5
            goto L_0x0391
        L_0x038b:
            im.bclpbkiauv.tgnet.TLRPC$Peer r5 = r4.peer
            int r5 = r5.channel_id
            int r5 = -r5
            long r5 = (long) r5
        L_0x0391:
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r7 = r8.dialogs_dict
            java.lang.Object r7 = r7.get(r5)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r7 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r7
            if (r7 == 0) goto L_0x039f
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r13 = r0.notify_settings
            r7.notify_settings = r13
        L_0x039f:
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r13 = r0.notify_settings
            int r13 = r13.flags
            r14 = 2
            r13 = r13 & r14
            java.lang.String r12 = "silent_"
            if (r13 == 0) goto L_0x03c0
            java.lang.StringBuilder r13 = new java.lang.StringBuilder
            r13.<init>()
            r13.append(r12)
            r13.append(r5)
            java.lang.String r12 = r13.toString()
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r13 = r0.notify_settings
            boolean r13 = r13.silent
            r1.putBoolean(r12, r13)
            goto L_0x03d2
        L_0x03c0:
            java.lang.StringBuilder r13 = new java.lang.StringBuilder
            r13.<init>()
            r13.append(r12)
            r13.append(r5)
            java.lang.String r12 = r13.toString()
            r1.remove(r12)
        L_0x03d2:
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r12 = r0.notify_settings
            int r12 = r12.flags
            r13 = 4
            r12 = r12 & r13
            java.lang.String r13 = "notify2_"
            if (r12 == 0) goto L_0x0481
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r12 = r0.notify_settings
            int r12 = r12.mute_until
            if (r12 <= r2) goto L_0x045a
            r12 = 0
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r14 = r0.notify_settings
            int r14 = r14.mute_until
            r17 = 31536000(0x1e13380, float:8.2725845E-38)
            r21 = r4
            int r4 = r2 + r17
            if (r14 <= r4) goto L_0x040d
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            r4.append(r13)
            r4.append(r5)
            java.lang.String r4 = r4.toString()
            r13 = 2
            r1.putInt(r4, r13)
            if (r7 == 0) goto L_0x0442
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            r13 = 2147483647(0x7fffffff, float:NaN)
            r4.mute_until = r13
            goto L_0x0442
        L_0x040d:
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r12 = r4.mute_until
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            r4.append(r13)
            r4.append(r5)
            java.lang.String r4 = r4.toString()
            r13 = 3
            r1.putInt(r4, r13)
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            java.lang.String r13 = "notifyuntil_"
            r4.append(r13)
            r4.append(r5)
            java.lang.String r4 = r4.toString()
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r13 = r0.notify_settings
            int r13 = r13.mute_until
            r1.putInt(r4, r13)
            if (r7 == 0) goto L_0x0442
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            r4.mute_until = r12
        L_0x0442:
            im.bclpbkiauv.messenger.MessagesStorage r4 = r31.getMessagesStorage()
            long r13 = (long) r12
            r17 = 32
            long r13 = r13 << r17
            r22 = 1
            long r13 = r13 | r22
            r4.setDialogFlags(r5, r13)
            im.bclpbkiauv.messenger.NotificationsController r4 = r31.getNotificationsController()
            r4.removeNotificationsForDialog(r5)
            goto L_0x04a5
        L_0x045a:
            r21 = r4
            if (r7 == 0) goto L_0x0464
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            r12 = 0
            r4.mute_until = r12
            goto L_0x0465
        L_0x0464:
            r12 = 0
        L_0x0465:
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            r4.append(r13)
            r4.append(r5)
            java.lang.String r4 = r4.toString()
            r1.putInt(r4, r12)
            im.bclpbkiauv.messenger.MessagesStorage r4 = r31.getMessagesStorage()
            r13 = 0
            r4.setDialogFlags(r5, r13)
            goto L_0x04a5
        L_0x0481:
            r21 = r4
            r12 = 0
            if (r7 == 0) goto L_0x048a
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            r4.mute_until = r12
        L_0x048a:
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            r4.append(r13)
            r4.append(r5)
            java.lang.String r4 = r4.toString()
            r1.remove(r4)
            im.bclpbkiauv.messenger.MessagesStorage r4 = r31.getMessagesStorage()
            r12 = 0
            r4.setDialogFlags(r5, r12)
        L_0x04a5:
            goto L_0x052d
        L_0x04a7:
            im.bclpbkiauv.tgnet.TLRPC$NotifyPeer r4 = r0.peer
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_notifyChats
            if (r4 == 0) goto L_0x04d4
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            r5 = 1
            r4 = r4 & r5
            if (r4 == 0) goto L_0x04be
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            boolean r4 = r4.show_previews
            java.lang.String r5 = "EnablePreviewGroup"
            r1.putBoolean(r5, r4)
        L_0x04be:
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            r5 = 4
            r4 = r4 & r5
            if (r4 == 0) goto L_0x052d
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.mute_until
            java.lang.String r5 = "EnableGroup2"
            r1.putInt(r5, r4)
            goto L_0x052d
        L_0x04d4:
            im.bclpbkiauv.tgnet.TLRPC$NotifyPeer r4 = r0.peer
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_notifyUsers
            if (r4 == 0) goto L_0x0501
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            r5 = 1
            r4 = r4 & r5
            if (r4 == 0) goto L_0x04eb
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            boolean r4 = r4.show_previews
            java.lang.String r5 = "EnablePreviewAll"
            r1.putBoolean(r5, r4)
        L_0x04eb:
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            r5 = 4
            r4 = r4 & r5
            if (r4 == 0) goto L_0x052d
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.mute_until
            java.lang.String r5 = "EnableAll2"
            r1.putInt(r5, r4)
            goto L_0x052d
        L_0x0501:
            im.bclpbkiauv.tgnet.TLRPC$NotifyPeer r4 = r0.peer
            boolean r4 = r4 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_notifyBroadcasts
            if (r4 == 0) goto L_0x052d
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            r5 = 1
            r4 = r4 & r5
            if (r4 == 0) goto L_0x0518
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            boolean r4 = r4.show_previews
            java.lang.String r5 = "EnablePreviewChannel"
            r1.putBoolean(r5, r4)
        L_0x0518:
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.flags
            r5 = 4
            r4 = r4 & r5
            if (r4 == 0) goto L_0x052d
            im.bclpbkiauv.tgnet.TLRPC$PeerNotifySettings r4 = r0.notify_settings
            int r4 = r4.mute_until
            java.lang.String r5 = "EnableChannel2"
            r1.putInt(r5, r4)
        L_0x052d:
            r17 = r1
        L_0x052f:
            r1 = r26
            goto L_0x092c
        L_0x0533:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChannel
            if (r0 == 0) goto L_0x058d
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChannel r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChannel) r0
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            int r2 = r0.channel_id
            long r4 = (long) r2
            long r4 = -r4
            java.lang.Object r1 = r1.get(r4)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r1 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r1
            int r2 = r0.channel_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x057f
            if (r1 != 0) goto L_0x0567
            boolean r4 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_channel
            if (r4 == 0) goto L_0x0567
            boolean r4 = r2.left
            if (r4 != 0) goto L_0x0567
            im.bclpbkiauv.messenger.DispatchQueue r4 = im.bclpbkiauv.messenger.Utilities.stageQueue
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$vmL0axh_PL8dffJhC-JpQ1ws9SM r5 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$vmL0axh_PL8dffJhC-JpQ1ws9SM
            r5.<init>(r0)
            r4.postRunnable(r5)
            goto L_0x057f
        L_0x0567:
            boolean r4 = r2.left
            if (r4 == 0) goto L_0x057f
            if (r1 == 0) goto L_0x057f
            im.bclpbkiauv.tgnet.TLRPC$Dialog r4 = r8.proxyDialog
            if (r4 == 0) goto L_0x0579
            long r4 = r4.id
            long r6 = r1.id
            int r12 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r12 == 0) goto L_0x057f
        L_0x0579:
            long r4 = r1.id
            r6 = 0
            r8.deleteDialog(r4, r6)
        L_0x057f:
            r4 = r26
            r4 = r4 | 8192(0x2000, float:1.14794E-41)
            int r5 = r0.channel_id
            r6 = 0
            r7 = 1
            r8.loadFullChat(r5, r6, r7)
            r1 = r4
            goto L_0x092c
        L_0x058d:
            r4 = r26
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateChatDefaultBannedRights
            if (r0 == 0) goto L_0x05bd
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateChatDefaultBannedRights r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateChatDefaultBannedRights) r0
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            if (r1 == 0) goto L_0x05a1
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            goto L_0x05a5
        L_0x05a1:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
        L_0x05a5:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r1)
            im.bclpbkiauv.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x05bb
            im.bclpbkiauv.tgnet.TLRPC$TL_chatBannedRights r5 = r0.default_banned_rights
            r2.default_banned_rights = r5
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$4VA5kf8sXDR31aeNfVjWM9L6usk r5 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$4VA5kf8sXDR31aeNfVjWM9L6usk
            r5.<init>(r2)
            im.bclpbkiauv.messenger.AndroidUtilities.runOnUIThread(r5)
        L_0x05bb:
            goto L_0x092b
        L_0x05bd:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateStickerSets
            if (r0 == 0) goto L_0x05cf
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateStickerSets r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateStickerSets) r0
            im.bclpbkiauv.messenger.MediaDataController r1 = r31.getMediaDataController()
            r2 = 0
            r5 = 1
            r1.loadStickers(r2, r2, r5)
            goto L_0x092b
        L_0x05cf:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateStickerSetsOrder
            if (r0 == 0) goto L_0x05e6
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateStickerSetsOrder r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateStickerSetsOrder) r0
            im.bclpbkiauv.messenger.MediaDataController r1 = r31.getMediaDataController()
            boolean r2 = r0.masks
            r5 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateStickerSetsOrder r5 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateStickerSetsOrder) r5
            java.util.ArrayList<java.lang.Long> r5 = r5.order
            r1.reorderStickers(r2, r5)
            goto L_0x092b
        L_0x05e6:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateFavedStickers
            if (r0 == 0) goto L_0x05f6
            im.bclpbkiauv.messenger.MediaDataController r0 = r31.getMediaDataController()
            r1 = 2
            r2 = 0
            r5 = 1
            r0.loadRecents(r1, r2, r2, r5)
            goto L_0x092b
        L_0x05f6:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateContactsReset
            if (r0 == 0) goto L_0x0603
            im.bclpbkiauv.messenger.ContactsController r0 = r31.getContactsController()
            r0.forceImportContacts()
            goto L_0x092b
        L_0x0603:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateNewStickerSet
            if (r0 == 0) goto L_0x0615
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateNewStickerSet r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateNewStickerSet) r0
            im.bclpbkiauv.messenger.MediaDataController r1 = r31.getMediaDataController()
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_stickerSet r2 = r0.stickerset
            r1.addNewStickerSet(r2)
            goto L_0x092b
        L_0x0615:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateSavedGifs
            if (r0 == 0) goto L_0x062c
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r1 = "lastGifLoadTime"
            r5 = 0
            android.content.SharedPreferences$Editor r1 = r0.putLong(r1, r5)
            r1.commit()
            goto L_0x092b
        L_0x062c:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateRecentStickers
            if (r0 == 0) goto L_0x0643
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r1 = "lastStickersLoadTime"
            r5 = 0
            android.content.SharedPreferences$Editor r1 = r0.putLong(r1, r5)
            r1.commit()
            goto L_0x092b
        L_0x0643:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDraftMessage
            if (r0 == 0) goto L_0x067a
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateDraftMessage r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateDraftMessage) r0
            r16 = 1
            r1 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateDraftMessage r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateDraftMessage) r1
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r1.peer
            int r2 = r1.user_id
            if (r2 == 0) goto L_0x0659
            int r2 = r1.user_id
            long r5 = (long) r2
            goto L_0x0666
        L_0x0659:
            int r2 = r1.channel_id
            if (r2 == 0) goto L_0x0662
            int r2 = r1.channel_id
            int r2 = -r2
            long r5 = (long) r2
            goto L_0x0666
        L_0x0662:
            int r2 = r1.chat_id
            int r2 = -r2
            long r5 = (long) r2
        L_0x0666:
            im.bclpbkiauv.messenger.MediaDataController r22 = r31.getMediaDataController()
            im.bclpbkiauv.tgnet.TLRPC$DraftMessage r2 = r0.draft
            r26 = 0
            r27 = 1
            r23 = r5
            r25 = r2
            r22.saveDraft(r23, r25, r26, r27)
            r1 = r4
            goto L_0x092c
        L_0x067a:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateReadFeaturedStickers
            if (r0 == 0) goto L_0x0688
            im.bclpbkiauv.messenger.MediaDataController r0 = r31.getMediaDataController()
            r1 = 0
            r0.markFaturedStickersAsRead(r1)
            goto L_0x092b
        L_0x0688:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePhoneCall
            if (r0 == 0) goto L_0x07e8
            r1 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updatePhoneCall r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_updatePhoneCall) r1
            im.bclpbkiauv.tgnet.TLRPC$PhoneCall r2 = r1.phone_call
            im.bclpbkiauv.messenger.voip.VoIPService r5 = im.bclpbkiauv.messenger.voip.VoIPService.getSharedInstance()
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x06c3
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r6 = "Received call in update: "
            r0.append(r6)
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r6 = "call id "
            r0.append(r6)
            long r6 = r2.id
            r0.append(r6)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x06c3:
            boolean r0 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_phoneCallRequested
            if (r0 == 0) goto L_0x07c5
            int r0 = r2.date
            int r6 = r8.callRingTimeout
            int r6 = r6 / 1000
            int r0 = r0 + r6
            im.bclpbkiauv.tgnet.ConnectionsManager r6 = r31.getConnectionsManager()
            int r6 = r6.getCurrentTime()
            if (r0 >= r6) goto L_0x06e3
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x092b
            java.lang.String r0 = "ignoring too old call"
            im.bclpbkiauv.messenger.FileLog.d(r0)
            goto L_0x092b
        L_0x06e3:
            int r0 = android.os.Build.VERSION.SDK_INT
            r6 = 21
            if (r0 < r6) goto L_0x0700
            android.content.Context r0 = im.bclpbkiauv.messenger.ApplicationLoader.applicationContext
            androidx.core.app.NotificationManagerCompat r0 = androidx.core.app.NotificationManagerCompat.from(r0)
            boolean r0 = r0.areNotificationsEnabled()
            if (r0 != 0) goto L_0x0700
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x092b
            java.lang.String r0 = "Ignoring incoming call because notifications are disabled in system"
            im.bclpbkiauv.messenger.FileLog.d(r0)
            goto L_0x092b
        L_0x0700:
            android.content.Context r0 = im.bclpbkiauv.messenger.ApplicationLoader.applicationContext
            java.lang.String r6 = "phone"
            java.lang.Object r0 = r0.getSystemService(r6)
            r6 = r0
            android.telephony.TelephonyManager r6 = (android.telephony.TelephonyManager) r6
            if (r5 != 0) goto L_0x0779
            im.bclpbkiauv.tgnet.TLRPC$PhoneCall r0 = im.bclpbkiauv.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r0 != 0) goto L_0x0779
            int r0 = r6.getCallState()
            if (r0 == 0) goto L_0x0718
            goto L_0x0779
        L_0x0718:
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0732
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r7 = "Starting service for call "
            r0.append(r7)
            long r12 = r2.id
            r0.append(r12)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x0732:
            im.bclpbkiauv.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r2
            android.content.Intent r0 = new android.content.Intent
            android.content.Context r7 = im.bclpbkiauv.messenger.ApplicationLoader.applicationContext
            java.lang.Class<im.bclpbkiauv.messenger.voip.VoIPService> r12 = im.bclpbkiauv.messenger.voip.VoIPService.class
            r0.<init>(r7, r12)
            r7 = r0
            java.lang.String r0 = "is_outgoing"
            r12 = 0
            r7.putExtra(r0, r12)
            int r0 = r2.participant_id
            im.bclpbkiauv.messenger.UserConfig r12 = r31.getUserConfig()
            int r12 = r12.getClientUserId()
            if (r0 != r12) goto L_0x0753
            int r0 = r2.admin_id
            goto L_0x0755
        L_0x0753:
            int r0 = r2.participant_id
        L_0x0755:
            java.lang.String r12 = "user_id"
            r7.putExtra(r12, r0)
            int r0 = r8.currentAccount
            java.lang.String r12 = "account"
            r7.putExtra(r12, r0)
            int r0 = android.os.Build.VERSION.SDK_INT     // Catch:{ all -> 0x0774 }
            r12 = 26
            if (r0 < r12) goto L_0x076e
            android.content.Context r0 = im.bclpbkiauv.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x0774 }
            r0.startForegroundService(r7)     // Catch:{ all -> 0x0774 }
            goto L_0x0773
        L_0x076e:
            android.content.Context r0 = im.bclpbkiauv.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x0774 }
            r0.startService(r7)     // Catch:{ all -> 0x0774 }
        L_0x0773:
            goto L_0x0778
        L_0x0774:
            r0 = move-exception
            im.bclpbkiauv.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0778:
            goto L_0x07e6
        L_0x0779:
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0798
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r7 = "Auto-declining call "
            r0.append(r7)
            long r12 = r2.id
            r0.append(r12)
            java.lang.String r7 = " because there's already active one"
            r0.append(r7)
            java.lang.String r0 = r0.toString()
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x0798:
            im.bclpbkiauv.tgnet.TLRPC$TL_phone_discardCall r0 = new im.bclpbkiauv.tgnet.TLRPC$TL_phone_discardCall
            r0.<init>()
            im.bclpbkiauv.tgnet.TLRPC$TL_inputPhoneCall r7 = new im.bclpbkiauv.tgnet.TLRPC$TL_inputPhoneCall
            r7.<init>()
            r0.peer = r7
            im.bclpbkiauv.tgnet.TLRPC$TL_inputPhoneCall r7 = r0.peer
            long r12 = r2.access_hash
            r7.access_hash = r12
            im.bclpbkiauv.tgnet.TLRPC$TL_inputPhoneCall r7 = r0.peer
            long r12 = r2.id
            r7.id = r12
            im.bclpbkiauv.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy r7 = new im.bclpbkiauv.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy
            r7.<init>()
            r0.reason = r7
            im.bclpbkiauv.tgnet.ConnectionsManager r7 = r31.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$nMLdwxxHGw_qbcS1QlZzbXrXVLM r12 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$nMLdwxxHGw_qbcS1QlZzbXrXVLM
            r12.<init>()
            r7.sendRequest(r0, r12)
            goto L_0x092b
        L_0x07c5:
            if (r5 == 0) goto L_0x07cd
            if (r2 == 0) goto L_0x07cd
            r5.onCallUpdated(r2)
            goto L_0x07e6
        L_0x07cd:
            im.bclpbkiauv.tgnet.TLRPC$PhoneCall r0 = im.bclpbkiauv.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r0 == 0) goto L_0x07e6
            boolean r0 = im.bclpbkiauv.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x07da
            java.lang.String r0 = "Updated the call while the service is starting"
            im.bclpbkiauv.messenger.FileLog.d(r0)
        L_0x07da:
            long r6 = r2.id
            im.bclpbkiauv.tgnet.TLRPC$PhoneCall r0 = im.bclpbkiauv.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            long r12 = r0.id
            int r0 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r0 != 0) goto L_0x07e6
            im.bclpbkiauv.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r2
        L_0x07e6:
            goto L_0x092b
        L_0x07e8:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateDialogUnreadMark
            if (r0 == 0) goto L_0x0867
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateDialogUnreadMark r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateDialogUnreadMark) r0
            im.bclpbkiauv.tgnet.TLRPC$DialogPeer r1 = r0.peer
            boolean r1 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_dialogPeer
            if (r1 == 0) goto L_0x0819
            im.bclpbkiauv.tgnet.TLRPC$DialogPeer r1 = r0.peer
            im.bclpbkiauv.tgnet.TLRPC$TL_dialogPeer r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_dialogPeer) r1
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.peer
            int r2 = r2.user_id
            if (r2 == 0) goto L_0x0805
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.peer
            int r2 = r2.user_id
            long r5 = (long) r2
            goto L_0x0818
        L_0x0805:
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.peer
            int r2 = r2.chat_id
            if (r2 == 0) goto L_0x0812
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.peer
            int r2 = r2.chat_id
            int r2 = -r2
            long r5 = (long) r2
            goto L_0x0818
        L_0x0812:
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r1.peer
            int r2 = r2.channel_id
            int r2 = -r2
            long r5 = (long) r2
        L_0x0818:
            goto L_0x081b
        L_0x0819:
            r5 = 0
        L_0x081b:
            im.bclpbkiauv.messenger.MessagesStorage r1 = r31.getMessagesStorage()
            boolean r2 = r0.unread
            r1.setDialogUnread(r5, r2)
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            java.lang.Object r1 = r1.get(r5)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r1 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r1
            if (r1 == 0) goto L_0x0864
            boolean r2 = r1.unread_mark
            boolean r7 = r0.unread
            if (r2 == r7) goto L_0x0864
            boolean r2 = r0.unread
            r1.unread_mark = r2
            int r2 = r1.unread_count
            if (r2 != 0) goto L_0x0853
            boolean r2 = r8.isDialogMuted(r5)
            if (r2 != 0) goto L_0x0853
            boolean r2 = r1.unread_mark
            if (r2 == 0) goto L_0x084d
            int r2 = r8.unreadUnmutedDialogs
            r7 = 1
            int r2 = r2 + r7
            r8.unreadUnmutedDialogs = r2
            goto L_0x0853
        L_0x084d:
            r7 = 1
            int r2 = r8.unreadUnmutedDialogs
            int r2 = r2 - r7
            r8.unreadUnmutedDialogs = r2
        L_0x0853:
            int r2 = r1.unread_count
            if (r2 != 0) goto L_0x0860
            boolean r2 = r1.unread_mark
            if (r2 == 0) goto L_0x0860
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$Dialog> r2 = r8.dialogsUnreadOnly
            r2.add(r1)
        L_0x0860:
            r2 = r4 | 256(0x100, float:3.59E-43)
            r1 = r2
            goto L_0x0865
        L_0x0864:
            r1 = r4
        L_0x0865:
            goto L_0x092c
        L_0x0867:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateMessagePoll
            if (r0 == 0) goto L_0x088f
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateMessagePoll r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateMessagePoll) r0
            im.bclpbkiauv.messenger.NotificationCenter r1 = r31.getNotificationCenter()
            int r2 = im.bclpbkiauv.messenger.NotificationCenter.didUpdatePollResults
            r5 = 3
            java.lang.Object[] r6 = new java.lang.Object[r5]
            long r12 = r0.poll_id
            java.lang.Long r5 = java.lang.Long.valueOf(r12)
            r7 = 0
            r6[r7] = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_poll r5 = r0.poll
            r7 = 1
            r6[r7] = r5
            im.bclpbkiauv.tgnet.TLRPC$TL_pollResults r5 = r0.results
            r7 = 2
            r6[r7] = r5
            r1.postNotificationName(r2, r6)
            goto L_0x092b
        L_0x088f:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePeerSettings
            if (r0 == 0) goto L_0x08bd
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updatePeerSettings r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updatePeerSettings) r0
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            boolean r1 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_peerUser
            if (r1 == 0) goto L_0x08a2
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.user_id
            long r1 = (long) r1
            goto L_0x08b5
        L_0x08a2:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            boolean r1 = r1 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_peerChat
            if (r1 == 0) goto L_0x08af
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            int r1 = -r1
            long r1 = (long) r1
            goto L_0x08b5
        L_0x08af:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            int r1 = -r1
            long r1 = (long) r1
        L_0x08b5:
            im.bclpbkiauv.tgnet.TLRPC$TL_peerSettings r5 = r0.settings
            r6 = 1
            r8.savePeerSettings(r1, r5, r6)
            goto L_0x092b
        L_0x08bd:
            r6 = 1
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updatePeerLocated
            if (r0 == 0) goto L_0x08d1
            im.bclpbkiauv.messenger.NotificationCenter r0 = r31.getNotificationCenter()
            int r1 = im.bclpbkiauv.messenger.NotificationCenter.newPeopleNearbyAvailable
            java.lang.Object[] r2 = new java.lang.Object[r6]
            r5 = 0
            r2[r5] = r9
            r0.postNotificationName(r1, r2)
            goto L_0x092b
        L_0x08d1:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateMessageReactions
            if (r0 == 0) goto L_0x0919
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateMessageReactions r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateMessageReactions) r0
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            if (r1 == 0) goto L_0x08e5
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.chat_id
            int r1 = -r1
            long r1 = (long) r1
            goto L_0x08f7
        L_0x08e5:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            if (r1 == 0) goto L_0x08f2
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.channel_id
            int r1 = -r1
            long r1 = (long) r1
            goto L_0x08f7
        L_0x08f2:
            im.bclpbkiauv.tgnet.TLRPC$Peer r1 = r0.peer
            int r1 = r1.user_id
            long r1 = (long) r1
        L_0x08f7:
            im.bclpbkiauv.messenger.NotificationCenter r5 = r31.getNotificationCenter()
            int r6 = im.bclpbkiauv.messenger.NotificationCenter.didUpdateReactions
            r7 = 3
            java.lang.Object[] r12 = new java.lang.Object[r7]
            java.lang.Long r7 = java.lang.Long.valueOf(r1)
            r13 = 0
            r12[r13] = r7
            int r7 = r0.msg_id
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r13 = 1
            r12[r13] = r7
            im.bclpbkiauv.tgnet.TLRPC$TL_messageReactions r7 = r0.reactions
            r13 = 2
            r12[r13] = r7
            r5.postNotificationName(r6, r12)
            goto L_0x092a
        L_0x0919:
            boolean r0 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_updateTheme
            if (r0 == 0) goto L_0x092a
            r0 = r9
            im.bclpbkiauv.tgnet.TLRPC$TL_updateTheme r0 = (im.bclpbkiauv.tgnet.TLRPC.TL_updateTheme) r0
            im.bclpbkiauv.tgnet.TLRPC$Theme r1 = r0.theme
            im.bclpbkiauv.tgnet.TLRPC$TL_theme r1 = (im.bclpbkiauv.tgnet.TLRPC.TL_theme) r1
            r2 = 0
            r5 = 1
            im.bclpbkiauv.ui.actionbar.Theme.setThemeUploadInfo(r2, r1, r5)
            goto L_0x092b
        L_0x092a:
        L_0x092b:
            r1 = r4
        L_0x092c:
            int r15 = r15 + 1
            r9 = r33
            r12 = r36
            r13 = r37
            r14 = r40
            r2 = r3
            r6 = r18
            r3 = r28
            r5 = 0
            goto L_0x002d
        L_0x093e:
            r4 = r1
            r28 = r3
            r18 = r6
            r3 = r2
            if (r17 == 0) goto L_0x0956
            r17.commit()
            im.bclpbkiauv.messenger.NotificationCenter r0 = r31.getNotificationCenter()
            int r1 = im.bclpbkiauv.messenger.NotificationCenter.notificationsSettingsUpdated
            r2 = 0
            java.lang.Object[] r5 = new java.lang.Object[r2]
            r0.postNotificationName(r1, r5)
            goto L_0x0957
        L_0x0956:
            r2 = 0
        L_0x0957:
            im.bclpbkiauv.messenger.MessagesStorage r0 = r31.getMessagesStorage()
            r1 = r28
            r5 = 1
            r0.updateUsers(r1, r5, r5, r5)
            im.bclpbkiauv.messenger.MessagesStorage r0 = r31.getMessagesStorage()
            r0.updateUsers(r3, r2, r5, r5)
            r0 = r4
            r1 = r16
            goto L_0x096e
        L_0x096c:
            r2 = 0
            r5 = 1
        L_0x096e:
            if (r10 == 0) goto L_0x0a5a
            im.bclpbkiauv.messenger.NotificationCenter r3 = r31.getNotificationCenter()
            int r4 = im.bclpbkiauv.messenger.NotificationCenter.didReceivedWebpagesInUpdates
            java.lang.Object[] r6 = new java.lang.Object[r5]
            r6[r2] = r10
            r3.postNotificationName(r4, r6)
            r2 = 0
        L_0x097e:
            r3 = 2
            if (r2 >= r3) goto L_0x0a5a
            if (r2 != r5) goto L_0x0986
            java.util.HashMap<java.lang.String, java.util.ArrayList<im.bclpbkiauv.messenger.MessageObject>> r3 = r8.reloadingScheduledWebpages
            goto L_0x0988
        L_0x0986:
            java.util.HashMap<java.lang.String, java.util.ArrayList<im.bclpbkiauv.messenger.MessageObject>> r3 = r8.reloadingWebpages
        L_0x0988:
            if (r2 != r5) goto L_0x098d
            android.util.LongSparseArray<java.util.ArrayList<im.bclpbkiauv.messenger.MessageObject>> r4 = r8.reloadingScheduledWebpagesPending
            goto L_0x098f
        L_0x098d:
            android.util.LongSparseArray<java.util.ArrayList<im.bclpbkiauv.messenger.MessageObject>> r4 = r8.reloadingWebpagesPending
        L_0x098f:
            r5 = 0
            int r6 = r34.size()
        L_0x0994:
            if (r5 >= r6) goto L_0x0a51
            long r12 = r10.keyAt(r5)
            java.lang.Object r7 = r4.get(r12)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            r4.remove(r12)
            if (r7 == 0) goto L_0x0a43
            java.lang.Object r9 = r10.valueAt(r5)
            im.bclpbkiauv.tgnet.TLRPC$WebPage r9 = (im.bclpbkiauv.tgnet.TLRPC.WebPage) r9
            java.util.ArrayList r14 = new java.util.ArrayList
            r14.<init>()
            r15 = 0
            r17 = r3
            boolean r3 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_webPage
            if (r3 != 0) goto L_0x09c7
            boolean r3 = r9 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_webPageEmpty
            if (r3 == 0) goto L_0x09bf
            r29 = r12
            goto L_0x09c9
        L_0x09bf:
            r29 = r12
            long r12 = r9.id
            r4.put(r12, r7)
            goto L_0x0a01
        L_0x09c7:
            r29 = r12
        L_0x09c9:
            r3 = 0
            int r12 = r7.size()
        L_0x09ce:
            if (r3 >= r12) goto L_0x0a01
            java.lang.Object r13 = r7.get(r3)
            im.bclpbkiauv.messenger.MessageObject r13 = (im.bclpbkiauv.messenger.MessageObject) r13
            im.bclpbkiauv.tgnet.TLRPC$Message r13 = r13.messageOwner
            im.bclpbkiauv.tgnet.TLRPC$MessageMedia r13 = r13.media
            r13.webpage = r9
            if (r3 != 0) goto L_0x09f3
            java.lang.Object r13 = r7.get(r3)
            im.bclpbkiauv.messenger.MessageObject r13 = (im.bclpbkiauv.messenger.MessageObject) r13
            long r15 = r13.getDialogId()
            java.lang.Object r13 = r7.get(r3)
            im.bclpbkiauv.messenger.MessageObject r13 = (im.bclpbkiauv.messenger.MessageObject) r13
            im.bclpbkiauv.tgnet.TLRPC$Message r13 = r13.messageOwner
            im.bclpbkiauv.messenger.ImageLoader.saveMessageThumbs(r13)
        L_0x09f3:
            java.lang.Object r13 = r7.get(r3)
            im.bclpbkiauv.messenger.MessageObject r13 = (im.bclpbkiauv.messenger.MessageObject) r13
            im.bclpbkiauv.tgnet.TLRPC$Message r13 = r13.messageOwner
            r14.add(r13)
            int r3 = r3 + 1
            goto L_0x09ce
        L_0x0a01:
            boolean r3 = r14.isEmpty()
            if (r3 != 0) goto L_0x0a40
            im.bclpbkiauv.messenger.MessagesStorage r22 = r31.getMessagesStorage()
            r24 = 1
            r25 = 1
            r26 = 0
            im.bclpbkiauv.messenger.DownloadController r3 = r31.getDownloadController()
            int r27 = r3.getAutodownloadMask()
            r3 = 1
            if (r2 != r3) goto L_0x0a1f
            r28 = 1
            goto L_0x0a21
        L_0x0a1f:
            r28 = 0
        L_0x0a21:
            r23 = r14
            r22.putMessages((java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC.Message>) r23, (boolean) r24, (boolean) r25, (boolean) r26, (int) r27, (boolean) r28)
            im.bclpbkiauv.messenger.NotificationCenter r3 = r31.getNotificationCenter()
            int r12 = im.bclpbkiauv.messenger.NotificationCenter.replaceMessagesObjects
            r18 = r4
            r13 = 2
            java.lang.Object[] r4 = new java.lang.Object[r13]
            java.lang.Long r13 = java.lang.Long.valueOf(r15)
            r20 = 0
            r4[r20] = r13
            r13 = 1
            r4[r13] = r7
            r3.postNotificationName(r12, r4)
            goto L_0x0a49
        L_0x0a40:
            r18 = r4
            goto L_0x0a49
        L_0x0a43:
            r17 = r3
            r18 = r4
            r29 = r12
        L_0x0a49:
            int r5 = r5 + 1
            r3 = r17
            r4 = r18
            goto L_0x0994
        L_0x0a51:
            r17 = r3
            r18 = r4
            int r2 = r2 + 1
            r5 = 1
            goto L_0x097e
        L_0x0a5a:
            r2 = 0
            if (r11 == 0) goto L_0x0a78
            r3 = 0
            int r4 = r35.size()
        L_0x0a62:
            if (r3 >= r4) goto L_0x0a75
            long r5 = r11.keyAt(r3)
            java.lang.Object r7 = r11.valueAt(r3)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            r9 = 0
            r8.updateInterfaceWithMessages(r5, r7, r9)
            int r3 = r3 + 1
            goto L_0x0a62
        L_0x0a75:
            r2 = 1
            r3 = 0
            goto L_0x0a81
        L_0x0a78:
            if (r1 == 0) goto L_0x0a80
            r3 = 0
            r8.sortDialogs(r3)
            r2 = 1
            goto L_0x0a81
        L_0x0a80:
            r3 = 0
        L_0x0a81:
            r4 = r3
            r3 = r36
            if (r3 == 0) goto L_0x0a9e
            r5 = 0
            int r6 = r36.size()
        L_0x0a8b:
            if (r5 >= r6) goto L_0x0a9e
            long r12 = r3.keyAt(r5)
            java.lang.Object r7 = r3.valueAt(r5)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            r9 = 1
            r8.updateInterfaceWithMessages(r12, r7, r9)
            int r5 = r5 + 1
            goto L_0x0a8b
        L_0x0a9e:
            r5 = r37
            if (r5 == 0) goto L_0x0b73
            r6 = 0
            int r7 = r37.size()
        L_0x0aa7:
            if (r6 >= r7) goto L_0x0b6e
            long r12 = r5.keyAt(r6)
            java.lang.Object r9 = r5.valueAt(r6)
            java.util.ArrayList r9 = (java.util.ArrayList) r9
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r14 = r8.dialogMessage
            java.lang.Object r14 = r14.get(r12)
            im.bclpbkiauv.messenger.MessageObject r14 = (im.bclpbkiauv.messenger.MessageObject) r14
            if (r14 == 0) goto L_0x0b39
            r15 = 0
            int r4 = r9.size()
        L_0x0ac2:
            if (r15 >= r4) goto L_0x0b33
            java.lang.Object r16 = r9.get(r15)
            r17 = r1
            r1 = r16
            im.bclpbkiauv.messenger.MessageObject r1 = (im.bclpbkiauv.messenger.MessageObject) r1
            r16 = r2
            int r2 = r14.getId()
            int r3 = r1.getId()
            if (r2 != r3) goto L_0x0afb
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r2 = r8.dialogMessage
            r2.put(r12, r1)
            im.bclpbkiauv.tgnet.TLRPC$Message r2 = r1.messageOwner
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r2.to_id
            if (r2 == 0) goto L_0x0af6
            im.bclpbkiauv.tgnet.TLRPC$Message r2 = r1.messageOwner
            im.bclpbkiauv.tgnet.TLRPC$Peer r2 = r2.to_id
            int r2 = r2.channel_id
            if (r2 != 0) goto L_0x0af6
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r2 = r8.dialogMessagesByIds
            int r3 = r1.getId()
            r2.put(r3, r1)
        L_0x0af6:
            r2 = 1
            r16 = r2
            r2 = 0
            goto L_0x0b3e
        L_0x0afb:
            long r2 = r14.getDialogId()
            long r22 = r1.getDialogId()
            int r18 = (r2 > r22 ? 1 : (r2 == r22 ? 0 : -1))
            if (r18 != 0) goto L_0x0b29
            im.bclpbkiauv.tgnet.TLRPC$Message r2 = r14.messageOwner
            im.bclpbkiauv.tgnet.TLRPC$MessageAction r2 = r2.action
            boolean r2 = r2 instanceof im.bclpbkiauv.tgnet.TLRPC.TL_messageActionPinMessage
            if (r2 == 0) goto L_0x0b29
            im.bclpbkiauv.messenger.MessageObject r2 = r14.replyMessageObject
            if (r2 == 0) goto L_0x0b29
            im.bclpbkiauv.messenger.MessageObject r2 = r14.replyMessageObject
            int r2 = r2.getId()
            int r3 = r1.getId()
            if (r2 != r3) goto L_0x0b29
            r14.replyMessageObject = r1
            r2 = 0
            r14.generatePinMessageText(r2, r2)
            r3 = 1
            r16 = r3
            goto L_0x0b3e
        L_0x0b29:
            r2 = 0
            int r15 = r15 + 1
            r3 = r36
            r2 = r16
            r1 = r17
            goto L_0x0ac2
        L_0x0b33:
            r17 = r1
            r16 = r2
            r2 = 0
            goto L_0x0b3e
        L_0x0b39:
            r17 = r1
            r16 = r2
            r2 = r4
        L_0x0b3e:
            im.bclpbkiauv.messenger.MediaDataController r1 = r31.getMediaDataController()
            r3 = 0
            r1.loadReplyMessagesForMessages(r9, r12, r3)
            im.bclpbkiauv.messenger.NotificationCenter r1 = r31.getNotificationCenter()
            int r4 = im.bclpbkiauv.messenger.NotificationCenter.replaceMessagesObjects
            r15 = 3
            java.lang.Object[] r2 = new java.lang.Object[r15]
            java.lang.Long r18 = java.lang.Long.valueOf(r12)
            r2[r3] = r18
            r18 = 1
            r2[r18] = r9
            java.lang.Boolean r18 = java.lang.Boolean.valueOf(r3)
            r3 = 2
            r2[r3] = r18
            r1.postNotificationName(r4, r2)
            int r6 = r6 + 1
            r3 = r36
            r2 = r16
            r1 = r17
            r4 = 0
            goto L_0x0aa7
        L_0x0b6e:
            r17 = r1
            r16 = r2
            goto L_0x0b75
        L_0x0b73:
            r17 = r1
        L_0x0b75:
            if (r2 == 0) goto L_0x0b83
            im.bclpbkiauv.messenger.NotificationCenter r1 = r31.getNotificationCenter()
            int r3 = im.bclpbkiauv.messenger.NotificationCenter.dialogsNeedReload
            r4 = 0
            java.lang.Object[] r6 = new java.lang.Object[r4]
            r1.postNotificationName(r3, r6)
        L_0x0b83:
            if (r38 == 0) goto L_0x0b87
            r0 = r0 | 64
        L_0x0b87:
            if (r39 == 0) goto L_0x0b8d
            r0 = r0 | 1
            r0 = r0 | 128(0x80, float:1.794E-43)
        L_0x0b8d:
            r1 = r40
            if (r1 == 0) goto L_0x0ba8
            r3 = 0
            int r4 = r40.size()
        L_0x0b96:
            if (r3 >= r4) goto L_0x0ba8
            java.lang.Object r6 = r1.get(r3)
            im.bclpbkiauv.tgnet.TLRPC$ChatParticipants r6 = (im.bclpbkiauv.tgnet.TLRPC.ChatParticipants) r6
            im.bclpbkiauv.messenger.MessagesStorage r7 = r31.getMessagesStorage()
            r7.updateChatParticipants(r6)
            int r3 = r3 + 1
            goto L_0x0b96
        L_0x0ba8:
            if (r41 == 0) goto L_0x0bba
            im.bclpbkiauv.messenger.NotificationCenter r3 = r31.getNotificationCenter()
            int r4 = im.bclpbkiauv.messenger.NotificationCenter.didUpdatedMessagesViews
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]
            r9 = 0
            r7[r9] = r41
            r3.postNotificationName(r4, r7)
            goto L_0x0bbb
        L_0x0bba:
            r6 = 1
        L_0x0bbb:
            if (r0 == 0) goto L_0x0bcf
            im.bclpbkiauv.messenger.NotificationCenter r3 = r31.getNotificationCenter()
            int r4 = im.bclpbkiauv.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r6 = new java.lang.Object[r6]
            java.lang.Integer r7 = java.lang.Integer.valueOf(r0)
            r9 = 0
            r6[r9] = r7
            r3.postNotificationName(r4, r6)
        L_0x0bcf:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.lambda$processUpdateArray$286$MessagesController(int, java.util.ArrayList, android.util.LongSparseArray, android.util.LongSparseArray, android.util.LongSparseArray, android.util.LongSparseArray, boolean, java.util.ArrayList, java.util.ArrayList, android.util.SparseArray):void");
    }

    public /* synthetic */ void lambda$null$282$MessagesController(TLRPC.User currentUser) {
        getContactsController().addContactToPhoneBook(currentUser, true);
    }

    public /* synthetic */ void lambda$null$283$MessagesController(TLRPC.TL_updateChannel update) {
        getChannelDifference(update.channel_id, 1, 0, (TLRPC.InputChannel) null);
    }

    public /* synthetic */ void lambda$null$284$MessagesController(TLRPC.Chat chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, chat);
    }

    public /* synthetic */ void lambda$null$285$MessagesController(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public /* synthetic */ void lambda$processUpdateArray$288$MessagesController(SparseLongArray markAsReadMessagesInboxFinal, SparseLongArray markAsReadMessagesOutboxFinal, SparseIntArray markAsReadEncryptedFinal, ArrayList markAsReadMessagesFinal, SparseArray deletedMessagesFinal, SparseArray scheduledDeletedMessagesFinal, SparseIntArray clearHistoryMessagesFinal) {
        AndroidUtilities.runOnUIThread(new Runnable(markAsReadMessagesInboxFinal, markAsReadMessagesOutboxFinal, markAsReadEncryptedFinal, markAsReadMessagesFinal, deletedMessagesFinal, scheduledDeletedMessagesFinal, clearHistoryMessagesFinal) {
            private final /* synthetic */ SparseLongArray f$1;
            private final /* synthetic */ SparseLongArray f$2;
            private final /* synthetic */ SparseIntArray f$3;
            private final /* synthetic */ ArrayList f$4;
            private final /* synthetic */ SparseArray f$5;
            private final /* synthetic */ SparseArray f$6;
            private final /* synthetic */ SparseIntArray f$7;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$null$287$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
            }
        });
    }

    /* JADX WARNING: type inference failed for: r12v5 */
    /* JADX WARNING: type inference failed for: r12v6 */
    /* JADX WARNING: Incorrect type for immutable var: ssa=int, code=?, for r12v1, types: [int, boolean] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$287$MessagesController(im.bclpbkiauv.messenger.support.SparseLongArray r20, im.bclpbkiauv.messenger.support.SparseLongArray r21, android.util.SparseIntArray r22, java.util.ArrayList r23, android.util.SparseArray r24, android.util.SparseArray r25, android.util.SparseIntArray r26) {
        /*
            r19 = this;
            r0 = r19
            r8 = r20
            r9 = r21
            r10 = r22
            r11 = r24
            r12 = r25
            r13 = r26
            r14 = 0
            r15 = 2
            r16 = 0
            r7 = 1
            if (r8 != 0) goto L_0x0017
            if (r9 == 0) goto L_0x00f7
        L_0x0017:
            im.bclpbkiauv.messenger.NotificationCenter r1 = r19.getNotificationCenter()
            int r2 = im.bclpbkiauv.messenger.NotificationCenter.messagesRead
            java.lang.Object[] r3 = new java.lang.Object[r15]
            r3[r16] = r8
            r3[r7] = r9
            r1.postNotificationName(r2, r3)
            if (r8 == 0) goto L_0x00b8
            im.bclpbkiauv.messenger.NotificationsController r1 = r19.getNotificationsController()
            r3 = 0
            r5 = 0
            r6 = 0
            r17 = 0
            r2 = r20
            r7 = r17
            r1.processReadMessages(r2, r3, r5, r6, r7)
            android.content.SharedPreferences r1 = r0.notificationsPreferences
            android.content.SharedPreferences$Editor r1 = r1.edit()
            r2 = 0
            int r3 = r20.size()
        L_0x0044:
            if (r2 >= r3) goto L_0x00b5
            int r4 = r8.keyAt(r2)
            long r5 = r8.valueAt(r2)
            int r6 = (int) r5
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r5 = r0.dialogs_dict
            long r7 = (long) r4
            java.lang.Object r5 = r5.get(r7)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r5 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r5
            if (r5 == 0) goto L_0x007a
            int r7 = r5.top_message
            if (r7 <= 0) goto L_0x007a
            int r7 = r5.top_message
            if (r7 > r6) goto L_0x007a
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r7 = r0.dialogMessage
            long r12 = r5.id
            java.lang.Object r7 = r7.get(r12)
            im.bclpbkiauv.messenger.MessageObject r7 = (im.bclpbkiauv.messenger.MessageObject) r7
            if (r7 == 0) goto L_0x007a
            boolean r8 = r7.isOut()
            if (r8 != 0) goto L_0x007a
            r7.setIsRead()
            r8 = r14 | 256(0x100, float:3.59E-43)
            r14 = r8
        L_0x007a:
            im.bclpbkiauv.messenger.UserConfig r7 = r19.getUserConfig()
            int r7 = r7.getClientUserId()
            if (r4 == r7) goto L_0x00ac
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            java.lang.String r8 = "diditem"
            r7.append(r8)
            r7.append(r4)
            java.lang.String r7 = r7.toString()
            r1.remove(r7)
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            java.lang.String r8 = "diditemo"
            r7.append(r8)
            r7.append(r4)
            java.lang.String r7 = r7.toString()
            r1.remove(r7)
        L_0x00ac:
            int r2 = r2 + 1
            r8 = r20
            r12 = r25
            r13 = r26
            goto L_0x0044
        L_0x00b5:
            r1.commit()
        L_0x00b8:
            if (r9 == 0) goto L_0x00f7
            r1 = 0
            int r2 = r21.size()
        L_0x00bf:
            if (r1 >= r2) goto L_0x00f7
            int r3 = r9.keyAt(r1)
            long r4 = r9.valueAt(r1)
            int r5 = (int) r4
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            long r6 = (long) r3
            java.lang.Object r4 = r4.get(r6)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r4 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r4
            if (r4 == 0) goto L_0x00f4
            int r6 = r4.top_message
            if (r6 <= 0) goto L_0x00f4
            int r6 = r4.top_message
            if (r6 > r5) goto L_0x00f4
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r6 = r0.dialogMessage
            long r7 = r4.id
            java.lang.Object r6 = r6.get(r7)
            im.bclpbkiauv.messenger.MessageObject r6 = (im.bclpbkiauv.messenger.MessageObject) r6
            if (r6 == 0) goto L_0x00f4
            boolean r7 = r6.isOut()
            if (r7 == 0) goto L_0x00f4
            r6.setIsRead()
            r14 = r14 | 256(0x100, float:3.59E-43)
        L_0x00f4:
            int r1 = r1 + 1
            goto L_0x00bf
        L_0x00f7:
            if (r10 == 0) goto L_0x0149
            r1 = 0
            int r2 = r22.size()
        L_0x00fe:
            if (r1 >= r2) goto L_0x0147
            int r3 = r10.keyAt(r1)
            int r4 = r10.valueAt(r1)
            im.bclpbkiauv.messenger.NotificationCenter r5 = r19.getNotificationCenter()
            int r6 = im.bclpbkiauv.messenger.NotificationCenter.messagesReadEncrypted
            java.lang.Object[] r7 = new java.lang.Object[r15]
            java.lang.Integer r8 = java.lang.Integer.valueOf(r3)
            r7[r16] = r8
            java.lang.Integer r8 = java.lang.Integer.valueOf(r4)
            r12 = 1
            r7[r12] = r8
            r5.postNotificationName(r6, r7)
            long r5 = (long) r3
            r7 = 32
            long r5 = r5 << r7
            android.util.LongSparseArray<im.bclpbkiauv.tgnet.TLRPC$Dialog> r7 = r0.dialogs_dict
            java.lang.Object r7 = r7.get(r5)
            im.bclpbkiauv.tgnet.TLRPC$Dialog r7 = (im.bclpbkiauv.tgnet.TLRPC.Dialog) r7
            if (r7 == 0) goto L_0x0144
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r8 = r0.dialogMessage
            java.lang.Object r8 = r8.get(r5)
            im.bclpbkiauv.messenger.MessageObject r8 = (im.bclpbkiauv.messenger.MessageObject) r8
            if (r8 == 0) goto L_0x0144
            im.bclpbkiauv.tgnet.TLRPC$Message r13 = r8.messageOwner
            int r13 = r13.date
            if (r13 > r4) goto L_0x0144
            r8.setIsRead()
            r13 = r14 | 256(0x100, float:3.59E-43)
            r14 = r13
        L_0x0144:
            int r1 = r1 + 1
            goto L_0x00fe
        L_0x0147:
            r12 = 1
            goto L_0x014a
        L_0x0149:
            r12 = 1
        L_0x014a:
            if (r23 == 0) goto L_0x0159
            im.bclpbkiauv.messenger.NotificationCenter r1 = r19.getNotificationCenter()
            int r2 = im.bclpbkiauv.messenger.NotificationCenter.messagesReadContent
            java.lang.Object[] r3 = new java.lang.Object[r12]
            r3[r16] = r23
            r1.postNotificationName(r2, r3)
        L_0x0159:
            r1 = 3
            if (r11 == 0) goto L_0x01e1
            r2 = 0
            int r3 = r24.size()
        L_0x0161:
            if (r2 >= r3) goto L_0x01da
            int r4 = r11.keyAt(r2)
            java.lang.Object r5 = r11.valueAt(r2)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x0170
            goto L_0x01d6
        L_0x0170:
            im.bclpbkiauv.messenger.NotificationCenter r6 = r19.getNotificationCenter()
            int r7 = im.bclpbkiauv.messenger.NotificationCenter.messagesDeleted
            java.lang.Object[] r8 = new java.lang.Object[r1]
            r8[r16] = r5
            java.lang.Integer r13 = java.lang.Integer.valueOf(r4)
            r8[r12] = r13
            java.lang.Boolean r13 = java.lang.Boolean.valueOf(r16)
            r8[r15] = r13
            r6.postNotificationName(r7, r8)
            if (r4 != 0) goto L_0x01ad
            r6 = 0
            int r7 = r5.size()
        L_0x0190:
            if (r6 >= r7) goto L_0x01ac
            java.lang.Object r8 = r5.get(r6)
            java.lang.Integer r8 = (java.lang.Integer) r8
            android.util.SparseArray<im.bclpbkiauv.messenger.MessageObject> r13 = r0.dialogMessagesByIds
            int r15 = r8.intValue()
            java.lang.Object r13 = r13.get(r15)
            im.bclpbkiauv.messenger.MessageObject r13 = (im.bclpbkiauv.messenger.MessageObject) r13
            if (r13 == 0) goto L_0x01a8
            r13.deleted = r12
        L_0x01a8:
            int r6 = r6 + 1
            r15 = 2
            goto L_0x0190
        L_0x01ac:
            goto L_0x01d6
        L_0x01ad:
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r6 = r0.dialogMessage
            int r7 = -r4
            long r7 = (long) r7
            java.lang.Object r6 = r6.get(r7)
            im.bclpbkiauv.messenger.MessageObject r6 = (im.bclpbkiauv.messenger.MessageObject) r6
            if (r6 == 0) goto L_0x01d6
            r7 = 0
            int r8 = r5.size()
        L_0x01be:
            if (r7 >= r8) goto L_0x01d6
            int r13 = r6.getId()
            java.lang.Object r15 = r5.get(r7)
            java.lang.Integer r15 = (java.lang.Integer) r15
            int r15 = r15.intValue()
            if (r13 != r15) goto L_0x01d3
            r6.deleted = r12
            goto L_0x01d6
        L_0x01d3:
            int r7 = r7 + 1
            goto L_0x01be
        L_0x01d6:
            int r2 = r2 + 1
            r15 = 2
            goto L_0x0161
        L_0x01da:
            im.bclpbkiauv.messenger.NotificationsController r2 = r19.getNotificationsController()
            r2.removeDeletedMessagesFromNotifications(r11)
        L_0x01e1:
            r2 = r25
            if (r2 == 0) goto L_0x0219
            r3 = 0
            int r4 = r25.size()
        L_0x01ea:
            if (r3 >= r4) goto L_0x0219
            int r5 = r2.keyAt(r3)
            java.lang.Object r6 = r2.valueAt(r3)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            if (r6 != 0) goto L_0x01f9
            goto L_0x0216
        L_0x01f9:
            int r7 = r0.currentAccount
            im.bclpbkiauv.messenger.NotificationCenter r7 = im.bclpbkiauv.messenger.NotificationCenter.getInstance(r7)
            int r8 = im.bclpbkiauv.messenger.NotificationCenter.messagesDeleted
            java.lang.Object[] r13 = new java.lang.Object[r1]
            r13[r16] = r6
            java.lang.Integer r15 = java.lang.Integer.valueOf(r5)
            r13[r12] = r15
            java.lang.Boolean r15 = java.lang.Boolean.valueOf(r12)
            r17 = 2
            r13[r17] = r15
            r7.postNotificationName(r8, r13)
        L_0x0216:
            int r3 = r3 + 1
            goto L_0x01ea
        L_0x0219:
            r1 = r26
            if (r1 == 0) goto L_0x0269
            r3 = 0
            int r4 = r26.size()
        L_0x0222:
            if (r3 >= r4) goto L_0x0262
            int r5 = r1.keyAt(r3)
            int r6 = r1.valueAt(r3)
            int r7 = -r5
            long r7 = (long) r7
            im.bclpbkiauv.messenger.NotificationCenter r13 = r19.getNotificationCenter()
            int r15 = im.bclpbkiauv.messenger.NotificationCenter.historyCleared
            r12 = 2
            java.lang.Object[] r2 = new java.lang.Object[r12]
            java.lang.Long r17 = java.lang.Long.valueOf(r7)
            r2[r16] = r17
            java.lang.Integer r17 = java.lang.Integer.valueOf(r6)
            r18 = 1
            r2[r18] = r17
            r13.postNotificationName(r15, r2)
            android.util.LongSparseArray<im.bclpbkiauv.messenger.MessageObject> r2 = r0.dialogMessage
            java.lang.Object r2 = r2.get(r7)
            im.bclpbkiauv.messenger.MessageObject r2 = (im.bclpbkiauv.messenger.MessageObject) r2
            if (r2 == 0) goto L_0x025c
            int r13 = r2.getId()
            if (r13 > r6) goto L_0x025c
            r12 = 1
            r2.deleted = r12
            goto L_0x0262
        L_0x025c:
            int r3 = r3 + 1
            r2 = r25
            r12 = 1
            goto L_0x0222
        L_0x0262:
            im.bclpbkiauv.messenger.NotificationsController r2 = r19.getNotificationsController()
            r2.removeDeletedHisoryFromNotifications(r1)
        L_0x0269:
            if (r14 == 0) goto L_0x027d
            im.bclpbkiauv.messenger.NotificationCenter r2 = r19.getNotificationCenter()
            int r3 = im.bclpbkiauv.messenger.NotificationCenter.updateInterfaces
            r4 = 1
            java.lang.Object[] r4 = new java.lang.Object[r4]
            java.lang.Integer r5 = java.lang.Integer.valueOf(r14)
            r4[r16] = r5
            r2.postNotificationName(r3, r4)
        L_0x027d:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.lambda$null$287$MessagesController(im.bclpbkiauv.messenger.support.SparseLongArray, im.bclpbkiauv.messenger.support.SparseLongArray, android.util.SparseIntArray, java.util.ArrayList, android.util.SparseArray, android.util.SparseArray, android.util.SparseIntArray):void");
    }

    public /* synthetic */ void lambda$processUpdateArray$289$MessagesController(ArrayList arrayList, int key) {
        getMessagesStorage().updateDialogsWithDeletedMessages(arrayList, getMessagesStorage().markMessagesAsDeleted(arrayList, false, key, true, false), false, key);
    }

    public /* synthetic */ void lambda$processUpdateArray$290$MessagesController(int key, int id) {
        getMessagesStorage().updateDialogsWithDeletedMessages(new ArrayList(), getMessagesStorage().markMessagesAsDeleted(key, id, false, true), false, key);
    }

    public boolean isDialogMuted(long dialog_id) {
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int mute_type = sharedPreferences.getInt("notify2_" + dialog_id, -1);
        if (mute_type == -1) {
            return true ^ getNotificationsController().isGlobalNotificationsEnabled(dialog_id);
        }
        if (mute_type == 2) {
            return true;
        }
        if (mute_type == 3) {
            SharedPreferences sharedPreferences2 = this.notificationsPreferences;
            if (sharedPreferences2.getInt("notifyuntil_" + dialog_id, 0) >= getConnectionsManager().getCurrentTime()) {
                return true;
            }
        }
        return false;
    }

    private boolean updatePrintingUsersWithNewMessages(long uid, ArrayList<MessageObject> messages) {
        if (uid > 0) {
            if (this.printingUsers.get(Long.valueOf(uid)) == null) {
                return false;
            }
            this.printingUsers.remove(Long.valueOf(uid));
            return true;
        } else if (uid >= 0) {
            return false;
        } else {
            ArrayList<Integer> messagesUsers = new ArrayList<>();
            Iterator<MessageObject> it = messages.iterator();
            while (it.hasNext()) {
                MessageObject message = it.next();
                if (!messagesUsers.contains(Integer.valueOf(message.messageOwner.from_id))) {
                    messagesUsers.add(Integer.valueOf(message.messageOwner.from_id));
                }
            }
            ArrayList<PrintingUser> arr = this.printingUsers.get(Long.valueOf(uid));
            boolean changed = false;
            if (arr != null) {
                int a = 0;
                while (a < arr.size()) {
                    if (messagesUsers.contains(Integer.valueOf(arr.get(a).userId))) {
                        arr.remove(a);
                        a--;
                        if (arr.isEmpty()) {
                            this.printingUsers.remove(Long.valueOf(uid));
                        }
                        changed = true;
                    }
                    a++;
                }
            }
            if (changed) {
                return true;
            }
            return false;
        }
    }

    /* access modifiers changed from: protected */
    public void updateInterfaceWithMessages(long uid, ArrayList<MessageObject> messages, boolean scheduled) {
        long j = uid;
        ArrayList<MessageObject> arrayList = messages;
        boolean z = scheduled;
        if (arrayList != null && !messages.isEmpty()) {
            boolean isEncryptedChat = ((int) j) == 0;
            MessageObject lastMessage = null;
            int channelId = 0;
            boolean updateRating = false;
            boolean hasNotOutMessage = false;
            if (!z) {
                for (int a = 0; a < messages.size(); a++) {
                    MessageObject message = arrayList.get(a);
                    if (lastMessage == null || ((!isEncryptedChat && message.getId() > lastMessage.getId()) || (((isEncryptedChat || (message.getId() < 0 && lastMessage.getId() < 0)) && message.getId() < lastMessage.getId()) || message.messageOwner.date > lastMessage.messageOwner.date))) {
                        lastMessage = message;
                        if (message.messageOwner.to_id.channel_id != 0) {
                            channelId = message.messageOwner.to_id.channel_id;
                        }
                    }
                    if (!hasNotOutMessage && !message.isOut()) {
                        hasNotOutMessage = true;
                    }
                    if (message.isOut() && !message.isSending() && !message.isForwarded()) {
                        if (message.isNewGif()) {
                            getMediaDataController().addRecentGif(message.messageOwner.media.document, message.messageOwner.date);
                        } else if (!message.isAnimatedEmoji() && (message.isSticker() || message.isAnimatedSticker())) {
                            getMediaDataController().addRecentSticker(0, message, message.messageOwner.media.document, message.messageOwner.date, false);
                        }
                    }
                    if (message.isOut() && message.isSent()) {
                        updateRating = true;
                    }
                }
            }
            getMediaDataController().loadReplyMessagesForMessages(arrayList, j, z);
            getNotificationCenter().postNotificationName(NotificationCenter.didReceiveNewMessages, Long.valueOf(uid), arrayList, Boolean.valueOf(scheduled));
            if (lastMessage != null && !z) {
                TLRPC.TL_dialog dialog = (TLRPC.TL_dialog) this.dialogs_dict.get(j);
                if (!(lastMessage.messageOwner.action instanceof TLRPC.TL_messageActionChatMigrateTo)) {
                    boolean changed = false;
                    if (dialog == null) {
                        TLRPC.Chat chat = getChat(Integer.valueOf(channelId));
                        if (channelId != 0 && chat == null) {
                            return;
                        }
                        if (chat == null || !ChatObject.isNotInChat(chat)) {
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("not found dialog with id " + j + " dictCount = " + this.dialogs_dict.size() + " allCount = " + this.allDialogs.size());
                            }
                            TLRPC.TL_dialog dialog2 = new TLRPC.TL_dialog();
                            dialog2.id = j;
                            dialog2.unread_count = 0;
                            dialog2.top_message = lastMessage.getId();
                            dialog2.last_message_date = lastMessage.messageOwner.date;
                            dialog2.flags = ChatObject.isChannel(chat) ? 1 : 0;
                            this.dialogs_dict.put(j, dialog2);
                            this.allDialogs.add(dialog2);
                            this.dialogMessage.put(j, lastMessage);
                            if (lastMessage.messageOwner.to_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(lastMessage.getId(), lastMessage);
                                if (lastMessage.messageOwner.random_id != 0) {
                                    this.dialogMessagesByRandomIds.put(lastMessage.messageOwner.random_id, lastMessage);
                                }
                            }
                            changed = true;
                            getMessagesStorage().getDialogFolderId(j, new MessagesStorage.IntCallback(dialog2, j) {
                                private final /* synthetic */ TLRPC.Dialog f$1;
                                private final /* synthetic */ long f$2;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                }

                                public final void run(int i) {
                                    MessagesController.this.lambda$updateInterfaceWithMessages$291$MessagesController(this.f$1, this.f$2, i);
                                }
                            });
                        } else {
                            return;
                        }
                    } else {
                        if (hasNotOutMessage && dialog.folder_id == 1 && !isDialogMuted(dialog.id)) {
                            dialog.folder_id = 0;
                            dialog.pinned = false;
                            dialog.pinnedNum = 0;
                            getMessagesStorage().setDialogsFolderId((ArrayList<TLRPC.TL_folderPeer>) null, (ArrayList<TLRPC.TL_inputFolderPeer>) null, dialog.id, 0);
                            changed = true;
                        }
                        if ((dialog.top_message > 0 && lastMessage.getId() > 0 && lastMessage.getId() > dialog.top_message) || ((dialog.top_message < 0 && lastMessage.getId() < 0 && lastMessage.getId() < dialog.top_message) || this.dialogMessage.indexOfKey(j) < 0 || dialog.top_message < 0 || dialog.last_message_date <= lastMessage.messageOwner.date)) {
                            MessageObject object = this.dialogMessagesByIds.get(dialog.top_message);
                            this.dialogMessagesByIds.remove(dialog.top_message);
                            if (!(object == null || object.messageOwner.random_id == 0)) {
                                this.dialogMessagesByRandomIds.remove(object.messageOwner.random_id);
                            }
                            dialog.top_message = lastMessage.getId();
                            dialog.last_message_date = lastMessage.messageOwner.date;
                            changed = true;
                            this.dialogMessage.put(j, lastMessage);
                            if (lastMessage.messageOwner.to_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(lastMessage.getId(), lastMessage);
                                if (lastMessage.messageOwner.random_id != 0) {
                                    this.dialogMessagesByRandomIds.put(lastMessage.messageOwner.random_id, lastMessage);
                                }
                            }
                        }
                    }
                    if (changed) {
                        sortDialogs((SparseArray<TLRPC.Chat>) null);
                    }
                    if (updateRating) {
                        getMediaDataController().increasePeerRaiting(j);
                    }
                } else if (dialog != null) {
                    this.allDialogs.remove(dialog);
                    this.dialogsServerOnly.remove(dialog);
                    this.dialogsCanAddUsers.remove(dialog);
                    this.dialogsChannelsOnly.remove(dialog);
                    this.dialogsGroupsOnly.remove(dialog);
                    this.dialogsUnreadOnly.remove(dialog);
                    this.dialogsUsersOnly.remove(dialog);
                    this.dialogsForward.remove(dialog);
                    this.dialogs_dict.remove(dialog.id);
                    this.dialogs_read_inbox_max.remove(Long.valueOf(dialog.id));
                    this.dialogs_read_outbox_max.remove(Long.valueOf(dialog.id));
                    int offset = this.nextDialogsCacheOffset.get(dialog.folder_id, 0);
                    if (offset > 0) {
                        this.nextDialogsCacheOffset.put(dialog.folder_id, offset - 1);
                    }
                    this.dialogMessage.remove(dialog.id);
                    ArrayList<TLRPC.Dialog> dialogs = this.dialogsByFolder.get(dialog.folder_id);
                    if (dialogs != null) {
                        dialogs.remove(dialog);
                    }
                    MessageObject object2 = this.dialogMessagesByIds.get(dialog.top_message);
                    this.dialogMessagesByIds.remove(dialog.top_message);
                    if (!(object2 == null || object2.messageOwner.random_id == 0)) {
                        this.dialogMessagesByRandomIds.remove(object2.messageOwner.random_id);
                    }
                    dialog.top_message = 0;
                    getNotificationsController().removeNotificationsForDialog(dialog.id);
                    getNotificationCenter().postNotificationName(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
                }
            }
        }
    }

    public /* synthetic */ void lambda$updateInterfaceWithMessages$291$MessagesController(TLRPC.Dialog dialogFinal, long uid, int param) {
        if (param == -1) {
            int lowerId = (int) uid;
            if (lowerId != 0) {
                loadUnknownDialog(getInputPeer(lowerId), 0);
            }
        } else if (param != 0) {
            dialogFinal.folder_id = param;
            sortDialogs((SparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
        }
    }

    public void addDialogAction(long did, boolean clean) {
        TLRPC.Dialog dialog = this.dialogs_dict.get(did);
        if (dialog != null) {
            if (clean) {
                this.clearingHistoryDialogs.put(did, dialog);
            } else {
                this.deletingDialogs.put(did, dialog);
                this.allDialogs.remove(dialog);
                sortDialogs((SparseArray<TLRPC.Chat>) null);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
        }
    }

    public void removeDialogAction(long did, boolean clean, boolean apply) {
        TLRPC.Dialog dialog = this.dialogs_dict.get(did);
        if (dialog != null) {
            if (clean) {
                this.clearingHistoryDialogs.remove(did);
            } else {
                this.deletingDialogs.remove(did);
                if (!apply) {
                    this.allDialogs.add(dialog);
                    sortDialogs((SparseArray<TLRPC.Chat>) null);
                }
            }
            if (!apply) {
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
            }
        }
    }

    public boolean isClearingDialog(long did) {
        return this.clearingHistoryDialogs.get(did) != null;
    }

    public void sortDialogs(SparseArray<TLRPC.Chat> chatsDict) {
        TLRPC.User user;
        TLRPC.Chat chat;
        TLRPC.Chat chat2;
        SparseArray<TLRPC.Chat> sparseArray = chatsDict;
        this.dialogsServerOnly.clear();
        this.dialogsCanAddUsers.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUnreadOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForward.clear();
        for (int a = 0; a < this.dialogsByFolder.size(); a++) {
            ArrayList<TLRPC.Dialog> arrayList = this.dialogsByFolder.valueAt(a);
            if (arrayList != null) {
                arrayList.clear();
            }
        }
        this.unreadUnmutedDialogs = 0;
        boolean selfAdded = false;
        int selfId = getUserConfig().getClientUserId();
        Collections.sort(this.allDialogs, this.dialogComparator);
        this.isLeftProxyChannel = true;
        TLRPC.Dialog dialog = this.proxyDialog;
        if (dialog != null && dialog.id < 0 && (chat2 = getChat(Integer.valueOf(-((int) this.proxyDialog.id)))) != null && !chat2.left) {
            this.isLeftProxyChannel = false;
        }
        boolean countMessages = getNotificationsController().showBadgeMessages;
        int a2 = 0;
        int N = this.allDialogs.size();
        while (a2 < N) {
            TLRPC.Dialog d = this.allDialogs.get(a2);
            int high_id = (int) (d.id >> 32);
            int lower_id = (int) d.id;
            if (d instanceof TLRPC.TL_dialog) {
                boolean canAddToForward = true;
                if (!(lower_id == 0 || high_id == 1)) {
                    this.dialogsServerOnly.add(d);
                    if (DialogObject.isChannel(d)) {
                        TLRPC.Chat chat3 = getChat(Integer.valueOf(-lower_id));
                        if (chat3 != null && ((chat3.megagroup && chat3.admin_rights != null && (chat3.admin_rights.post_messages || chat3.admin_rights.add_admins)) || chat3.creator)) {
                            this.dialogsCanAddUsers.add(d);
                        }
                        if (chat3 == null || !chat3.megagroup) {
                            this.dialogsChannelsOnly.add(d);
                            canAddToForward = ChatObject.hasAdminRights(chat3) && ChatObject.canPost(chat3);
                        } else {
                            this.dialogsGroupsOnly.add(d);
                        }
                    } else if (lower_id < 0) {
                        if (sparseArray == null || (chat = sparseArray.get(-lower_id)) == null || chat.migrated_to == null) {
                            this.dialogsCanAddUsers.add(d);
                            this.dialogsGroupsOnly.add(d);
                        } else {
                            this.allDialogs.remove(a2);
                            a2--;
                            N--;
                            a2++;
                        }
                    } else if (lower_id > 0 && lower_id != selfId) {
                        this.dialogsUsersOnly.add(d);
                    }
                }
                if (!(d.unread_count == 0 && d.unread_mentions_count == 0)) {
                    this.dialogsUnreadOnly.add(d);
                }
                if (canAddToForward && d.folder_id == 0) {
                    if (lower_id == selfId) {
                        this.dialogsForward.add(0, d);
                        selfAdded = true;
                    } else {
                        this.dialogsForward.add(d);
                    }
                }
            }
            if ((d.unread_count != 0 || d.unread_mark) && !isDialogMuted(d.id)) {
                this.unreadUnmutedDialogs++;
            }
            if (this.proxyDialog == null || d.id != this.proxyDialog.id || !this.isLeftProxyChannel) {
                addDialogToItsFolder(-1, d, countMessages);
                a2++;
            } else {
                this.allDialogs.remove(a2);
                a2--;
                N--;
                a2++;
            }
        }
        TLRPC.Dialog dialog2 = this.proxyDialog;
        if (dialog2 != null && this.isLeftProxyChannel) {
            this.allDialogs.add(0, dialog2);
            addDialogToItsFolder(-2, this.proxyDialog, countMessages);
        }
        if (!selfAdded && (user = getUserConfig().getCurrentUser()) != null) {
            TLRPC.Dialog dialog3 = new TLRPC.TL_dialog();
            dialog3.id = (long) user.id;
            dialog3.notify_settings = new TLRPC.TL_peerNotifySettings();
            dialog3.peer = new TLRPC.TL_peerUser();
            dialog3.peer.user_id = user.id;
            this.dialogsForward.add(0, dialog3);
        }
        for (int a3 = 0; a3 < this.dialogsByFolder.size(); a3++) {
            int folderId = this.dialogsByFolder.keyAt(a3);
            if (this.dialogsByFolder.valueAt(a3).isEmpty()) {
                this.dialogsByFolder.remove(folderId);
            }
        }
    }

    private void addDialogToItsFolder(int index, TLRPC.Dialog dialog, boolean countMessages) {
        int folderId;
        TLRPC.Dialog folder;
        if (dialog instanceof TLRPC.TL_dialogFolder) {
            folderId = 0;
            dialog.unread_count = 0;
            dialog.unread_mentions_count = 0;
        } else {
            folderId = dialog.folder_id;
        }
        ArrayList<TLRPC.Dialog> dialogs = this.dialogsByFolder.get(folderId);
        if (dialogs == null) {
            dialogs = new ArrayList<>();
            this.dialogsByFolder.put(folderId, dialogs);
        }
        if (!(folderId == 0 || dialog.unread_count == 0 || (folder = this.dialogs_dict.get(DialogObject.makeFolderDialogId(folderId))) == null)) {
            if (countMessages) {
                if (isDialogMuted(dialog.id)) {
                    folder.unread_count += dialog.unread_count;
                } else {
                    folder.unread_mentions_count += dialog.unread_count;
                }
            } else if (isDialogMuted(dialog.id)) {
                folder.unread_count++;
            } else {
                folder.unread_mentions_count++;
            }
        }
        if (index == -1) {
            dialogs.add(dialog);
        } else if (index != -2) {
            dialogs.add(index, dialog);
        } else if (dialogs.isEmpty() || !(dialogs.get(0) instanceof TLRPC.TL_dialogFolder)) {
            dialogs.add(0, dialog);
        } else {
            dialogs.add(1, dialog);
        }
    }

    public static String getRestrictionReason(ArrayList<TLRPC.TL_restrictionReason> reasons) {
        if (reasons.isEmpty()) {
            return null;
        }
        int N = reasons.size();
        for (int a = 0; a < N; a++) {
            TLRPC.TL_restrictionReason reason = reasons.get(a);
            if ("all".equals(reason.platform) || "android".equals(reason.platform)) {
                return reason.text;
            }
        }
        return null;
    }

    public static void showCantOpenAlert(BaseFragment fragment, String reason) {
        if (fragment != null && fragment.getParentActivity() != null) {
            AlertDialog.Builder builder = new AlertDialog.Builder((Context) fragment.getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), (DialogInterface.OnClickListener) null);
            builder.setMessage(reason);
            fragment.showDialog(builder.create());
        }
    }

    public static void showCantOpenAlert2(final BaseFragment fragment, String reason) {
        if (fragment != null && fragment.getParentActivity() != null) {
            AlertDialog.Builder builder = new AlertDialog.Builder((Context) fragment.getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    fragment.finishFragment();
                }
            });
            builder.setMessage(reason);
            fragment.showDialog(builder.create());
        }
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment fragment) {
        return checkCanOpenChat(bundle, fragment, (MessageObject) null);
    }

    public boolean checkCanOpenChat2(Bundle bundle, BaseFragment fragment) {
        return checkCanOpenChat2(bundle, fragment, (MessageObject) null);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v2, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v4, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v9, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v7, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean checkCanOpenChat(android.os.Bundle r17, im.bclpbkiauv.ui.actionbar.BaseFragment r18, im.bclpbkiauv.messenger.MessageObject r19) {
        /*
            r16 = this;
            r0 = r16
            r1 = r17
            r2 = r18
            r3 = 1
            if (r1 == 0) goto L_0x00dc
            if (r2 != 0) goto L_0x000d
            goto L_0x00dc
        L_0x000d:
            r4 = 0
            r5 = 0
            r6 = 0
            java.lang.String r7 = "user_id"
            int r7 = r1.getInt(r7, r6)
            java.lang.String r8 = "chat_id"
            int r8 = r1.getInt(r8, r6)
            java.lang.String r9 = "message_id"
            int r9 = r1.getInt(r9, r6)
            if (r7 == 0) goto L_0x002e
            java.lang.Integer r10 = java.lang.Integer.valueOf(r7)
            im.bclpbkiauv.tgnet.TLRPC$User r4 = r0.getUser(r10)
            goto L_0x0038
        L_0x002e:
            if (r8 == 0) goto L_0x0038
            java.lang.Integer r10 = java.lang.Integer.valueOf(r8)
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r0.getChat(r10)
        L_0x0038:
            if (r4 != 0) goto L_0x003d
            if (r5 != 0) goto L_0x003d
            return r3
        L_0x003d:
            r10 = 0
            if (r5 == 0) goto L_0x0047
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$TL_restrictionReason> r11 = r5.restriction_reason
            java.lang.String r10 = getRestrictionReason(r11)
            goto L_0x004f
        L_0x0047:
            if (r4 == 0) goto L_0x004f
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$TL_restrictionReason> r11 = r4.restriction_reason
            java.lang.String r10 = getRestrictionReason(r11)
        L_0x004f:
            if (r10 == 0) goto L_0x0055
            showCantOpenAlert(r2, r10)
            return r6
        L_0x0055:
            if (r9 == 0) goto L_0x00db
            if (r19 == 0) goto L_0x00db
            if (r5 == 0) goto L_0x00db
            long r11 = r5.access_hash
            r13 = 0
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 != 0) goto L_0x00db
            long r11 = r19.getDialogId()
            int r12 = (int) r11
            if (r12 == 0) goto L_0x00db
            im.bclpbkiauv.ui.actionbar.AlertDialog r3 = new im.bclpbkiauv.ui.actionbar.AlertDialog
            androidx.fragment.app.FragmentActivity r11 = r18.getParentActivity()
            r13 = 3
            r3.<init>(r11, r13)
            if (r12 >= 0) goto L_0x007f
            int r11 = -r12
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r0.getChat(r11)
        L_0x007f:
            if (r12 > 0) goto L_0x00ab
            boolean r11 = im.bclpbkiauv.messenger.ChatObject.isChannel(r5)
            if (r11 != 0) goto L_0x0088
            goto L_0x00ab
        L_0x0088:
            int r11 = -r12
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r0.getChat(r11)
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages r11 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages
            r11.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r13 = getInputChannel((im.bclpbkiauv.tgnet.TLRPC.Chat) r5)
            r11.channel = r13
            java.util.ArrayList<java.lang.Integer> r13 = r11.id
            int r14 = r19.getId()
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)
            r13.add(r14)
            r13 = r11
            goto L_0x00bf
        L_0x00ab:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages r11 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages
            r11.<init>()
            java.util.ArrayList<java.lang.Integer> r13 = r11.id
            int r14 = r19.getId()
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)
            r13.add(r14)
            r13 = r11
        L_0x00bf:
            im.bclpbkiauv.tgnet.ConnectionsManager r11 = r16.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$JvC8GcGmlzxeQ_w6iCOWIfGImXk r14 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$JvC8GcGmlzxeQ_w6iCOWIfGImXk
            r14.<init>(r3, r2, r1)
            int r11 = r11.sendRequest(r13, r14)
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$2IX_1bLs-TZG6AEcwmb7Qd72l_s r14 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$2IX_1bLs-TZG6AEcwmb7Qd72l_s
            r14.<init>(r11, r2)
            r3.setOnCancelListener(r14)
            r2.setVisibleDialog(r3)
            r3.show()
            return r6
        L_0x00db:
            return r3
        L_0x00dc:
            return r3
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.checkCanOpenChat(android.os.Bundle, im.bclpbkiauv.ui.actionbar.BaseFragment, im.bclpbkiauv.messenger.MessageObject):boolean");
    }

    public /* synthetic */ void lambda$checkCanOpenChat$293$MessagesController(AlertDialog progressDialog, BaseFragment fragment, Bundle bundle, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            AndroidUtilities.runOnUIThread(new Runnable(progressDialog, response, fragment, bundle) {
                private final /* synthetic */ AlertDialog f$1;
                private final /* synthetic */ TLObject f$2;
                private final /* synthetic */ BaseFragment f$3;
                private final /* synthetic */ Bundle f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$292$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$292$MessagesController(AlertDialog progressDialog, TLObject response, BaseFragment fragment, Bundle bundle) {
        try {
            progressDialog.dismiss();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
        putUsers(res.users, false);
        putChats(res.chats, false);
        getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
        fragment.presentFragment(new ChatActivity(bundle), true);
    }

    public /* synthetic */ void lambda$checkCanOpenChat$294$MessagesController(int reqId, BaseFragment fragment, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
        if (fragment != null) {
            fragment.setVisibleDialog((Dialog) null);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v2, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v4, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v9, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v7, resolved type: im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean checkCanOpenChat2(android.os.Bundle r17, im.bclpbkiauv.ui.actionbar.BaseFragment r18, im.bclpbkiauv.messenger.MessageObject r19) {
        /*
            r16 = this;
            r0 = r16
            r1 = r17
            r2 = r18
            r3 = 1
            if (r1 == 0) goto L_0x00dc
            if (r2 != 0) goto L_0x000d
            goto L_0x00dc
        L_0x000d:
            r4 = 0
            r5 = 0
            r6 = 0
            java.lang.String r7 = "user_id"
            int r7 = r1.getInt(r7, r6)
            java.lang.String r8 = "chat_id"
            int r8 = r1.getInt(r8, r6)
            java.lang.String r9 = "message_id"
            int r9 = r1.getInt(r9, r6)
            if (r7 == 0) goto L_0x002e
            java.lang.Integer r10 = java.lang.Integer.valueOf(r7)
            im.bclpbkiauv.tgnet.TLRPC$User r4 = r0.getUser(r10)
            goto L_0x0038
        L_0x002e:
            if (r8 == 0) goto L_0x0038
            java.lang.Integer r10 = java.lang.Integer.valueOf(r8)
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r0.getChat(r10)
        L_0x0038:
            if (r4 != 0) goto L_0x003d
            if (r5 != 0) goto L_0x003d
            return r3
        L_0x003d:
            r10 = 0
            if (r5 == 0) goto L_0x0047
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$TL_restrictionReason> r11 = r5.restriction_reason
            java.lang.String r10 = getRestrictionReason(r11)
            goto L_0x004f
        L_0x0047:
            if (r4 == 0) goto L_0x004f
            java.util.ArrayList<im.bclpbkiauv.tgnet.TLRPC$TL_restrictionReason> r11 = r4.restriction_reason
            java.lang.String r10 = getRestrictionReason(r11)
        L_0x004f:
            if (r10 == 0) goto L_0x0055
            showCantOpenAlert2(r2, r10)
            return r6
        L_0x0055:
            if (r9 == 0) goto L_0x00db
            if (r19 == 0) goto L_0x00db
            if (r5 == 0) goto L_0x00db
            long r11 = r5.access_hash
            r13 = 0
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 != 0) goto L_0x00db
            long r11 = r19.getDialogId()
            int r12 = (int) r11
            if (r12 == 0) goto L_0x00db
            im.bclpbkiauv.ui.actionbar.AlertDialog r3 = new im.bclpbkiauv.ui.actionbar.AlertDialog
            androidx.fragment.app.FragmentActivity r11 = r18.getParentActivity()
            r13 = 3
            r3.<init>(r11, r13)
            if (r12 >= 0) goto L_0x007f
            int r11 = -r12
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r0.getChat(r11)
        L_0x007f:
            if (r12 > 0) goto L_0x00ab
            boolean r11 = im.bclpbkiauv.messenger.ChatObject.isChannel(r5)
            if (r11 != 0) goto L_0x0088
            goto L_0x00ab
        L_0x0088:
            int r11 = -r12
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            im.bclpbkiauv.tgnet.TLRPC$Chat r5 = r0.getChat(r11)
            im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages r11 = new im.bclpbkiauv.tgnet.TLRPC$TL_channels_getMessages
            r11.<init>()
            im.bclpbkiauv.tgnet.TLRPC$InputChannel r13 = getInputChannel((im.bclpbkiauv.tgnet.TLRPC.Chat) r5)
            r11.channel = r13
            java.util.ArrayList<java.lang.Integer> r13 = r11.id
            int r14 = r19.getId()
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)
            r13.add(r14)
            r13 = r11
            goto L_0x00bf
        L_0x00ab:
            im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages r11 = new im.bclpbkiauv.tgnet.TLRPC$TL_messages_getMessages
            r11.<init>()
            java.util.ArrayList<java.lang.Integer> r13 = r11.id
            int r14 = r19.getId()
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)
            r13.add(r14)
            r13 = r11
        L_0x00bf:
            im.bclpbkiauv.tgnet.ConnectionsManager r11 = r16.getConnectionsManager()
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$jgdhIqck6BsX2yd_ShxtMKUAhCE r14 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$jgdhIqck6BsX2yd_ShxtMKUAhCE
            r14.<init>(r3, r2, r1)
            int r11 = r11.sendRequest(r13, r14)
            im.bclpbkiauv.messenger.-$$Lambda$MessagesController$NKWpjNCk0tjZpeasMU9Zisigsr4 r14 = new im.bclpbkiauv.messenger.-$$Lambda$MessagesController$NKWpjNCk0tjZpeasMU9Zisigsr4
            r14.<init>(r11, r2)
            r3.setOnCancelListener(r14)
            r2.setVisibleDialog(r3)
            r3.show()
            return r6
        L_0x00db:
            return r3
        L_0x00dc:
            return r3
        */
        throw new UnsupportedOperationException("Method not decompiled: im.bclpbkiauv.messenger.MessagesController.checkCanOpenChat2(android.os.Bundle, im.bclpbkiauv.ui.actionbar.BaseFragment, im.bclpbkiauv.messenger.MessageObject):boolean");
    }

    public /* synthetic */ void lambda$checkCanOpenChat2$296$MessagesController(AlertDialog progressDialog, BaseFragment fragment, Bundle bundle, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            AndroidUtilities.runOnUIThread(new Runnable(progressDialog, response, fragment, bundle) {
                private final /* synthetic */ AlertDialog f$1;
                private final /* synthetic */ TLObject f$2;
                private final /* synthetic */ BaseFragment f$3;
                private final /* synthetic */ Bundle f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$295$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$295$MessagesController(AlertDialog progressDialog, TLObject response, BaseFragment fragment, Bundle bundle) {
        try {
            progressDialog.dismiss();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
        putUsers(res.users, false);
        putChats(res.chats, false);
        getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
        fragment.presentFragment(new ChatActivity(bundle), true);
    }

    public /* synthetic */ void lambda$checkCanOpenChat2$297$MessagesController(int reqId, BaseFragment fragment, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
        if (fragment != null) {
            fragment.setVisibleDialog((Dialog) null);
        }
    }

    public static void openChatOrProfileWith(TLRPC.User user, TLRPC.Chat chat, BaseFragment fragment, int type, boolean closeLast) {
        if ((user != null || chat != null) && fragment != null) {
            String reason = null;
            if (chat != null) {
                reason = getRestrictionReason(chat.restriction_reason);
            } else if (user != null) {
                reason = getRestrictionReason(user.restriction_reason);
                if (user.bot) {
                    type = 1;
                    closeLast = true;
                }
            }
            if (reason != null) {
                showCantOpenAlert(fragment, reason);
                return;
            }
            Bundle args = new Bundle();
            if (chat != null) {
                args.putInt("chat_id", chat.id);
            } else {
                args.putInt("user_id", user.id);
            }
            if (type == 0) {
                fragment.presentFragment(new ProfileActivity(args));
            } else if (type == 2) {
                fragment.presentFragment(new ChatActivity(args), true, true);
            } else {
                fragment.presentFragment(new ChatActivity(args), closeLast);
            }
        }
    }

    public void openByUserName(String username, BaseFragment fragment, int type) {
        openByUserName(username, fragment, type, false);
    }

    public void openByUserName(String username, BaseFragment fragment, int type, boolean closeLast) {
        TLRPC.Chat chat;
        TLRPC.User user;
        String str = username;
        BaseFragment baseFragment = fragment;
        boolean z = closeLast;
        if (str == null) {
            int i = type;
        } else if (baseFragment == null) {
            int i2 = type;
        } else {
            TLObject object = getUserOrChat(username);
            if (object instanceof TLRPC.User) {
                TLRPC.User user2 = (TLRPC.User) object;
                if (user2.min) {
                    user = null;
                    chat = null;
                } else {
                    user = user2;
                    chat = null;
                }
            } else if (object instanceof TLRPC.Chat) {
                TLRPC.Chat chat2 = (TLRPC.Chat) object;
                if (chat2.min) {
                    user = null;
                    chat = null;
                } else {
                    user = null;
                    chat = chat2;
                }
            } else {
                user = null;
                chat = null;
            }
            if (user != null) {
                openChatOrProfileWith(user, (TLRPC.Chat) null, baseFragment, type, z);
                return;
            }
            int i3 = type;
            if (chat != null) {
                openChatOrProfileWith((TLRPC.User) null, chat, baseFragment, 1, z);
            } else if (fragment.getParentActivity() != null) {
                AlertDialog[] progressDialog = {new AlertDialog(fragment.getParentActivity(), 3)};
                TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
                req.username = str;
                ConnectionsManager connectionsManager = getConnectionsManager();
                $$Lambda$MessagesController$OIMPSc5z_HpSKxMENEPUINwLY r0 = r1;
                $$Lambda$MessagesController$OIMPSc5z_HpSKxMENEPUINwLY r1 = new RequestDelegate(progressDialog, fragment, closeLast, type) {
                    private final /* synthetic */ AlertDialog[] f$1;
                    private final /* synthetic */ BaseFragment f$2;
                    private final /* synthetic */ boolean f$3;
                    private final /* synthetic */ int f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                    }

                    public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                        MessagesController.this.lambda$openByUserName$299$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                    }
                };
                AndroidUtilities.runOnUIThread(new Runnable(progressDialog, connectionsManager.sendRequest(req, r0), baseFragment) {
                    private final /* synthetic */ AlertDialog[] f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ BaseFragment f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesController.this.lambda$openByUserName$301$MessagesController(this.f$1, this.f$2, this.f$3);
                    }
                }, 500);
            }
        }
    }

    public /* synthetic */ void lambda$openByUserName$299$MessagesController(AlertDialog[] progressDialog, BaseFragment fragment, boolean closeLast, int type, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(progressDialog, fragment, error, response, closeLast, type) {
            private final /* synthetic */ AlertDialog[] f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC.TL_error f$3;
            private final /* synthetic */ TLObject f$4;
            private final /* synthetic */ boolean f$5;
            private final /* synthetic */ int f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$298$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$298$MessagesController(AlertDialog[] progressDialog, BaseFragment fragment, TLRPC.TL_error error, TLObject response, boolean closeLast, int type) {
        try {
            progressDialog[0].dismiss();
        } catch (Exception e) {
        }
        progressDialog[0] = null;
        fragment.setVisibleDialog((Dialog) null);
        if (error == null) {
            TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
            putUsers(res.users, false);
            putChats(res.chats, false);
            getMessagesStorage().putUsersAndChats(res.users, res.chats, false, true);
            if (!res.chats.isEmpty()) {
                openChatOrProfileWith((TLRPC.User) null, res.chats.get(0), fragment, 1, closeLast);
            } else if (res.users.isEmpty()) {
            } else {
                if (!res.users.get(0).contact) {
                    fragment.presentFragment(new AddContactsInfoActivity((Bundle) null, res.users.get(0)));
                } else {
                    openChatOrProfileWith(res.users.get(0), (TLRPC.Chat) null, fragment, type, closeLast);
                }
            }
        } else if (fragment != null && fragment.getParentActivity() != null) {
            if (type == 0) {
                ToastUtils.show((int) R.string.NoUsernameFound);
            } else {
                AlertsCreator.createSimpleAlert(fragment.getParentActivity(), LocaleController.getString("JoinToGroupErrorNotExist", R.string.JoinToGroupErrorNotExist)).show();
            }
        }
    }

    public /* synthetic */ void lambda$openByUserName$301$MessagesController(AlertDialog[] progressDialog, int reqId, BaseFragment fragment) {
        if (progressDialog[0] != null) {
            progressDialog[0].setOnCancelListener(new DialogInterface.OnCancelListener(reqId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$null$300$MessagesController(this.f$1, dialogInterface);
                }
            });
            fragment.showDialog(progressDialog[0]);
        }
    }

    public /* synthetic */ void lambda$null$300$MessagesController(int reqId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
    }

    public void openByUserName(String username, BaseFragment fragment, TLRPC.Chat currentChat, boolean closeLast) {
        TLRPC.Chat chat;
        TLRPC.User user;
        String str = username;
        BaseFragment baseFragment = fragment;
        TLRPC.Chat chat2 = currentChat;
        if (str == null) {
            boolean z = closeLast;
        } else if (baseFragment == null) {
            boolean z2 = closeLast;
        } else if (!ChatObject.canSendEmbed(currentChat)) {
            ToastUtils.show((int) R.string.ForbidViewUserAndGroupInfoTips);
        } else {
            TLObject object = getUserOrChat(username);
            if (object instanceof TLRPC.User) {
                TLRPC.User user2 = (TLRPC.User) object;
                if (user2.min) {
                    user = null;
                    chat = null;
                } else {
                    user = user2;
                    chat = null;
                }
            } else if (object instanceof TLRPC.Chat) {
                TLRPC.Chat chat3 = (TLRPC.Chat) object;
                if (chat3.min) {
                    user = null;
                    chat = null;
                } else {
                    user = null;
                    chat = chat3;
                }
            } else {
                user = null;
                chat = null;
            }
            boolean z3 = false;
            if (user != null) {
                if (!user.self && chat2 != null && !ChatObject.hasAdminRights(currentChat) && chat2.megagroup && (chat2.flags & ConnectionsManager.FileTypeVideo) != 0 && !user.mutual_contact) {
                    ToastUtils.show((int) R.string.ForbidViewUserInfoTips);
                } else if (user.contact) {
                    Bundle args = new Bundle();
                    args.putInt("user_id", user.id);
                    if (chat2 != null) {
                        if (chat2.megagroup && (33554432 & chat2.flags) != 0) {
                            z3 = true;
                        }
                        args.putBoolean("forbid_add_contact", z3);
                        args.putBoolean("has_admin_right", ChatObject.hasAdminRights(currentChat));
                    }
                    baseFragment.presentFragment(new NewProfileActivity(args));
                    boolean z4 = closeLast;
                } else {
                    Bundle args2 = new Bundle();
                    args2.putInt("user_id", user.id);
                    if (chat2 != null) {
                        if (chat2.megagroup && (33554432 & chat2.flags) != 0) {
                            z3 = true;
                        }
                        args2.putBoolean("forbid_add_contact", z3);
                        args2.putBoolean("has_admin_right", ChatObject.hasAdminRights(currentChat));
                    }
                    args2.putInt("from_type", 2);
                    baseFragment.presentFragment(new NewProfileActivity(args2));
                    boolean z5 = closeLast;
                }
            } else if (chat != null) {
                openChatOrProfileWith((TLRPC.User) null, chat, baseFragment, 1, closeLast);
            } else {
                boolean z6 = closeLast;
                if (fragment.getParentActivity() != null) {
                    AlertDialog[] progressDialog = {new AlertDialog(fragment.getParentActivity(), 3)};
                    TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
                    req.username = str;
                    ConnectionsManager connectionsManager = getConnectionsManager();
                    $$Lambda$MessagesController$PlWrqQ1xWd5TVNWxCH4_IoIpxnc r0 = r1;
                    $$Lambda$MessagesController$PlWrqQ1xWd5TVNWxCH4_IoIpxnc r1 = new RequestDelegate(progressDialog, fragment, closeLast, currentChat) {
                        private final /* synthetic */ AlertDialog[] f$1;
                        private final /* synthetic */ BaseFragment f$2;
                        private final /* synthetic */ boolean f$3;
                        private final /* synthetic */ TLRPC.Chat f$4;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                            this.f$3 = r4;
                            this.f$4 = r5;
                        }

                        public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                            MessagesController.this.lambda$openByUserName$303$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tL_error);
                        }
                    };
                    AndroidUtilities.runOnUIThread(new Runnable(progressDialog, connectionsManager.sendRequest(req, r0), baseFragment) {
                        private final /* synthetic */ AlertDialog[] f$1;
                        private final /* synthetic */ int f$2;
                        private final /* synthetic */ BaseFragment f$3;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                            this.f$3 = r4;
                        }

                        public final void run() {
                            MessagesController.this.lambda$openByUserName$305$MessagesController(this.f$1, this.f$2, this.f$3);
                        }
                    }, 500);
                }
            }
        }
    }

    public /* synthetic */ void lambda$openByUserName$303$MessagesController(AlertDialog[] progressDialog, BaseFragment fragment, boolean closeLast, TLRPC.Chat currentChat, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new Runnable(progressDialog, fragment, error, response, closeLast, currentChat) {
            private final /* synthetic */ AlertDialog[] f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC.TL_error f$3;
            private final /* synthetic */ TLObject f$4;
            private final /* synthetic */ boolean f$5;
            private final /* synthetic */ TLRPC.Chat f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$302$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$302$MessagesController(AlertDialog[] progressDialog, BaseFragment fragment, TLRPC.TL_error error, TLObject response, boolean closeLast, TLRPC.Chat currentChat) {
        boolean z = false;
        try {
            progressDialog[0].dismiss();
        } catch (Exception e) {
        }
        progressDialog[0] = null;
        fragment.setVisibleDialog((Dialog) null);
        if (error == null) {
            TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
            putUsers(res.users, false);
            putChats(res.chats, false);
            getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
            if (!res.chats.isEmpty()) {
                openChatOrProfileWith((TLRPC.User) null, res.chats.get(0), fragment, 1, closeLast);
            } else if (!res.users.isEmpty()) {
                TLRPC.User user1 = res.users.get(0);
                if (user1.self || currentChat == null || ChatObject.hasAdminRights(currentChat) || !currentChat.megagroup || (currentChat.flags & ConnectionsManager.FileTypeVideo) == 0 || user1.mutual_contact) {
                    Bundle args = new Bundle();
                    args.putInt("user_id", user1.id);
                    if (currentChat != null) {
                        if (currentChat.megagroup && (33554432 & currentChat.flags) != 0) {
                            z = true;
                        }
                        args.putBoolean("forbid_add_contact", z);
                        args.putBoolean("has_admin_right", ChatObject.hasAdminRights(currentChat));
                    }
                    args.putInt("from_type", 2);
                    fragment.presentFragment(new NewProfileActivity(args));
                    return;
                }
                ToastUtils.show((int) R.string.ForbidViewUserInfoTips);
            }
        } else if (fragment != null && fragment.getParentActivity() != null) {
            try {
                ToastUtils.show((int) R.string.NoUsernameFound);
            } catch (Exception e2) {
                FileLog.e((Throwable) e2);
            }
        }
    }

    public /* synthetic */ void lambda$openByUserName$305$MessagesController(AlertDialog[] progressDialog, int reqId, BaseFragment fragment) {
        if (progressDialog[0] != null) {
            progressDialog[0].setOnCancelListener(new DialogInterface.OnCancelListener(reqId) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$null$304$MessagesController(this.f$1, dialogInterface);
                }
            });
            fragment.showDialog(progressDialog[0]);
        }
    }

    public /* synthetic */ void lambda$null$304$MessagesController(int reqId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
    }

    public void saveContactsAppliesId(int applyId) {
        this.mainPreferences.edit().putInt("contacts_apply_id", applyId).apply();
    }

    public void saveContactsAppliesDate(int date) {
        this.mainPreferences.edit().putInt("last_contacts_get_diff", date).apply();
    }

    public void saveContactsAppliesHash(long hash) {
        this.mainPreferences.edit().putLong("contacts_apply_hash", hash).apply();
    }

    public void handleUpdatesContactsApply(int count) {
        if (count <= 0) {
            this.mainPreferences.edit().putInt("contacts_apply_count", 0).apply();
        } else {
            this.mainPreferences.edit().putInt("contacts_apply_count", count).apply();
        }
    }

    public void getContactsApplyDifferenceV2(boolean reget, boolean slice) {
        getContactsApplyDifferenceV2(reget, false, slice);
    }

    public void getContactsApplyDifferenceV2(boolean reget, boolean reset, boolean slice) {
        if (!this.contactsGetDiff) {
            this.contactsGetDiff = true;
            int i = -1;
            int applyId = this.mainPreferences.getInt("contacts_apply_id", -1);
            int needTime = this.mainPreferences.getInt("last_contacts_get_diff", 0);
            long j = 0;
            long applyHash = this.mainPreferences.getLong("contacts_apply_hash", 0);
            TLRPCContacts.GetContactAppliesDifferenceV2 req = new TLRPCContacts.GetContactAppliesDifferenceV2();
            if (!reget) {
                i = applyId;
            }
            req.apply_id = i;
            req.total_limit = 100;
            req.date = needTime;
            if (!reset) {
                j = applyHash;
            }
            req.hash = j;
            getConnectionsManager().sendRequest(req, new RequestDelegate(reget) {
                private final /* synthetic */ boolean f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC.TL_error tL_error) {
                    MessagesController.this.lambda$getContactsApplyDifferenceV2$309$MessagesController(this.f$1, tLObject, tL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getContactsApplyDifferenceV2$309$MessagesController(boolean reget, TLObject response, TLRPC.TL_error error) {
        this.contactsGetDiff = false;
        if (error == null) {
            TLRPCContacts.ContactsAppiesDifferenceV2 res = (TLRPCContacts.ContactsAppiesDifferenceV2) response;
            if (res instanceof TLRPCContacts.HC_contacts_apply_notModified) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$306$MessagesController();
                    }
                });
            } else if (res instanceof TLRPCContacts.HC_contacts_apply_differenceSlice_v2) {
                getMessagesController().putUsers(res.users, false);
                ArrayList<TLRPCContacts.ContactApplyInfo> infos = new ArrayList<>();
                for (int i = 0; i < res.otherUpdates.size(); i++) {
                    TLRPC.Update update = res.otherUpdates.get(i);
                    if (update instanceof TLRPCContacts.UpdateContactApplyRequested) {
                        TLRPCContacts.UpdateContactApplyRequested obj = (TLRPCContacts.UpdateContactApplyRequested) update;
                        if (obj.apply_info.from_peer.user_id != getUserConfig().clientUserId) {
                            infos.add(obj.apply_info);
                        }
                    }
                }
                getContactsApplyDifferenceV2(false, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.e("------------> slice response");
                }
                if (infos.size() > 0 && BuildVars.LOGS_ENABLED) {
                    FileLog.e("------------> infos.size() :" + infos.size());
                }
            } else {
                ArrayList<TLRPCContacts.ContactApplyInfo> infos2 = new ArrayList<>();
                getMessagesController().putUsers(res.users, false);
                for (int i2 = 0; i2 < res.otherUpdates.size(); i2++) {
                    TLRPC.Update update2 = res.otherUpdates.get(i2);
                    if (update2 instanceof TLRPCContacts.UpdateContactApplyRequested) {
                        TLRPCContacts.UpdateContactApplyRequested obj2 = (TLRPCContacts.UpdateContactApplyRequested) update2;
                        if (obj2.apply_info.from_peer.user_id != getUserConfig().clientUserId) {
                            infos2.add(obj2.apply_info);
                        }
                    }
                }
                if (infos2.size() > 0) {
                    handleUpdatesContactsApply(res.state.unread_count);
                    AndroidUtilities.runOnUIThread(new Runnable(res, infos2) {
                        private final /* synthetic */ TLRPCContacts.ContactsAppiesDifferenceV2 f$1;
                        private final /* synthetic */ ArrayList f$2;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$307$MessagesController(this.f$1, this.f$2);
                        }
                    });
                } else {
                    handleUpdatesContactsApply(res.state.unread_count);
                    AndroidUtilities.runOnUIThread(new Runnable(res) {
                        private final /* synthetic */ TLRPCContacts.ContactsAppiesDifferenceV2 f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$308$MessagesController(this.f$1);
                        }
                    });
                }
                saveContactsAppliesId(res.state.apply_id);
                saveContactsAppliesHash(res.hash);
            }
        }
    }

    public /* synthetic */ void lambda$null$306$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.contactApplyUpdateCount, 0);
    }

    public /* synthetic */ void lambda$null$307$MessagesController(TLRPCContacts.ContactsAppiesDifferenceV2 res, ArrayList infos) {
        getNotificationCenter().postNotificationName(NotificationCenter.contactApplyUpdateCount, Integer.valueOf(res.state.unread_count));
        getNotificationCenter().postNotificationName(NotificationCenter.contactApplieReceived, infos, res.users);
    }

    public /* synthetic */ void lambda$null$308$MessagesController(TLRPCContacts.ContactsAppiesDifferenceV2 res) {
        getNotificationCenter().postNotificationName(NotificationCenter.contactApplyUpdateCount, Integer.valueOf(res.state.unread_count));
    }
}
